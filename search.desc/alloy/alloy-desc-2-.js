searchState.loadedDescShard("alloy", 2, "The highest block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it’s a bool parameter.\nReturns true if it’s a log parameter.\nThe starting block.\nWhether the node is currently syncing.\nEthereum Log\nContract that emitted this log.\nArbitrary length data.\nCalculate receipt logs bloom.\nTopics of the log. The number of logs depend on what <code>LOG</code> …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nError thrown when both <code>data</code> and <code>input</code> fields are set and …\nRepresents <em>all</em> transaction requests to/from RPC.\nAn EIP-2930 access list, which lowers cost for accessing …\nBlob versioned hashes for EIP-4844 transactions.\nThe chain ID for the transaction.\nTransaction data\nReturns the argument unchanged.\nThe address of the transaction author.\nThe gas limit for the transaction.\nThe legacy gas price.\nTransaction data.\nTransaction data\nCalls <code>U::from(self)</code>.\nThe max fee per blob gas for EIP-4844 blob transactions.\nThe max base fee per gas the sender is willing to pay.\nThe max priority fee per gas the sender is willing to pay, …\nThe nonce of the transaction.\nBlob sidecar for EIP-4844 transactions.\nThe destination address of the transaction.\nThe EIP-2718 transaction type. See EIP-2718 for more …\nThe value transferred in the transaction, in wei.\nA storage key type that can be serialized to and from a …\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\nHelpers for dealing with numbers. Numeric serde helpers.\nSerde serialization and deserialization for <code>bool</code> as <code>0x0</code> or …\nSerialize a B256 as a hex string <em>without</em> the “0x” …\nSerialize a byte vec as a hex string <em>without</em> the “0x” …\nStorage related helpers.\nJson U256 serde helpers.\nserde functions for handling primitive optional <code>u128</code> via …\nserde functions for handling <code>Vec&lt;Vec&lt;u128&gt;&gt;</code> via U128\nserde functions for handling <code>Vec&lt;u128&gt;</code> via U128\nserde functions for handling primitive <code>u128</code> via U128\nserde functions for handling <code>Option&lt;u64&gt;</code> via U64\nserde functions for handling <code>u64</code> via U64\nserde functions for handling <code>Option&lt;u8&gt;</code> via U8\nserde functions for handling <code>u8</code> via U8\nDeserializes an <code>Option&lt;u128&gt;</code> accepting a hex quantity …\nSerializes <code>Option&lt;u128&gt;</code> as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>Option</code> from U64 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>u64</code> from U64 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>Option</code> from U8 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>u8</code> from U8 accepting a hex quantity string …\nSerializes u64 as hex string\nDeserializes a <code>bool</code> via a U1 quantity.\nSerializes a <code>bool</code> via a U1 quantity.\nA storage key type that can be serialized to and from a …\nDeserializes the input into an Option&lt;HashMap&lt;B256, …\nConverts a Bytes value into a B256, accepting inputs that …\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\nCustom account override used in call\nA set of account overrides\nFake balance to set for the account before executing the …\nFake EVM bytecode to inject into the account before …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFake nonce to set for the account before executing the …\nFake key-value mapping to override all slots in the …\nFake key-value mapping to override individual slots in the …\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\nAccess list with gas used appended.\nReceipt envelope, as defined in EIP-2718.\nAlias for a catch-all receipt type.\nBase fee per gas integer conversion error\nBlob gas used integer conversion error\nThis represents a set of blobs, and its corresponding …\nError variants when converting from crate::Transaction to …\nReceipt envelope with type flag 2, containing a EIP-1559 …\nError during EIP-2718 transaction coding.\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 2, containing a EIP-4844 …\nExcess blob gas integer conversion error\nGas limit integer conversion error\nGas used integer conversion error\nInvalid signature\nReceipt envelope with no type flag.\nMissing <code>accessList</code> field for EIP-2930 transaction.\nMissing <code>blobVersionedHashes</code> field for EIP-4844 transaction.\nMissing block number\nMissing <code>chainId</code> field for EIP-1559 transaction.\nMissing full transactions required for block decoding\nMissing <code>gasPrice</code> field for Legacy transaction.\nMissing <code>maxFeePerBlobGas</code> field for EIP-1559 transaction.\nMissing <code>maxFeePerGas</code> field for EIP-1559 transaction.\nMissing <code>maxPriorityFeePerGas</code> field for EIP-1559 …\nMissing signature for transaction.\nMissing <code>to</code> field for EIP-4844 transaction.\nMissing y parity in signature.\nAdditional fields for Optimism transaction receipts\nType that represents the signature parity byte, meant for …\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\nContainer type for all signature fields in RPC\n<code>alloy_primitives::SignatureError</code>.\nTransaction object used in RPC\nAdditional fields in the context of a block that contains …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nTransaction receipt\nRepresents <em>all</em> transaction requests to/from RPC.\nList with accounts accessed during transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nEIP2930\nAccount addresses that would be loaded at the start of …\nBase fee of the block.\nThe price paid by the eip-4844 transaction per blob gas.\nBlob gas used by the eip-4844 transaction\nBlob versioned hashes for EIP-4844 transactions.\nContains the blob hashes for eip-4844 transactions.\nThe blob data.\nHash of the block.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block.\nNumber of the block this transaction was included within.\nBlock number\nThe chain ID for the transaction.\nThe chain id of the transaction, if any.\nThe blob commitments.\nContract address created, or None if not a deployment.\nGas used\nTransaction data\nDeposit nonce for deposit transactions post-regolith\nDeposit receipt version for deposit transactions …\nThe price paid post-execution by the transaction (i.e. …\nReturns the argument unchanged.\nAddress of the sender\nThe address of the transaction author.\nSender\nThe gas limit for the transaction.\nGas amount\nThe legacy gas price.\nGas Price\nEstimated gas used with access list.\nGas used by this transaction alone.\nHash of the transaction.\nHash\nIndex of the transaction in the block\nThe inner struct.\nThe receipt envelope.\nThe receipt envelope, which contains the consensus receipt …\nTransaction data.\nTransaction data\nData\nCalls <code>U::from(self)</code>.\nConverts Transaction into TransactionRequest.\nReturns true if the transaction is a legacy or 2930 …\nL1 fee for the transaction\nL1 fee scalar for the transaction\nL1 gas price for the transaction\nL1 gas used for the transaction\nLog send from contracts.\nThe bloom filter.\nThe max fee per blob gas for EIP-4844 blob transactions.\nConfigured max fee per blob gas for eip-4844 transactions\nThe max base fee per gas the sender is willing to pay.\nMax BaseFeePerGas the user is willing to pay.\nThe max priority fee per gas the sender is willing to pay, …\nThe miner’s tip.\nThe nonce of the transaction.\nNonce\nMisc Optimism-specific types.\nAll fields not present in the inner struct.\nArbitrary extra fields.\nThe blob proofs.\nThe R field of the signature; the point on the curve.\nThe receipt.\nThe S field of the signature; the point on the curve.\nBlob sidecar for EIP-4844 transactions.\nAll <em>flattened</em> fields of the transaction signature.\nThe post-transaction stateroot (pre Byzantium)\nIf transaction is executed successfully.\nKeys of storage that would be loaded at the start of …\nAddress of the receiver. None when its a contract creation …\nThe destination address of the transaction.\nRecipient\nTransaction Hash.\nIndex within the block.\nTransaction Index\nThe EIP-2718 transaction type. See EIP-2718 for more …\nEIP2718\nThe transaction type.\nFor EIP-155, EIP-2930 and Blob transactions this is set to …\nThe value transferred in the transaction, in wei.\nTransferred value\nThe y parity of the signature. This is only used for typed …\nOptimism specific transaction fields\nAdditional fields for Optimism transaction receipts\nDeposit nonce for deposit transactions post-regolith\nDeposit receipt version for deposit transactions …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nField indicating whether the transaction is a system …\nL1 fee for the transaction\nL1 fee scalar for the transaction\nL1 gas price for the transaction\nL1 gas used for the transaction\nThe ETH value to mint on L2\nHash that uniquely identifies the source of the deposit.\nTransaction Pool Content\nTransaction Pool Content From\nTransaction Pool Inspect\nTransaction summary as found in the Txpool Inspection …\nTransaction Pool Status\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas amount\nGas Price\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\npending tx\npending tx\npending tx\nnumber of pending tx\nqueued tx\nqueued tx\nqueued tx\nnumber of queued tx\nRemoves the transactions from the given sender\nRecipient (None when contract creation)\nTransferred value\nTypes used by tracing backends.\n<code>trace_filter</code> types and support\nGeth tracing types.\nTypes for opcode tracing.\nOtterscan specific types for RPC responses.\nTypes for trace module.\nBuilder style functions for <code>trace_call</code>\nUntagged error variant\nUntagged success variant\nThe result of a single transaction trace.\nReturns a reference to the error if it is an error variant.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the result is an error.\nChecks if the result is a success.\nCreates a new error trace result.\nCreates a new success trace result.\nReturns a reference to the result if it is a success …\nReturns the hash of the transaction that was traced.\nTrace failure produced by the tracer\nTrace results produced by the tracer\ntransaction hash\ntransaction hash\nOnly return traces for transactions with matching <code>from</code> <em>and</em> …\nTrace filter.\nHelper type for matching <code>from</code> and <code>to</code> addresses. Empty sets …\nHow to apply <code>from_address</code> and <code>to_address</code> filters.\nReturn traces for transactions with matching <code>from</code> OR <code>to</code> …\nSets the <code>after</code> field of the struct\nOutput offset\nSets the <code>count</code> field of the struct\nOutput amount\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from_address</code> field of the struct\nFrom address\nSets the <code>from_block</code> field of the struct\nFrom block\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>TraceFilterMatcher</code> for this filter.\nReturns <code>true</code> if the given <code>from</code> and <code>to</code> addresses match this …\nSets the <code>from_address</code> field of the struct\nHow to apply <code>from_address</code> and <code>to_address</code> filters.\nSets the <code>to_address</code> field of the struct\nTo address\nSets the <code>to_block</code> field of the struct\nTo block\nHelper type to track the kind of change of an AccountState.\nRepresents the state of an account.\nblockTraceResult represents the results of tracing a …\nbuilt-in tracer\nThe configuration for the call tracer.\nThe response object for <code>debug_traceTransaction</code> with …\nRepresents a recorded call.\nThe response for call tracer\nThe callTracer tracks all the call frames executed during …\nThe account was created.\nThe default mode returns the accounts necessary to execute …\nThe response for the default struct log tracer\nGeth Default struct log trace frame\nDiff mode returns the differences between the transaction…\nRepresents the account states before and after the …\nHelper type for DiffMode to represent a specific set\nUntagged error variant\nThe 4byte tracer response object.\nThe response for four byte tracer\nThe 4byteTracer collects the function selectors of every …\nAvailable built-in tracers\nConfiguration of the tracer\nAvailable tracers\nBindings for additional <code>debug_traceCall</code> options\nBindings for additional <code>debug_traceTransaction</code> options\nDefault tracing options for the struct looger.\nTracing response objects\nAny other trace response, such as custom javascript …\ncustom JS tracer\nThe account was modified.\nThe response for mux tracer\nThe mux tracer is a tracer that can run multiple tracers …\nAn empty frame response that’s only an empty json object …\nAn empty json response\nThis tracer is noop. It returns an empty object and is …\nCorresponds to the post state of the DiffMode\nCorresponds to the pre state of the DiffMode\nThe config for the prestate tracer.\nA tracer that records AccountStates. The prestate tracer …\nIncludes all the account states necessary to execute a …\nThe response for pre-state byte tracer\nThe prestate tracer has two modes: prestate and diff. The …\nThe account was selfdestructed.\nRepresents a struct log entry in a trace\nUntagged success variant\nResult type for geth style transaction trace\nThe address of the contract that was called.\nReturns the account states after the transaction is …\nReturns the account states before and after the …\nThe optional balance of the account.\nBlock number corresponding to the trace task\nThe block overrides to apply\nGeth call tracer types.\nRecorded child calls.\nThe optional code of the account.\nThe common tracing options\nThe data of the log.\nEnables debug mode.\nprint output during capture end\nCurrent call depth\nIf <code>diffMode</code> is set to true, the response frame includes …\nDisables memory capture.\nDisable memory capture\nDisables return data capture.\nDisable return data capture\nDisables stack capture.\ndisable stack capture\nDisables storage capture.\nDisable storage capture\nEnables memory capture.\nenable memory capture\nEnables return data capture.\nEnable return data capture\nError message, if any.\nError message if any\nWhether the transaction failed\nGeth 4byte tracer types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe address of that initiated the call.\nCreates a new <code>AccountState</code> with the given account info.\nConsumes the config and tries to deserialize it into the …\nHow much gas was left before the call.\nHow much gas was used.\nremaining gas\ncost for executing op\nHow much gas was used by the call.\nBlock hash corresponding to the trace task\nCalldata input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the CallConfig if it is a call config.\nReturns the raw json value\nReturns the MuxConfig if it is a mux config.\nReturns the PreStateConfig if it is a prestate config.\nReturns true if the account was created\nReturns true if this trace was requested without diffmode.\nIs default mode if diff_mode is not set\nReturns true if this trace was requested with diffmode.\nReturns true if this trace was requested with diffmode.\nReturns <code>true</code> if memory capture is enabled\nReturns true the account was modified\nReturns if this is a null object\nReturns true if this is the post state of the DiffMode\nReturns true if this is the pre state of the DiffMode\nReturns <code>true</code> if return data capture is enabled\nReturns true the account was modified\nReturns <code>true</code> if stack capture is enabled\nReturns <code>true</code> if storage capture is enabled\nmaximum length of output, but zero means unlimited\nLogs emitted by this call.\nref …\nSize of memory.\nGeth <code>muxTracer</code> types.\nThe optional nonce of the account.\nNoop tracer response.\nSets the only top call flag.\nWhen set to true, this will only trace the primary …\nopcode to be executed\nOutput of the call, if any.\nprogram counter\nThe account states after the transaction is executed.\nThe account states before the transaction is executed.\nPre-state Geth tracer types.\nRefund counter\nRemoves balance,nonce or code if they match the given …\nRemoves all zero values from the storage of the …\nThe sets of the DiffMode should only contain changed …\nLast call’s return data. Enabled via enableReturnData\nOutput of the transaction\nWhy this call reverted, if it reverted.\nEVM stack\nThe state overrides to apply\nThe storage of the account.\nStorage slots of current contract read from and written …\nRecorded traces of the transaction\nA string of decimal integers that overrides the …\nThe address of the contract that was called.\nThe topics of the log.\nThe custom tracer to use.\nConfig specific to given <code>tracer</code>.\nTrace results produced by the trace task\nAll the options\nThe type of the call.\nValue transferred.\nEnables block overrides\nConfigures a CallConfig\nSets the tracer config\nSets the debug field.\nSets the disable_memory field.\nSets the disable_return_data field.\nSets the disable_stack field.\nSets the disable_storage field.\nSets the enable_memory field.\nSets the enable_return_data field.\nSets the limit field.\nSets the with log flag.\nWhen set to true, this will include the logs emitted by …\nConfigures a PreStateConfig\nEnables state overrides\nSets the timeout to use for tracing\nSets the tracer to use\nSets the tracing options\nTrace failure produced by the tracer\nTrace results produced by the tracer\ntransaction hash\ntransaction hash\nThe configuration for the call tracer.\nThe response object for <code>debug_traceTransaction</code> with …\nRepresents a recorded call.\nThe address of the contract that was called.\nRecorded child calls.\nThe data of the log.\nError message, if any.\nThe address of that initiated the call.\nHow much gas was left before the call.\nHow much gas was used by the call.\nCalldata input.\nLogs emitted by this call.\nWhen set to true, this will only trace the primary …\nOutput of the call, if any.\nWhy this call reverted, if it reverted.\nThe address of the contract that was called.\nThe topics of the log.\nThe type of the call.\nValue transferred.\nWhen set to true, this will include the logs emitted by …\nThe 4byte tracer response object.\nA <code>muxTracer</code> config that contains the configuration for …\nA <code>muxTracer</code> frame response that contains the results of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn empty frame response that’s only an empty json object …\nHelper type to track the kind of change of an AccountState.\nRepresents the state of an account.\nThe account was created.\nThe default mode returns the accounts necessary to execute …\nDiff mode returns the differences between the transaction…\nRepresents the account states before and after the …\nHelper type for DiffMode to represent a specific set\nThe account was modified.\nCorresponds to the post state of the DiffMode\nCorresponds to the pre state of the DiffMode\nThe config for the prestate tracer.\nA tracer that records AccountStates. The prestate tracer …\nIncludes all the account states necessary to execute a …\nThe account was selfdestructed.\nThe optional balance of the account.\nThe optional code of the account.\nIf <code>diffMode</code> is set to true, the response frame includes …\nThe optional nonce of the account.\nThe account states after the transaction is executed.\nThe account states before the transaction is executed.\nThe storage of the account.\nOpcode gas usage for a transaction.\nGas information for a single opcode.\nOpcode gas usage for a transaction.\nThe block hash\nThe block number\nHow many times the opcode was executed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCombined gas used by all instances of the opcode\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the opcode\nThe gas used by each opcode in the transaction\nThe transaction hash\nAll executed transactions in the block in the order they …\nCustom struct for otterscan <code>getBlockDetails</code> RPC response\nCustom struct for otterscan <code>getContractCreator</code> RPC …\nInternal issuance struct for <code>BlockDetails</code> struct\nCustom struct for otterscan <code>getInternalOperations</code> RPC …\nOperation Create\nOperation Create2\nOperation Contract self destruct\nOperation Transfer\nOperation type enum for <code>InternalOperation</code> struct\nCustom <code>Block</code> struct that includes transaction count for …\nCustom struct for otterscan <code>getBlockTransactions</code> RPC …\nThe receipt of a transaction.\nCustom transaction receipt struct for otterscan …\nCustom struct for otterscan <code>traceTransaction</code> RPC response\nCustom struct for otterscan <code>searchTransactionsAfter</code> and …\nThe block information.\nThe block information with transaction count.\nThe block reward issued.\nThe address of the contract creator.\nThe cumulative gas used.\nThe depth of the trace entry.\nIndicates if this is the first page of results.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe address from which the operation originated.\nThe address from which the trace originated.\nThe full block information with transaction count.\nThe input data for the trace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe total issuance amount.\nThe issuance information for the block.\nIndicates if this is the last page of results.\nThe logs sent from contracts.\nThe bloom filter.\nThe transaction receipt.\nThe list of transaction receipts.\nThe list of transaction receipts.\nIf the transaction is executed successfully.\nThe timestamp of the transaction.\nThe address to which the operation is directed.\nThe address to which the trace is directed.\nThe total fees for the block.\nThe number of transactions in the block.\nThe transaction used to create the contract.\nThe list of transactions.\nThe type of the internal operation.\nThe type of trace entry.\nThe transaction type.\nThe uncle reward issued.\nThe value transferred in the operation.\nThe value transferred in the trace.\nThe diff of an account after a transaction\nRepresents the various types of actions recorded during …\nAn external action type.\nNew storage value added.\nAuthorized call\nBlock rewards\nRegular call\nContract call.\nCall\nOutput of a regular call transaction.\nRepresents a certain CallType of a <em>call</em> or message …\nCall code\nOutcome of a CALL.\nCall type.\nExisting storage value changed.\nA changed value\nA CREATE call\nContract creation.\nOutput of a CREATE transaction.\nRepresents a <em>create</em> action, either a <code>CREATE</code> operation or a …\nOutcome of a CREATE.\nDelegate call\nRepresents how a value changed.\nA wrapper for TransactionTrace that includes additional …\nA diff of some chunk of memory.\nNone\nExisting storage value removed.\nRewards if any (pre POS)\nA block reward.\nRecorded reward of a block.\nWhat kind of reward.\nParity style traces never renamed suicide to selfdestruct: …\nContract suicide/selfdestruct.\nRepresents a <em>selfdestruct</em> action fka <code>suicide</code>.\nNew-type for list of account diffs\nProvides information detailing all altered portions of the …\nStatic call\nA diff of some storage value.\nDefault trace\nRepresents the output of a trace.\nThe Outcome of a traced transaction with optional settings\nA <code>FullTrace</code> with an additional transaction hash\nDifferent Trace diagnostic targets.\nA parity style trace of a transaction.\nExisting value didn’t change.\nReward for uncle block\nA record of an executed VM operation.\nA record of a single VM instruction, opcode level.\nA record of a full VM trace for a CALL/CREATE.\nProvides a full trace of the VM’s state throughout the …\nRepresents what kind of trace this is\ndestroyed/suicided address.\nAddress of the created contract.\nAuthor’s address.\nHow the balance changed, if at all\nBalance of the contract just before it was destroyed.\nHash of the block, if not pending.\nBlock number the transaction is included in, None if …\nThe type of the call.\nCreates a new Delta::Changed variant\nHow the code changed, if at all\nContract code.\nThe code to be executed.\nThe gas cost for this instruction.\nThe changed data.\nThe error message if the transaction failed.\nInformation concerning the execution of the operation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOriginal value\nAddress of the sending account.\nThe address of the creator.\nThe recorded trace.\nThe gas available for executing the call.\nThe gas available for the creation init code.\nReturns the gas used by this trace.\nGas used by the call.\nGas used by the call.\nIndex of the instruction in the set.\nThe init code.\nThe input data provided to the call.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the value is added\nReturns true if this is a call action\nReturns true if the value is changed\nReturns true if this is a create action\nReturns true if the value is removed\nReturns true if this is a reward action\nReturns true if this is a selfdestruct action\nReturns true if the value is unchanged\nStorage key.\nReturns what kind of action this is\nIf altered, the memory delta.\nHow the nonce changed, if at all\nOffset into memory the change begins.\nStringified opcode.\nAll executed instructions.\nOutput of the trace\nThe output data of the call.\nThe program counter.\nThe stack item placed, if any.\ndestroyed contract heir.\nOutput of the trace, can be CALL or CREATE\nReward type.\nSets the gas used by this trace.\nSets the gas used of the root trace.\nEnabled if TraceType::StateDiff is provided\nAll touched/changed storage values\nThe altered storage value, if any.\nSubordinate trace of the CALL/CREATE if applicable.\nHow many subtraces this trace has.\nNew value\nAddress of the destination/target account.\nEnabled if TraceType::Trace is provided, otherwise an …\nTrace of the transaction and its result.\nThe identifier of this transaction trace in the set.\nHash of the traced transaction.\nHash of the transaction\nTransaction index within the block, None if pending.\nThe total gas used.\nStorage value belonging to the key.\nValue transferred to the destination account.\nThe value with which the new account is endowed.\nReward amount.\nEnabled if TraceType::VmTrace is provided\nContainer type for <code>trace_call</code> arguments\nOptional: blockId\nOptional: BlockOverrides\ncall request object\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new <code>TraceCallRequest</code> given a <code>TransactionRequest</code> …\nOptional: StateOverride\ntrace types\nSets the <code>BlockId</code> Note: this is optional\nSets the <code>BlockOverrides</code> Note: this is optional\nSets the <code>StateOverride</code> Note: this is optional\nInserts <code>TraceType::StateDiff</code>\nInserts <code>TraceType::Trace</code>\nInserts a single trace type.\nInserts multiple trace types from an iterator.\nInserts <code>TraceType::VmTrace</code>\nA storage key type that can be serialized to and from a …\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelpers for dealing with numbers. Numeric serde helpers.\nSerde serialization and deserialization for <code>bool</code> as <code>0x0</code> or …\nSerialize a B256 as a hex string <em>without</em> the “0x” …\nSerialize a byte vec as a hex string <em>without</em> the “0x” …\nStorage related helpers.\nJson U256 serde helpers.\nserde functions for handling primitive optional <code>u128</code> via …\nserde functions for handling <code>Vec&lt;Vec&lt;u128&gt;&gt;</code> via U128\nserde functions for handling <code>Vec&lt;u128&gt;</code> via U128\nserde functions for handling primitive <code>u128</code> via U128\nserde functions for handling <code>Option&lt;u64&gt;</code> via U64\nserde functions for handling <code>u64</code> via U64\nserde functions for handling <code>Option&lt;u8&gt;</code> via U8\nserde functions for handling <code>u8</code> via U8\nDeserializes an <code>Option&lt;u128&gt;</code> accepting a hex quantity …\nSerializes <code>Option&lt;u128&gt;</code> as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>u128</code> accepting a hex quantity string with …\nSerializes u128 as hex string\nDeserializes an <code>Option</code> from U64 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>u64</code> from U64 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>Option</code> from U8 accepting a hex quantity …\nSerializes u64 as hex string\nDeserializes an <code>u8</code> from U8 accepting a hex quantity string …\nSerializes u64 as hex string\nDeserializes a <code>bool</code> via a U1 quantity.\nSerializes a <code>bool</code> via a U1 quantity.\nA storage key type that can be serialized to and from a …\nDeserializes the input into an Option&lt;HashMap&lt;B256, …\nConverts a Bytes value into a B256, accepting inputs that …\nSupports parsing the TTD as an <code>Option&lt;u64&gt;</code>, or <code>Option&lt;f64&gt;</code> …\n<code>alloy_dyn_abi</code> error.\n<code>ecdsa</code> error.\nContains the error value\nGeneric error type for <code>Signer</code> implementations.\n<code>hex</code> error.\nContains the success value\nGeneric error.\nResult type alias for <code>Error</code>.\n<code>sign_hash</code> is not supported by the signer.\n<code>sign_message</code> is not supported by the signer.\n<code>sign_transaction</code> is not supported by the signer.\n<code>sign_typed_data</code> is not supported by the signer.\nAn ECDSA Signature, consisting of V, R, and S.\nSignature error.\nAsynchronous Ethereum signer.\nSynchronous Ethereum signer.\nMismatch between provided transaction chain ID and signer …\nThis operation is not supported by the signer.\nAn unsupported signer operation.\nReturns the signer’s Ethereum Address.\nReturns the string representation of the operation.\nReturns the signer’s chain ID.\nReturns the signer’s chain ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the error is <code>UnsupportedOperation</code>.\nConstructs a new <code>Other</code> error.\nSets the signer’s chain ID.\nEncodes and signs the typed data according to [EIP-712] …\nEncodes and signs the typed data according to EIP-712 for …\nSigns the given hash.\nSigns the given hash.\nSigns the hash of the provided message after prefixing it, …\nSigns the hash of the provided message after prefixing it, …\nUtility to get and set the chain ID on a transaction and …\nEncodes and signs the typed data according to EIP-712.\nEncodes and signs the typed data according to EIP-712.\nReturns the <code>UnsupportedSignerOperation</code> if the error is …\nUtility functions for working with Ethereum signatures.\nSets the signer’s chain ID and returns <code>self</code>.\nThe signer’s chain ID.\nThe chain ID provided by the transaction.\nAmazon Web Services Key Management Service (AWS KMS) …\nErrors thrown by <code>AwsSigner</code>.\nThrown when the AWS KMS API returns an error.\n<code>hex</code> error.\n<code>ecdsa</code> error.\nThrown when the AWS KMS API returns a response without a …\nThrown when the AWS KMS API returns a signing error.\nThrown when the AWS KMS API returns a response without a …\n<code>spki</code> error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch the pubkey associated with this signer’s key ID.\nFetch the pubkey associated with a key ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiate a new signer from an existing <code>Client</code> and key …\nSign a digest with this signer’s key\nSign a digest with the key associated with a key ID.\nReference to a GCP KeyRing.\nGoogle Cloud Platform Key Management Service (GCP KMS) …\nErrors thrown by <code>GcpSigner</code>.\nThrown when the GCP KMS API returns a signing error.\n<code>ecdsa</code> error.\nIdentifies a specific key version in the key ring.\nThrown on a request error.\n<code>spki</code> error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch the pubkey associated with this signer’s key.\nThe GCP project ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe GCP location e.g. <code>global</code>.\nThe GCP key ring name.\nCreate a new GCP KeyRing reference.\nConstruct a new specifier for a key with a given keyring, …\nInstantiate a new signer from an existing <code>Client</code>, keyring …\nSign a digest with this signer’s key\nsecp256k1 curve point expressed in affine coordinates.\nCompressed SEC1-encoded secp256k1 (K-256) curve point.\nSEC1-encoded secp256k1 (K-256) curve point.\nsecp256k1 (K-256) field element serialized as bytes.\nBase point of secp256k1.\nBase point of secp256k1.\nAdditive identity of the group: the point at infinity.\nAdditive identity of the group: the point at infinity.\nNon-zero secp256k1 (K-256) scalar field element.\nMultiplicative identity.\nA point on the secp256k1 curve in projective coordinates.\nsecp256k1 (K-256) public key.\nScalars are elements in the finite field modulo n.\nsecp256k1 (K-256) elliptic curve.\nsecp256k1 (K-256) secret key.\n256-bit unsigned big integer.\nBytes used by a wide reduction: twice the width of …\nZero scalar.\nReturns self + rhs mod n.\nDoubles this point.\nElliptic Curve Digital Signature Algorithm (ECDSA).\nCalculates SECP256k1 endomorphism: <code>self * lambda</code>.\nCheck whether <code>self</code> is equal to an affine point.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to parse the given <code>EncodedPoint</code> as an …\nAttempts to parse the given byte array as an SEC1-encoded …\nReturns a (nearly) uniformly-random scalar, generated in …\nReturns a uniformly-random scalar, generated using …\nReturns the base point of secp256k1.\nReturns the base point of SECP256k1.\nReturns the identity of the group: the point at infinity.\nReturns the additive identity of SECP256k1, also known as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the scalar.\nFast variable-time inversion using Stein’s algorithm.\nIs this point the identity point?\nChecks if the scalar is zero.\nModulo multiplies two scalars.\nCalculates <code>k * G</code>, where <code>G</code> is the generator.\nNegates the scalar.\nTaproot Schnorr signatures as defined in BIP340.\nRight shifts the scalar.\nTonelli-Shank’s algorithm for q mod 16 = 1 …\nModulo squares the scalar.\nReturns self - rhs mod n.\nReturns the affine representation of this point.\nReturns the SEC1 encoding of this scalar.\nConvert to curve representation.\nECDSA/secp256k1 signature (ASN.1 DER encoded)\nSignature errors.\nMaximum supported value for the recovery ID (inclusive).\nRecovery IDs, a.k.a. “recid”.\nECDSA/secp256k1 signature (fixed-size)\nECDSA/secp256k1 signing key\nECDSA/secp256k1 verification key (i.e. public key)\nReturns the argument unchanged.\nConvert a <code>u8</code> into a <code>RecoveryId</code>.\nLow-level ECDSA primitives.\nCalls <code>U::from(self)</code>.\nDid the affine x-coordinate of 𝑘×𝑮 overflow the …\nIs the affine y-coordinate of 𝑘×𝑮 odd?\nCreate a new <code>RecoveryId</code> from the following 1-bit arguments:\nConvert this <code>RecoveryId</code> into a <code>u8</code>.\nGiven a public key, message digest, and signature, use …\nGiven a public key, message, and signature, use trial …\nGiven a public key, message digest, and signature, use …\nPreferred digest to use when computing ECDSA signatures …\nBind a preferred <code>Digest</code> algorithm to an elliptic curve …\nTry to sign the given prehashed message using ECDSA.\nVerify the given prehashed message using ECDSA.\nPartial implementation of the <code>bits2int</code> function as defined …\nSign a prehashed message digest using the provided secret …\nTry to sign the prehashed message.\nTry to sign the given message digest deterministically …\nVerify message digest against the provided signature.\nVerify the prehashed message against the provided ECDSA …\nVerify the prehashed message against the provided ECDSA …\nPreferred <code>Digest</code> algorithm to use when computing this …\nSign the given prehashed message <code>Digest</code> using <code>Self</code>.\nDerive the <code>DigestSigner</code> trait for a type which impls …\nVerify the provided signature for the given prehashed …\nDerive the <code>DigestVerifier</code> trait for a type which impls …\nContains the error value\nSignature errors.\nSigning keypair with an associated verifying key.\nSigning keypair with an associated verifying key.\nContains the success value\nMarker trait for <code>Signature</code> types computable as …\nCombination of <code>DigestSigner</code> and <code>RandomizedSigner</code> with …\nSign the given message using the provided external …\nByte representation of a signature.\nResult type.\nSupport for decoding/encoding signatures as bytes.\nSign the provided message bytestring using <code>Self</code> (e.g. a …\nDerive the <code>Signer</code> trait for a type which impls <code>DigestSigner</code>…\nSign the provided message bytestring using <code>&amp;mut Self</code> (e.g. …\nVerify the provided message bytestring using <code>Self</code> (e.g. a …\nDerive the <code>Verifier</code> trait for a type which impls …\nVerifying key type for this keypair.\nVerifying key type for this keypair.\nGet the length of this signature when encoded.\nHazardous Materials: low-level APIs which can be insecure …\nSign the given message and return a digital signature\nSign the given message, update the state, and return a …\nSign the given prehashed message <code>Digest</code>, returning a …\nSign the given prehashed message <code>Digest</code>, returning a …\nSign the given message and return a digital signature\nEncode signature as its byte representation.\nEncode signature as a byte vector.\nAttempt to sign the given message, returning a digital …\nAttempt to sign the given message, updating the state, and …\nAttempt to sign the given prehashed message <code>Digest</code>, …\nAttempt to sign the given prehashed message <code>Digest</code>, …\nAttempt to sign the given message, returning a digital …\nUse <code>Self</code> to verify that the provided signature for a given …\nVerify the signature against the given <code>Digest</code> output.\nGet the verifying key which can verify signatures produced …\nFixed size output value which provides a safe <code>Eq</code> …\nConvenience wrapper trait covering functionality of …\nModification of the <code>Digest</code> trait suitable for trait …\nTrait for hash functions with extendable-output (XOF).\nTrait for hash functions with extendable-output (XOF) able …\nTrait for hash functions with fixed-size output.\nTrait for hash functions with fixed-size output able to …\nMarker trait for cryptographic hash functions.\nTypes which can be initialized from another type (usually …\nBuffer length is not equal to hash output size.\nThe error type returned when key and/or IV used in the …\nThe error type used in variable hash traits.\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nMaximum size of output hash.\nConvenience wrapper trait covering functionality of …\nError type for when the <code>Output</code> of a <code>Mac</code> is not equal to …\nMarker trait for Message Authentication algorithms.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nReader\nResettable types.\nTypes which consume data with byte granularity.\nTrait for hash functions with variable-size output.\nTrait for hash functions with variable-size output able to …\nTrait for reader types which are used to extract …\nClone hasher state into a boxed trait object\nDigest input data in a chained manner.\nProcess input data in a chained manner.\nProcess input data in a chained manner.\nLow-level traits operating on blocks and wrappers around …\nCompute hash of <code>data</code>.\nCompute hash of <code>data</code> and write it to <code>output</code>.\nCompute hash of <code>data</code> and write it into <code>output</code>.\nRetrieve result and consume hasher instance.\nObtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …\nRetrieve result and consume boxed hasher instance\nRetrieve result into a boxed slice of the specified size …\nRetrieve result into a boxed slice and consume hasher.\nRetrieve result into a boxed slice of the specified size …\nRetrieve result into a boxed slice and reset the hasher …\nRetrieve result and consume the hasher instance.\nRetrieve result and reset the hasher state.\nWrite result into provided array and consume the hasher …\nWrite result into provided array and consume the hasher …\nConsume value and write result into provided array.\nWrite result into provided array and reset the hasher …\nWrite result into provided array and reset the hasher …\nWrite result into provided array and reset the hasher …\nRetrieve result and reset hasher instance.\nObtain the result of a <code>Mac</code> computation as a <code>CtOutput</code> and …\nRetrieve result and reset hasher instance\nWrite result into the output buffer.\nWrite result into the output buffer and reset the hasher …\nRetrieve XOF reader and consume hasher instance.\nFinalize XOF and write result into <code>out</code>.\nRetrieve XOF reader and reset hasher instance state.\nFinalize XOF, write result into <code>out</code>, and reset the hasher …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplement dummy type with hidden docs which is used to “…\nInitialize value from the <code>inner</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner <code>Output</code> array this type wraps.\nCreate new value from fixed size key.\nCreate new hasher instance.\nCreate new value from fixed size key.\nCreate new hasher instance with the given output size.\nCreate a new <code>CtOutput</code> value.\nCreate new value from variable size key.\nCreate new value from variable size key.\nCreate new hasher instance which has processed the …\nGet output size of the hasher\nGet output size of the hasher\nGet output size of the hasher instance provided to the <code>new</code> …\nReturn output size in bytes.\nRead output into the <code>buffer</code>. Can be called an unlimited …\nRead output into a boxed slice of the specified size.\nReset state to its initial value.\nReset hasher instance to its initial state.\nReset hasher instance to its initial state.\nReset MAC instance to its initial state.\nProcess data, updating the internal state.\nDigest input data.\nUpdate state using the provided data.\nUpdate state using the provided data.\nCheck if tag/code value is correct for the processed input.\nCheck if tag/code value is correct for the processed input …\nCheck truncated tag correctness using all bytes of …\nCheck truncated tag correctness using all bytes of …\nCheck truncated tag correctness using left side bytes …\nCheck truncated tag correctness using right side bytes …\nBlock on which <code>BlockBuffer</code> operates.\nBuffer for block processing of data.\nTrait for buffer kinds.\nEager block buffer kind, which guarantees that buffer …\nEager block buffer.\nBlock buffer error.\nLazy block buffer kind, which guarantees that buffer …\nLazy block buffer.\nDigest data in <code>input</code> in blocks of size <code>BlockSize</code> using the …\nCompress remaining data after padding it with <code>delim</code>, zeros …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn slice of data stored inside the buffer.\nReturn current cursor position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPad message with 0x80, zeros and 128-bit message length …\nPad message with 0x80, zeros and 64-bit message length …\nPad message with 0x80, zeros and 64-bit message length …\nCreate new buffer from slice.\nPad remaining data with zeros and return resulting block.\nReturn number of remaining bytes in the internal buffer.\nReset buffer by setting cursor position to zero.\nSet buffer content and cursor position.\nSet <code>data</code> to generated blocks.\nReturn size of the internal buffer in bytes.\nCreate new buffer from slice.\nTrait making <code>GenericArray</code> work, marking types to be used …\nAssociated type representing the array type for the number\nStruct representing a generic array - <code>GenericArray&lt;T, N&gt;</code> …\nAn iterator that moves out of a <code>GenericArray</code>\nImplementation for <code>arr!</code> macro.\nMacro allowing for easy generation of Generic Arrays. …\nReturns the remaining items of this iterator as a mutable …\nExtracts a mutable slice containing the entire array.\nReturns the remaining items of this iterator as a slice\nExtracts a slice containing the entire array.\nConstruct a <code>GenericArray</code> from a slice by cloning its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts mutable slice to a mutable generic array reference\nConverts slice to a generic array reference with inferred …\nCreates a new <code>GenericArray</code> instance from an iterator with …\nConverts mutable slice to a mutable generic array reference\nConverts slice to a generic array reference with inferred …\nFunctional programming with generic sequences\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>GenericArray</code> iterator implementation.\nUseful traits for manipulating sequences of data stored in …\nHelper trait for <code>arr!</code> macro\nHelper type for <code>arr!</code> macro\nResulting length\nDefines functional programming methods for generic …\nMapped sequence type\nDefines the relationship between one generic sequence and …\nAccessor type for a mapped generic sequence\nFolds (or reduces) a sequence of data into a single value.\nMaps a <code>GenericSequence</code> to another <code>GenericSequence</code>.\nCombines two <code>GenericSequence</code> instances and iterates …\nAn iterator that moves out of a <code>GenericArray</code>\nDefines <code>GenericSequence</code>s which can be joined together, …\nFirst part of the resulting split array\nDefines some sequence with an associated length and …\n<code>GenericArray</code> associated length\nDefines any <code>GenericSequence</code> which can be lengthened or …\n<code>GenericSequence</code> that has one more element than <code>Self</code>\nResulting sequence formed by the concatenation.\nSequence to be concatenated with <code>self</code>\nSecond part of the resulting split array\nConcrete sequence type used in conjuction with reference …\nAccessor for <code>GenericSequence</code> item type, which is really …\nDefines a <code>GenericSequence</code> which can be shortened by …\n<code>GenericSequence</code> that has one less element than <code>Self</code>\nDefines a <code>GenericSequence</code> that can be split into two parts …\nReturns a new array with the given element appended to the …\nConcatenate, or join, two sequences.\nInitializes a new sequence instance using the given …\nReturns a new array without the last element, and the last …\nReturns a new array without the first element, and the …\nReturns a new array with the given element prepended to …\nSplits an array at the given index, returning the separate …\nThe terminating type for type arrays.\nA <strong>type operator</strong> that returns the absolute value.\nAlias for the associated type of <code>Abs</code>: …\nAlias to make it easy to add 1: …\nAlias for the associated type of <code>BitAnd</code>: …\nThe type-level bit 0.\nThe type-level bit 1.\nThe <strong>marker trait</strong> for compile time bits.\nA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …\nAlias for the associated type of <code>Cmp</code>: …\nAlias to make it easy to cube. …\nAlias for the associated type of <code>Sub</code>: …\nAlias to make it easy to multiply by 2. …\nAlias for the associated type of <code>IsEqual</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nAlias for the associated type of <code>Pow</code>: …\nA <strong>type operator</strong> that computes the greatest common divisor …\nAlias for the associated type of <code>Gcd</code>: …\nAlias for the associated type of <code>IsGreater</code>: …\nAlias for the associated type of <code>IsGreaterOrEqual</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nThe concrete value for the type. Can be used in <code>const</code> …\nThe <strong>marker trait</strong> for compile time signed integers.\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …\nAlias for the associated type of <code>IsLess</code>: …\nAlias for the associated type of <code>IsLessOrEqual</code>: …\nA <strong>type operator</strong> that gives the length of an <code>Array</code> or the …\nAlias for the associated type of <code>Len</code>: …\nA potential output from <code>Cmp</code>, this is the type equivalent …\nAlias for the associated type of <code>Logarithm2</code>: …\nA <strong>type operator</strong> for taking the integer binary logarithm of …\nA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.\nAlias for the associated type of <code>Max</code>: …\nA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.\nAlias for the associated type of <code>Min</code>: …\nAlias for the associated type of <code>Rem</code>: …\nType-level signed integers with negative sign.\nAlias for the associated type of <code>Neg</code>: …\nA <strong>marker trait</strong> to designate that a type is not zero. All …\nAlias for the associated type of <code>IsNotEqual</code>: …\nAlias for the associated type of <code>BitOr</code>: …\nA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.\nShould always be <code>Self</code>\nThe absolute value.\nThe result of the exponentiation.\nThe result of the comparison. It should only ever be one …\nThe length as a type-level unsigned integer.\nThe type of the result of the division\nThe type of the minimum of <code>Self</code> and <code>Rhs</code>\nThe type of the maximum of <code>Self</code> and <code>Rhs</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe result of the integer square root.\nThe result of the integer binary logarithm.\nThe greatest common divisor.\nType-level signed integers with positive sign.\nDivision as a partial function. This <strong>type operator</strong> …\nAlias for the associated type of <code>PartialDiv</code>: …\nA <strong>type operator</strong> that provides exponentiation by repeated …\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nAlias for the associated type of <code>Mul</code>: …\nAlias for the associated type of <code>Div</code>: …\nA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …\nAlias for the associated type of <code>Shl</code>: …\nAlias for the associated type of <code>Shr</code>: …\nAlias for the associated type of <code>SquareRoot</code>: …\nAlias to make it easy to square. …\nA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.\nAlias to make it easy to subtract 1: …\nAlias for the associated type of <code>Add</code>: …\n<code>TArr</code> is a type that acts as an array of types. It is …\nA <strong>type operator</strong> for taking a concrete integer value from a …\nThe <strong>marker trait</strong> for type-level arrays of type-level …\n<code>UInt</code> is defined recursively, where <code>B</code> is the least …\nThe terminating type for <code>UInt</code>; it always comes after the …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nAlias for the associated type of <code>BitXor</code>: …\nThe type-level signed integer 0.\nA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …\nA type-level array of type-level numbers.\nAsserts that a type is <code>True</code>, aka <code>B1</code>.\nAsserts that two types are the same.\nType-level bits.\nA convenience macro for comparing type numbers. Use <code>op!</code> …\nType aliases for many constants.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nType-level signed integers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nThis function isn’t used in this crate, but may be …\nAll of the <strong>marker traits</strong> used in typenum.\nMethod returning the maximum\nMethod returning the minimum\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this strictly …\nInstantiates a singleton representing this strictly …\nInstantiates a singleton representing the integer 0.\nInstantiates a singleton representing this unsigned …\nInstantiates a singleton representing this unsigned …\nConvenient type operations.\nAliases for the type operators used in this crate. Their …\nMethod for performing the division\nThis function isn’t used in this crate, but may be …\nCreate a new type-level array. Only usable on Rust 1.13.0 …\nMethod returning the concrete value for the type.\nUseful <strong>type operators</strong> that are not defined in <code>core::ops</code>.\nType-level unsigned integers.\nThe terminating type for type arrays.\n<code>TArr</code> is a type that acts as an array of types. It is …\nThe type-level bit 0.\nThe type-level bit 1.\nThe <strong>marker trait</strong> for compile time bits.\nInstantiates a singleton representing this bit.\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nThe <strong>marker trait</strong> for compile time signed integers.\nType-level signed integers with negative sign.\nType-level signed integers with positive sign.\nThe type-level signed integer 0.\nThe <strong>marker trait</strong> for compile time bits.\nThe <strong>marker trait</strong> for compile time signed integers.\nA <strong>marker trait</strong> to designate that a type is not zero. All …\nA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nThe <strong>marker trait</strong> for type-level arrays of type-level …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …\nInstantiates a singleton representing this bit.\nAlias for the associated type of <code>Abs</code>: …\nAlias to make it easy to add 1: …\nAlias for the associated type of <code>BitAnd</code>: …\nAlias for the associated type of <code>Cmp</code>: …\nAlias to make it easy to cube. …\nAlias for the associated type of <code>Sub</code>: …\nAlias to make it easy to multiply by 2. …\nAlias for the associated type of <code>IsEqual</code>: …\nAlias for the associated type of <code>Pow</code>: …\nAlias for the associated type of <code>Gcd</code>: …\nAlias for the associated type of <code>IsGreater</code>: …\nAlias for the associated type of <code>IsGreaterOrEqual</code>: …\nAlias for the associated type of <code>IsLess</code>: …\nAlias for the associated type of <code>IsLessOrEqual</code>: …\nAlias for the associated type of <code>Len</code>: …\nAlias for the associated type of <code>Logarithm2</code>: …\nAlias for the associated type of <code>Max</code>: …\nAlias for the associated type of <code>Min</code>: …\nAlias for the associated type of <code>Rem</code>: …\nAlias for the associated type of <code>Neg</code>: …\nAlias for the associated type of <code>IsNotEqual</code>: …\nAlias for the associated type of <code>BitOr</code>: …\nAlias for the associated type of <code>PartialDiv</code>: …\nAlias for the associated type of <code>Mul</code>: …\nAlias for the associated type of <code>Div</code>: …\nAlias for the associated type of <code>Shl</code>: …\nAlias for the associated type of <code>Shr</code>: …\nAlias for the associated type of <code>SquareRoot</code>: …\nAlias to make it easy to square. …\nAlias to make it easy to subtract 1: …\nAlias for the associated type of <code>Add</code>: …\nAlias for the associated type of <code>BitXor</code>: …\nA <strong>type operator</strong> that returns the absolute value.\nA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …\nA <strong>type operator</strong> that computes the greatest common divisor …\nThe concrete value for the type. Can be used in <code>const</code> …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …\nA <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …\nA <strong>type operator</strong> that gives the length of an <code>Array</code> or the …\nA <strong>type operator</strong> for taking the integer binary logarithm of …\nA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.\nA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.\nShould always be <code>Self</code>\nThe absolute value.\nThe result of the exponentiation.\nThe result of the comparison. It should only ever be one …\nThe length as a type-level unsigned integer.\nThe type of the result of the division\nThe type of the minimum of <code>Self</code> and <code>Rhs</code>\nThe type of the maximum of <code>Self</code> and <code>Rhs</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe type representing either <code>True</code> or <code>False</code>\nThe result of the integer square root.\nThe result of the integer binary logarithm.\nThe greatest common divisor.\nDivision as a partial function. This <strong>type operator</strong> …\nA <strong>type operator</strong> that provides exponentiation by repeated …\nA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …\nA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.\nA <strong>type operator</strong> for taking a concrete integer value from a …\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nMethod returning <code>True</code> or <code>False</code>.\nThis function isn’t used in this crate, but may be …\nMethod returning the maximum\nMethod returning the minimum\nMethod for performing the division\nThis function isn’t used in this crate, but may be …\nMethod returning the concrete value for the type.\nThe <strong>marker trait</strong> for type-level numbers which are a power …\nA <strong>type operator</strong> that, when implemented for unsigned …\nAlias for the result of calling <code>SetBit</code>: …\n<code>UInt</code> is defined recursively, where <code>B</code> is the least …\nThe terminating type for <code>UInt</code>; it always comes after the …\nThe <strong>marker trait</strong> for compile time unsigned integers.\nType alias used to represent an “arc” (i.e. integer …\nArc exceeds allowed range (i.e. for first or second OID)\nArc is too big (exceeds 32-bit limits of this library).\n<code>Iterator</code> over <code>Arc</code> values (a.k.a. nodes) in an …\nA trait which associates an OID with a type.\nBase 128 encoding error (used in BER/DER serialization of …\nExpected a digit, but was provided something else.\nA trait which associates a dynamic, <code>&amp;self</code>-dependent OID …\nInput data is empty.\nContains the error value\nOID errors.\nOID length is invalid (too short or too long).\nMinimum 3 arcs required.\nThe OID associated with this type.\nObject identifier (OID).\nContains the success value\nResult type\nTrailing <code>.</code> character at end of input.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the OID associated with this value.\nWhat was found instead of a digit\nArc value that is erroneous.\nTrait which stores algorithm name constant, used in <code>Debug</code> …\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nBuffer type used by type which implements <code>BufferKindUser</code>.\nBlock buffer kind over which type operates.\nTypes which use <code>BlockBuffer</code> functionality.\nType wrapped by <code>CoreWrapper</code>.\nA proxy trait to a core type implemented by <code>CoreWrapper</code>\nWrapper around <code>BufferKindUser</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nCore trait for hash functions with extendable (XOF) output …\nCore trait for hash functions with fixed output size.\nTruncate left side, i.e. <code>&amp;out[..n]</code>.\nSize of the output in bytes.\nTypes which return data with the given size.\nXOF reader core state.\nResettable types.\nTruncate right side, i.e. <code>&amp;out[m..]</code>.\nWrapper around <code>VariableOutputCore</code> which selects output size\nSide which should be used in a truncated result.\nType which used for defining truncation side in the …\nTypes which consume data in blocks.\nCore trait for hash functions with variable output size.\nCore reader trait for extendable-output function (XOF) …\nWrapper around <code>XofReaderCore</code> implementations.\nReturn block size in bytes.\nDecompose wrapper into inner parts.\nFinalize state using remaining data stored in the provided …\nFinalize hasher and write full hashing result into the <code>out</code> …\nRetrieve XOF reader using remaining data stored in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new wrapper from <code>core</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize hasher state for given output size.\nReturn output size in bytes.\nRead next XOF block.\nReset state to its initial value.\nUpdate state using the provided data blocks.\nWrite algorithm name into <code>f</code>.\nTrait which stores algorithm name constant, used in <code>Debug</code> …\nBlock on which <code>BlockSizeUser</code> implementors operate.\nSize of the block in bytes.\nTypes which process data in blocks.\nInner type.\nTypes which can be initialized from another type (usually …\nTypes which can be initialized from another type and …\nTypes which use another type for initialization.\nThe error type returned when key and/or IV used in the …\nInitialization vector (nonce) used by <code>IvSizeUser</code> …\nInitialization vector size in bytes.\nTypes which use initialization vector (nonce) for …\nKey used by <code>KeySizeUser</code> implementors.\nTypes which can be initialized from key.\nTypes which can be initialized from key and initialization …\nKey size in bytes.\nTypes which use key for initialization.\nOutput array of <code>OutputSizeUser</code> implementors.\nSize of the output in bytes.\nTypes which return data with the given size.\nParallel blocks on which <code>ParBlocksSizeUser</code> implementors …\nNumber of blocks which can be processed in parallel.\nTypes which can process blocks in parallel.\nResettable types.\nReturn block size in bytes.\nInitialize value from the <code>inner</code>.\nInitialize value using <code>inner</code> and <code>iv</code> array.\nInitialize value using <code>inner</code> and <code>iv</code> slice.\nReturn IV size in bytes.\nReturn key size in bytes.\nCreate new value from fixed size key.\nCreate new value from fixed length key and nonce.\nCreate new value from variable size key.\nCreate new value from variable length key and nonce.\nReturn output size in bytes.\nReset state to its initial value.\nWrite algorithm name into <code>f</code>.\nSign the provided message prehash, returning a digital …\nVerify the provided message prehash using <code>Self</code> (e.g. a …\nSign the provided message prehash using the provided …\nAttempt to sign the given message digest, returning a …\nAttempt to sign the given message digest, returning a …\nUse <code>Self</code> to verify that the provided signature for a given …\nCodes at or above this point can be used by users to …\nA marker trait used to indicate that an <code>RngCore</code> or …\nAn extension trait that is automatically implemented for …\nError type of random number generators\nCodes below this point represent OS Errors (i.e. positive …\nA random number generator that retrieves randomness from …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nUpcast to an <code>RngCore</code> trait object.\nThe <code>BlockRngCore</code> trait and implementation helpers\nRetrieve the error code, if any.\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nHelper functions for implementing <code>RngCore</code> functions.\nReference the inner error (<code>std</code> only)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLittle-Endian utilities\nConstruct from any type supporting <code>std::error::Error</code>\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nExtract the raw OS error code (if this error came from the …\nCreate a new PRNG using a <code>u64</code> seed.\nUnwrap the inner error (<code>std</code> only)\nFill <code>dest</code> entirely with random data.\nA wrapper type implementing <code>RngCore</code> for some type …\nA wrapper type implementing <code>RngCore</code> for some type …\nA trait for RNGs which do not generate random numbers …\nResults element type, e.g. <code>u32</code>.\nResults type. This is the ‘block’ an RNG implementing …\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> …\nThe <em>core</em> part of the RNG, implementing the <code>generate</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new block of results.\nGenerate a new set of results immediately, setting the …\nGenerate a new set of results immediately, setting the …\nGet the index into the result buffer.\nGet the index into the result buffer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BlockRng</code> from an existing RNG implementing …\nCreate a new <code>BlockRng</code> from an existing RNG implementing …\nReset the number of available results. This will force a …\nReset the number of available results. This will force a …\nImplement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …\nImplement <code>fill_bytes</code> by reading chunks from the output …\nImplement <code>fill_bytes</code> by reading chunks from the output …\nImplement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.\nImplement <code>next_u64</code> via <code>next_u32</code>, little-endian order.\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nAlgorithm <code>ObjectIdentifier</code> for elliptic curve public key …\nAffine point type for a given curve with a <code>CurveArithmetic</code> …\nElliptic curve point in affine coordinates.\nNormalize point(s) in projective representation by …\nHow many bits of information can be reliably stored in the …\nElliptic curve.\nElliptic curve with an arithmetic implementation.\nPrime order elliptic curve group.\nGenerator of the <code>t-order</code> multiplicative subgroup.\nContains the error value\nElliptic curve errors.\nThis trait represents an element of a field.\nByte representation of a base/scalar field element of a …\nTrait for decoding/encoding <code>Curve::Uint</code> from/to <code>FieldBytes</code> …\nSize of serialized field elements of this elliptic curve.\nSize of a serialized field element in bytes.\nThis trait represents an element of a cryptographic group.\nModulus of the field written as a string for debugging …\nScalar modulus.\nA fixed multiplicative generator of <code>modulus - 1</code> order. …\nHow many bits are needed to represent an element of this …\nNon-zero scalar type.\nThe one element of the field, the multiplicative identity.\nMultiplicative identity.\nOrder of this elliptic curve, i.e. number of elements in …\nContains the success value\nThe output of the batch normalization; a container of …\nMarker trait for elliptic curves with prime order.\nPrime order elliptic curve with projective arithmetic …\nThis represents an element of a non-binary prime field.\nProjective point type for a given curve with a …\nElliptic curve point in projective coordinates.\nElliptic curve public keys.\nThe <code>2^s</code> root of unity.\nInverse of <code>Self::ROOT_OF_UNITY</code>.\nThe prime field can be converted back and forth into this …\nResult type with the <code>elliptic-curve</code> crate’s <code>Error</code> type.\nAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …\nScalar field element for a particular elliptic curve.\nScalars modulo the order of this group’s scalar field.\nScalar field modulo this curve’s order.\nGeneric scalar type with primitive functionality.\nElliptic curve secret keys.\nInverse of $2$ in the field.\nInteger type used to represent field elements of this …\nThe zero element of the field, the additive identity.\nZero scalar.\nBorrow the inner <code>AffinePoint</code> from this <code>PublicKey</code>.\nBorrow the inner limbs as a slice.\nBorrow the inner secret <code>ScalarPrimitive</code> value.\nBorrow the inner <code>C::Uint</code>.\nPerform a batched conversion to affine representation on a …\nCubes this element.\nDecode unsigned integer from serialized field element.\nDoubles this element.\nDoubles this element.\nEncode unsigned integer into serialized field element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an <code>AffinePoint</code> into a <code>PublicKey</code>\nDecode <code>ScalarPrimitive</code> from a serialized field element\nDeserialize secret key from an encoded secret scalar.\nInitialize <code>PublicKey</code> from an <code>EncodedPoint</code>\nAttempts to convert a byte representation of a field …\nDecode a <code>NonZeroScalar</code> from a big endian-serialized field …\nAttempts to convert a byte representation of a field …\nDecode <code>PublicKey</code> (compressed or uncompressed) from the …\nDeserialize secret key encoded in the SEC1 ASN.1 DER …\nParse <code>SecretKey</code> from PEM-encoded SEC1 <code>ECPrivateKey</code> format.\nCompute a <code>PublicKey</code> from a secret <code>NonZeroScalar</code> value …\nDecode <code>ScalarPrimitive</code> from a big endian byte slice.\nDeserialize secret key from an encoded secret scalar …\nInterpret a string of numbers as a (congruent) prime field …\nObtains a field element congruent to the integer <code>v</code>.\nCreate a <code>NonZeroScalar</code> from a <code>C::Uint</code>.\nReturns a fixed generator of the prime-order subgroup.\nReturns the additive identity, also known as the “…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the multiplicative inverse of this element, …\nReturns true iff this element is even.\nIs this <code>ScalarPrimitive</code> value even?\nDetermines if this point is the identity.\nReturns true iff this element is odd.\nIs this <code>ScalarPrimitive</code> value odd?\nReturns true iff this element is zero.\nIs this <code>ScalarPrimitive</code> value equal to zero?\nReturns true iff this element is zero.\nCreate a <code>NonZeroScalar</code> from a scalar.\nCreate a new scalar from <code>Curve::Uint</code>.\nCreate a new secret key from a scalar value.\nTraits for arithmetic operations on elliptic curve field …\nTraits for elliptic curve points.\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nGet the <code>PublicKey</code> which corresponds to this secret key\nReturns an element chosen uniformly at random using a …\nReturns an element chosen uniformly at random from the …\nGenerate a random <code>NonZeroScalar</code>.\nGenerate a random <code>ScalarPrimitive</code>.\nGenerate a random <code>SecretKey</code>.\nScalar types.\nSupport for SEC1 elliptic curve encoding formats.\nReturns the square root of the field element, if it is …\nEquivalent to <code>Self::sqrt_ratio(self, one())</code>.\nComputes:\nSquares this element.\nEncode <code>ScalarPrimitive</code> as a serialized field element.\nSerialize raw secret scalar as a big endian integer.\nSerialize this <code>PublicKey</code> as a SEC1 <code>EncodedPoint</code>, …\nConvert this <code>PublicKey</code> to a <code>NonIdentity</code> of the inner …\nGet the secret <code>NonZeroScalar</code> value for this key.\nConvert this <code>PublicKey</code> to a <code>ProjectivePoint</code> for the given …\nConverts an element of the prime field into the standard …\nConvert this <code>PublicKey</code> into the …\nSerialize secret key in the SEC1 ASN.1 DER <code>ECPrivateKey</code> …\nSerialize private key as self-zeroizing PEM-encoded SEC1 …\nConvert to a <code>C::Uint</code>.\nComplete projective formulas for prime order elliptic …\nCompute <code>self + rhs mod p</code>.\nSupport for decoding a <code>GenericArray</code> as a big integer.\nSupport for encoding a big integer as a <code>GenericArray</code>.\nTotal size of the represented integer in bits.\nSize of this integer in bits.\nSize of the inner integer in bits.\nTotal size of the represented integer in bits.\nTotal size of the represented integer in bytes.\nSize of this integer in bytes.\nSize of the inner integer in bytes.\nTotal size of the represented integer in bytes.\nIntegers whose representation takes a bounded amount of …\nAlias for a byte array whose size is defined by …\nSize of a byte array which encodes a big integer.\nProvides intentionally-checked arithmetic on <code>T</code>.\nChecked addition.\nChecked multiplication.\nChecked subtraction.\nConcatenate two numbers into a “wide” double-width …\nConcatenate two numbers into a “wide” combined-width …\nA boolean value returned by constant-time <code>const fn</code>s.\nEncoding support.\nThe falsy value.\nInteger type.\nConstant-time inversion.\nThe number of limbs used on this platform.\nThe number of limbs used on this platform.\nBig integers are represented as an array of smaller CPU …\nMaximum value this integer can express.\nMaximum value this <code>Limb</code> can express.\nMaximum value this integer can express.\nMaximum value this <code>Uint</code> can express.\nConcatenated output: combination of <code>Lo</code> and <code>Self</code>.\nCompute <code>self * rhs mod p</code>.\nPerforms modular multi-exponentiation using Montgomery’s …\nPerforms modular multi-exponentiation using Montgomery’s …\nCompute <code>-self mod p</code>.\nWrapper type for non-zero integers.\nThe value <code>1</code>.\nThe value <code>1</code>.\nThe value <code>1</code>.\nThe value <code>1</code>.\nBig integer which decodes a <code>GenericArray</code>.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nConcatenated output: twice the width of <code>Self</code>.\nSplit output: high/low components of the value.\nOutput of the inversion.\nConstant-time exponentiation.\nConstant-time exponentiation with exponent of a bounded …\nRandom number generation support.\nModular random number generation support.\nA pre-calculated reciprocal for division by a single limb.\nByte array representation.\nSplit a number in half, returning the most significant …\nSplit a number into parts, returning the most significant …\nSupport for optimized squaring\nCompute <code>self - rhs mod p</code>.\nThe truthy value.\n1024-bit unsigned big integer.\n128-bit unsigned big integer.\n1280-bit unsigned big integer.\n1536-bit unsigned big integer.\n16384-bit unsigned big integer.\n1792-bit unsigned big integer.\n192-bit unsigned big integer.\n2048-bit unsigned big integer.\n256-bit unsigned big integer.\n3072-bit unsigned big integer.\n320-bit unsigned big integer.\n32768-bit unsigned big integer.\n3584-bit unsigned big integer.\n384-bit unsigned big integer.\n4096-bit unsigned big integer.\n4224-bit unsigned big integer.\n4352-bit unsigned big integer.\n448-bit unsigned big integer.\n512-bit unsigned big integer.\n576-bit unsigned big integer.\n6144-bit unsigned big integer.\n64-bit unsigned big integer.\n640-bit unsigned big integer.\n704-bit unsigned big integer.\n768-bit unsigned big integer.\n8192-bit unsigned big integer.\n832-bit unsigned big integer.\n896-bit unsigned big integer.\n960-bit unsigned big integer.\nStack-allocated big unsigned integer.\nWide integer type: double the width of <code>Word</code>.\nUnsigned integer type that the <code>Limb</code> newtype wraps.\nProvides intentionally-wrapped arithmetic on <code>T</code>.\nThe value <code>0</code>.\nThe value <code>0</code>.\nThe value <code>0</code>.\nZero values.\nComputes <code>self + rhs + carry</code>, returning the result along …\nComputes <code>a + b + carry</code>, returning the result along with …\nCompute <code>self + rhs mod p</code>.\nComputes <code>self + rhs mod p</code>.\nComputes <code>self + rhs mod p</code> for the special modulus …\nBorrow the limbs of this <code>Uint</code>.\nBorrow the limbs of this <code>Uint</code> mutably.\nBorrow the inner limbs as an array of <code>Word</code>s.\nBorrow the inner limbs as a mutable array of <code>Word</code>s.\nGet the value of the bit at position <code>index</code>, as a truthy or …\nReturns <code>true</code> if the bit at position <code>index</code> is set, <code>false</code> …\nCalculates <code>a &amp; b</code>.\nComputes bitwise <code>a &amp; b</code>.\nCalculates <code>a | b</code>.\nComputes bitwise <code>a &amp; b</code>.\nCalculate the number of bits needed to represent this …\nCalculate the number of bits needed to represent this …\nCalculate the number of bits needed to represent this …\nCalculates <code>a ^ b</code>.\nComputes bitwise <code>a ^ b</code>.\nPerform checked subtraction, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>AND</code>, returning a <code>CtOption</code> which …\nPerform checked division, returning a <code>CtOption</code> which …\nPerform checked multiplication, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>OR</code>, returning a <code>CtOption</code> which …\nPerform checked reduction, returning a <code>CtOption</code> which …\nSee <code>Self::checked_sqrt_vartime</code>.\nPerform checked sqrt, returning a <code>CtOption</code> which <code>is_some</code> …\nPerform checked subtraction, returning a <code>CtOption</code> which …\nPerform checked bitwise <code>XOR</code>, returning a <code>CtOption</code> which …\nPerform a comparison of the inner value in variable-time.\nReturns the Ordering between <code>self</code> and <code>rhs</code> in variable time.\nConcatenate the two halves, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nConst-friendly assertion that two values are equal.\nConst-friendly assertion that two values are NOT equal.\nCreates a new non-zero limb in a const context. The second …\nCreates a new non-zero integer in a const context. The …\nComputes <code>self</code> % <code>rhs</code>, returns the remainder and and the …\nComputes <code>self</code> % <code>rhs</code>, returns the remainder and and the …\nCreates a <code>Residue</code> with the given value for a specific …\nComputes <code>self</code> / <code>rhs</code> using a pre-made reciprocal, returns …\nPre-calculates a reciprocal for a known divisor, to be …\nReturns a default instance of this object. It is a …\nComputes self / rhs, returns the quotient, remainder.\nComputes <code>self</code> / <code>rhs</code>, returns the quotient (q) and …\nComputes <code>self</code> / <code>rhs</code> using a pre-made reciprocal, returns …\nPerforms an equality check in variable-time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize from a big-endian byte array.\nDecode a non-zero integer from big endian bytes.\nDecode from big endian bytes.\nDecode from big endian bytes.\nCreate a new <code>Uint</code> from the provided big endian hex string.\nCreate a new <code>Uint</code> from the provided big endian bytes.\nDeserialize from a little-endian byte array.\nDecode a non-zero integer from big endian bytes.\nDecode from little endian bytes.\nDecode from little endian bytes.\nCreate a new <code>Uint</code> from the provided little endian hex …\nCreate a new <code>Uint</code> from the provided little endian bytes.\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU128</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u128</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u16</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU16</code> (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU16</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u16</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u32</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU32</code> (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU32</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u32</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u64</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU64</code> (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU64</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u64</code> (const-friendly)\nCreate a <code>Limb</code> from a <code>u8</code> integer (const-friendly)\nCreate a <code>NonZero&lt;Limb&gt;</code> from a <code>NonZeroU8</code> (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>NonZeroU8</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>u8</code> (const-friendly)\nCreate a <code>NonZero&lt;Uint&gt;</code> from a <code>Uint</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>WideWord</code> (const-friendly)\nCreate a <code>Uint</code> from a <code>Word</code> (const-friendly)\nCreate a <code>Uint</code> from an array of <code>Word</code>s (i.e. word-sized …\nImplements a modulus with the given name, type, and value, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeserialize from a big-endian <code>GenericArray</code>.\nDeserialize from a little-endian <code>GenericArray</code>.\nComputes the multiplicative inverse of <code>self</code> mod <code>modulus</code>. …\nComputes 1/<code>self</code> mod <code>2^k</code>.\nComputes 1/<code>self</code> mod <code>2^k</code>. This method is constant-time …\nComputes the multiplicative inverse of <code>self</code> mod <code>modulus</code>, …\nComputes the multiplicative inverse of <code>self</code> mod <code>modulus</code>, …\nComputes the inverse.\nIs this integer value an even number?\nIs this integer value an odd number?\nIs this limb an odd number?\nDetermine if this value is equal to zero.\nCalculate the number of leading zeros in the binary …\nCalculate the number of leading zeros in the binary …\nCalculate the number of leading zeros in the binary …\nComputes <code>self + (b * c) + carry</code>, returning the result …\nImplements modular arithmetic for constant moduli.\nMultiply <code>self</code> by <code>rhs</code>, returning a concatenated “wide” …\nCompute <code>self * rhs mod p</code>.\nComputes <code>self * rhs mod p</code> for the special modulus …\nCompute “wide” multiplication, with a product twice …\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCompute <code>-self mod p</code>.\nComputes <code>-a mod p</code>. Assumes <code>self</code> is in <code>[0, p)</code>.\nComputes <code>-a mod p</code> for the special modulus <code>p = MAX+1-c</code> …\nCreate a new checked arithmetic wrapper for the given …\nCreate a new non-zero integer.\nA non-const-fn version of <code>new_const()</code>, wrapping the result …\nConst-friendly <code>Uint</code> constructor.\nCalculate the number of limbs required to represent the …\nCalculates <code>!a</code>.\nComputes bitwise <code>!a</code>.\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nImport prelude for this crate: includes important traits.\nGenerate a cryptographically secure random value.\nGenerate a random <code>NonZero&lt;T&gt;</code>.\nGenerate a cryptographically secure random <code>Uint</code>.\nGenerate a cryptographically secure random number which is …\nGenerate a cryptographically secure random <code>Uint</code> which is …\nComputes self % rhs, returns the remainder.\nComputes <code>self</code> % 2^k. Faster than reduce since its a power …\nConstruct a <code>Uint&lt;T&gt;</code> from the unsigned integer value, …\nPerform saturating addition.\nPerform saturating addition, returning <code>MAX</code> on overflow.\nPerform saturating multiplication.\nPerform saturating multiplication, returning <code>MAX</code> on …\nPerform saturating subtraction.\nPerform saturating subtraction, returning <code>ZERO</code> on …\nComputes <code>self - (rhs + borrow)</code>, returning the result along …\nComputes <code>a - (b + borrow)</code>, returning the result along with …\nComputes <code>self &lt;&lt; rhs</code>. Panics if <code>rhs</code> overflows <code>Limb::BITS</code>.\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nComputes <code>self &lt;&lt; n</code>. Returns zero if <code>n &gt;= Self::BITS</code>.\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nComputes <code>self &lt;&lt; shift</code>.\nComputes a left shift on a wide input as <code>(lo, hi)</code>.\nComputes <code>self &gt;&gt; rhs</code>. Panics if <code>rhs</code> overflows <code>Limb::BITS</code>.\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nNOTE: this operation is variable time with respect to <code>rhs</code> …\nComputes <code>self &lt;&lt; n</code>. Returns zero if <code>n &gt;= Self::BITS</code>.\nComputes <code>self &gt;&gt; n</code>.\nComputes a right shift on a wide input as <code>(lo, hi)</code>.\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number in half, returning its high and low …\nSplit this number into parts, returning its high and low …\nSee <code>Self::sqrt_vartime</code>.\nComputes √(<code>self</code>) Uses Brent &amp; Zimmermann, Modern …\nComputes the same as <code>self.mul(self)</code>, but may be more …\nSquare self, returning a concatenated “wide” result.\nSquare self, returning a “wide” result in two parts as …\nCompute <code>self - rhs mod p</code>.\nComputes <code>self - rhs mod p</code>.\nComputes <code>self - rhs mod p</code> for the special modulus …\nSerialize to a big-endian byte array.\nEncode to big endian bytes.\nSerialize to a little-endian byte array.\nEncode to little endian bytes.\nConvert this <code>Uint</code> into its inner limbs.\nCreate an array of <code>Word</code>s (i.e. word-sized unsigned …\nCalculate the number of trailing ones the binary …\nCalculate the number of trailing ones in the binary …\nCalculate the number of trailing ones in the binary …\nCalculate the number of trailing zeros in the binary …\nCalculate the number of trailing zeros in the binary …\nCalculate the number of trailing zeros in the binary …\nPerform wrapping addition, discarding overflow.\nPerform wrapping addition, discarding overflow.\nPerform wrapping bitwise <code>AND</code>.\nWrapped division is just normal division i.e. <code>self</code> / <code>rhs</code> …\nPerform wrapping multiplication, discarding overflow.\nPerform wrapping multiplication, discarding overflow.\nPerform wrapping negation.\nPerform wrapping negation.\nPerform wrapping bitwise <code>OR</code>.\nWrapped (modular) remainder calculation is just <code>self</code> % <code>rhs</code>.\nSee <code>Self::wrapping_sqrt_vartime</code>.\nWrapped sqrt is just normal √(<code>self</code>) There’s no way …\nPerform wrapping subtraction, discarding underflow and …\nPerform wrapping subtraction, discarding underflow and …\nPerform wrapping bitwise `XOR``.\nThe original type.\nA generalization for numbers kept in optimized …\nImplements <code>Residue</code>s, supporting modular arithmetic with a …\nAlgorithm 14.32 in Handbook of Applied Cryptography …\nConvert the number back from the optimized representation.\nImplements <code>DynResidue</code>s, supporting modular arithmetic with …\nNumber of limbs required to encode a residue\nThe constant modulus\nThe lowest limbs of -(MODULUS^-1) mod R\nThe representation of 1 mod <code>MOD</code>.\nParameter used in Montgomery reduction\nR^2, used to move into Montgomery form\nR^3, used to perform a multiplicative inverse\nA residue mod <code>MOD</code>, represented using <code>LIMBS</code> limbs. The …\nThe parameters to efficiently go to and from the …\nThe representation of 0 mod <code>MOD</code>.\nAdds <code>rhs</code>.\nAccess the <code>Residue</code> value in Montgomery form.\nMutably access the <code>Residue</code> value in Montgomery form.\nPerforms the modular division by 2, that is for given <code>x</code> …\nReturns the argument unchanged.\nCreate a <code>Residue</code> from a value in Montgomery form.\nCalls <code>U::from(self)</code>.\nComputes the residue <code>self^-1</code> representing the …\nMultiplies by <code>rhs</code>.\nNegates the number.\nInstantiates a new <code>Residue</code> that represents this <code>integer</code> …\nInstantiates a new <code>Residue</code> that represents this <code>integer</code> …\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nRetrieves the integer currently encoded in this <code>Residue</code>, …\nComputes the (reduced) square of a residue.\nSubtracts <code>rhs</code>.\nExtract the value from the <code>Residue</code> in Montgomery form.\nA residue represented using <code>LIMBS</code> limbs. The odd modulus …\nThe parameters to efficiently go to and from the …\nAdds <code>rhs</code>.\nAccess the <code>DynResidue</code> value in Montgomery form.\nMutably access the <code>DynResidue</code> value in Montgomery form.\nPerforms the modular division by 2, that is for given <code>x</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>DynResidue</code> from a value in Montgomery form.\nCreate <code>DynResidueParams</code> corresponding to a <code>ResidueParams</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the residue <code>self^-1</code> representing the …\nReturns the modulus which was used to initialize these …\nMultiplies by <code>rhs</code>.\nNegates the number.\nInstantiates a new set of <code>ResidueParams</code> representing the …\nInstantiates a new <code>Residue</code> that represents this <code>integer</code> …\nInstantiates a new set of <code>ResidueParams</code> representing the …\nInstantiates a new <code>Residue</code> that represents 1.\nReturns the parameter struct used to initialize this …\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nRetrieves the integer currently encoded in this <code>Residue</code>, …\nComputes the (reduced) square of a residue.\nSubtracts <code>rhs</code>.\nExtract the value from the <code>DynResidue</code> in Montgomery form.\nInstantiates a new <code>Residue</code> that represents zero.\nCompute <code>self + rhs mod p</code>.\nSupport for decoding a <code>GenericArray</code> as a big integer.\nSupport for encoding a big integer as a <code>GenericArray</code>.\nTotal size of the represented integer in bits.\nSize of this integer in bits.\nTotal size of the represented integer in bytes.\nSize of this integer in bytes.\nIntegers whose representation takes a bounded amount of …\nSize of a byte array which encodes a big integer.\nChecked addition.\nChecked multiplication.\nChecked subtraction.\nConcatenate two numbers into a “wide” double-width …\nConcatenate two numbers into a “wide” combined-width …\nEncoding support.\nInteger type.\nConstant-time inversion.\nThe number of limbs used on this platform.\nMaximum value this integer can express.\nConcatenated output: combination of <code>Lo</code> and <code>Self</code>.\nCompute <code>self * rhs mod p</code>.\nPerforms modular multi-exponentiation using Montgomery’s …\nPerforms modular multi-exponentiation using Montgomery’s …\nCompute <code>-self mod p</code>.\nThe value <code>1</code>.\nBig integer which decodes a <code>GenericArray</code>.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nOutput type.\nConcatenated output: twice the width of <code>Self</code>.\nSplit output: high/low components of the value.\nOutput of the inversion.\nConstant-time exponentiation.\nConstant-time exponentiation with exponent of a bounded …\nRandom number generation support.\nModular random number generation support.\nByte array representation.\nSplit a number in half, returning the most significant …\nSplit a number into parts, returning the most significant …\nSupport for optimized squaring\nCompute <code>self - rhs mod p</code>.\nThe value <code>0</code>.\nZero values.\nCompute <code>self + rhs mod p</code>.\nPerform checked subtraction, returning a <code>CtOption</code> which …\nPerform checked multiplication, returning a <code>CtOption</code> which …\nPerform checked subtraction, returning a <code>CtOption</code> which …\nConcatenate the two halves, with <code>self</code> as most significant …\nConcatenate the two values, with <code>self</code> as most significant …\nDeserialize from a big-endian byte array.\nDecode from big endian bytes.\nDeserialize from a little-endian byte array.\nDecode from little endian bytes.\nDeserialize from a big-endian <code>GenericArray</code>.\nDeserialize from a little-endian <code>GenericArray</code>.\nComputes the inverse.\nIs this integer value an even number?\nIs this integer value an odd number?\nDetermine if this value is equal to zero.\nCompute <code>self * rhs mod p</code>.\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCalculates <code>x1 ^ k1 * ... * xn ^ kn</code>.\nCompute <code>-self mod p</code>.\nRaises to the <code>exponent</code> power.\nRaises to the <code>exponent</code> power, with <code>exponent_bits</code> …\nGenerate a cryptographically secure random value.\nGenerate a cryptographically secure random number which is …\nSplit this number in half, returning its high and low …\nSplit this number into parts, returning its high and low …\nComputes the same as <code>self.mul(self)</code>, but may be more …\nCompute <code>self - rhs mod p</code>.\nSerialize to a big-endian byte array.\nEncode to big endian bytes.\nSerialize to a little-endian byte array.\nEncode to little endian bytes.\nThe <code>Choice</code> struct represents a choice for use in …\nA type which can be conditionally negated in constant time.\nA type which can be conditionally selected in constant …\nAn <code>Eq</code>-like trait that produces a <code>Choice</code> instead of a <code>bool</code>.\nA type which can be compared in some manner and be …\nA type which can be compared in some manner and be …\nThe <code>CtOption&lt;T&gt;</code> type represents an optional value similar …\nReturns a <code>None</code> value if the option is <code>None</code>, otherwise …\nConditionally assign <code>other</code> to <code>self</code>, according to <code>choice</code>.\nNegate <code>self</code> if <code>choice == Choice(1)</code>; otherwise, leave it …\nSelect <code>a</code> or <code>b</code> according to <code>choice</code>.\nConditionally swap <code>self</code> and <code>other</code> if <code>choice == 1</code>; …\nDetermine if two items are equal.\nTwo <code>CtOption&lt;T&gt;</code>s are equal if they are both <code>Some</code> and their …\nDetermine whether <code>self &gt; other</code>.\nDetermine whether <code>self &lt; other</code>.\nDetermine if two items are NOT equal.\nReturns the contained value, consuming the <code>self</code> value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a true <code>Choice</code> if this value is <code>None</code>.\nReturns a true <code>Choice</code> if this value is <code>Some</code>.\nReturns a <code>None</code> value if the option is <code>None</code>, otherwise …\nThis method is used to construct a new <code>CtOption&lt;T&gt;</code> and …\nReturns <code>self</code> if it contains a value, and otherwise returns …\nThis returns the underlying value but panics if it is not …\nThis returns the underlying value if it is <code>Some</code> or the …\nThis returns the underlying value if it is <code>Some</code> or the …\nUnwrap the <code>Choice</code> wrapper to reveal the underlying <code>u8</code>.\nMarker trait for types whose <code>Default</code> is the desired …\nFallible trait for representing cases where zeroization …\nTrait for securely erasing values from memory.\nDerive the <code>Zeroize</code> trait.\nMarker trait signifying that this type will …\nDerive the <code>ZeroizeOnDrop</code> trait.\n<code>Zeroizing</code> is a a wrapper for any <code>Z: Zeroize</code> type which …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMove value inside a <code>Zeroizing</code> wrapper which ensures it …\nTry to zero out this object from memory using Rust …\nZero out this object from memory using Rust intrinsics …\nZeroizes a flat type/struct. Only zeroizes the values that …\nExtension trait for iterators over mutable field elements …\nA non-allocating batch inverter.\nHow many bits of information can be reliably stored in the …\nGenerator of the <code>t-order</code> multiplicative subgroup.\nThis trait represents an element of a field.\nTrait for constructing a <code>PrimeField</code> element from a …\nModulus of the field written as a string for debugging …\nA fixed multiplicative generator of <code>modulus - 1</code> order. …\nHow many bits are needed to represent an element of this …\nThe one element of the field, the multiplicative identity.\nThis represents an element of a non-binary prime field.\nThe <code>2^s</code> root of unity.\nInverse of <code>Self::ROOT_OF_UNITY</code>.\nThe prime field can be converted back and forth into this …\nAn integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …\nInverse of $2$ in the field.\nThe subset of prime-order fields such that <code>(modulus - 1)</code> …\nThe zero element of the field, the additive identity.\nA field element of small multiplicative order $N$.\nConsumes this iterator and inverts each field element …\nCubes this element.\nDoubles this element.\nReturns the argument unchanged.\nAttempts to convert a byte representation of a field …\nAttempts to convert a byte representation of a field …\nInterpret a string of numbers as a (congruent) prime field …\nObtains a field element congruent to the integer <code>v</code>.\nReturns a field element that is congruent to the provided …\nHelper methods for implementing the <code>ff</code> traits.\nCalls <code>U::from(self)</code>.\nComputes the multiplicative inverse of this element, …\nInverts each field element in <code>elements</code> (when nonzero). …\nInverts each field element in <code>items</code> (when nonzero). …\nReturns true iff this element is even.\nReturns true iff this element is odd.\nReturns true iff this element is zero.\nReturns true iff this element is zero.\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nExponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …\nReturns an element chosen uniformly at random using a …\nReturns the square root of the field element, if it is …\nEquivalent to <code>Self::sqrt_ratio(self, one())</code>.\nComputes:\nSquares this element.\nConverts an element of the prime field into the standard …\nComputes:\nConstant-time implementation of Tonelli–Shanks’ …\nThe affine representation for this elliptic curve.\nEfficient representation of an elliptic curve point …\nThis trait represents an element of a cryptographic group.\nA helper trait for types with a group operation.\nA helper trait for references with a group operation.\nThe encoding of group elements.\nScalars modulo the order of this group’s scalar field.\nA helper trait for types implementing group scalar …\nA helper trait for references implementing group scalar …\nAffine representation of a point on an elliptic curve that …\nA “w-ary non-adjacent form” scalar multiplication …\nA fixed window table for a group element, precomputed to …\nExtension trait on a <code>Group</code> that provides helpers used by …\nA “w-ary non-adjacent form” scalar, that uses …\nPerforms exponentiation given a base.\nGiven a base and a number of scalars, compute a window …\nConverts a batch of projective elements into affine …\nDoubles this element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to deserialize a group element from its encoding.\nAttempts to deserialize a group element, not checking if …\nAttempts to deserialize an element from its uncompressed …\nAttempts to deserialize an uncompressed element, not …\nReturns a fixed generator of the prime-order subgroup.\nReturns the additive identity, also known as the “…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if this point is the identity.\nConstruct a new wNAF context without allocating.\nComputes the w-NAF representation of the given scalar with …\nComputes a window table for the given base with the …\nReturns an element chosen uniformly at random from the …\nRecommends a wNAF window size given the number of scalars …\nGiven a scalar, compute its wNAF representation and return …\nPerforms exponentiation given a scalar.\nConstructs new space for the window table while borrowing …\nConstructs new space for the scalar representation while …\nConverts this element into its affine representation.\nConverts this element into its byte encoding. This may or …\nConverts this element into its uncompressed encoding, so …\nEfficient representation of an elliptic curve point …\nAffine representation of an elliptic curve point …\nThis trait represents an element of a cryptographic group …\nThe large prime-order subgroup in which cryptographic …\nMaps <code>self</code> to the prime-order subgroup by multiplying this …\nReturns a fixed generator of unknown exponent.\nReturns the additive identity.\nReturns <code>self</code> if it is contained in the prime-order …\nDetermines if this point represents the point at infinity; …\nDetermines if this element is of small order.\nDetermines if this element is “torsion free”, i.e., is …\nConverts this element to its curve representation.\nEfficient representation of an elliptic curve point …\nAffine representation of an elliptic curve point …\nThis trait represents an element of a prime-order …\nReturns a fixed generator of unknown exponent.\nReturns the additive identity.\nDetermines if this point represents the point at infinity; …\nConverts this element to its curve representation.\nThe addition operator <code>+</code>.\nThe addition assignment operator <code>+=</code>.\nPerform a batched inversion on a sequence of field …\nBytes used as input to <code>Reduce::reduce_bytes</code>.\nPerform an inversion on a field element (i.e. base field …\nLinear combination.\nLinear combination (extended version).\nThe multiplication operator <code>*</code>.\nMultiplication by the generator.\nThe unary negation operator <code>-</code>.\nField element type\nThe output of batch inversion. A container of field …\nThe resulting type after applying the <code>+</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>*</code> operator.\nThe resulting type after applying the <code>&gt;&gt;</code> operator.\nModular reduction.\nModular reduction to a non-zero output.\nThe right shift operator <code>&gt;&gt;</code>. Note that because this trait …\nThe right shift assignment operator <code>&gt;&gt;=</code>.\nThe subtraction operator <code>-</code>.\nThe subtraction assignment operator <code>-=</code>.\nPerforms the <code>+</code> operation.\nPerforms the <code>+=</code> operation.\nInvert a batch of field elements.\nInvert a field element.\nInvert a field element in variable time.\nCalculates <code>x * k + y * l</code>.\nCalculates <code>x1 * k1 + ... + xn * kn</code>.\nPerforms the <code>*</code> operation.\nMultiply by the generator of the prime-order subgroup.\nPerforms the unary <code>-</code> operation.\nPerform a modular reduction, returning a field element.\nInterpret the given bytes as an integer and perform a …\nPerform a modular reduction, returning a field element.\nInterpret the given bytes as an integer and perform a …\nPerforms the <code>&gt;&gt;</code> operation.\nPerforms the <code>&gt;&gt;=</code> operation.\nPerforms the <code>-</code> operation.\nPerforms the <code>-=</code> operation.\n<code>AlgorithmIdentifier</code> reference which has <code>AnyRef</code> parameters.\nASN.1 DER-related errors.\nA trait which associates an OID with a type.\nCarriage return: <code>\\r</code> (Pre-OS X Macintosh)\nCarriage return + line feed: <code>\\r\\n</code> (Windows)\nParse a private key object from a PKCS#8 encoded document.\nParse a public key object from an encoded SPKI document.\nASN.1 DER-encoded document.\nSerialize a private key object to a PKCS#8 encoded …\nSerialize a public key object to a SPKI-encoded document.\nContains the error value\nError type\nMalformed cryptographic key contained in a PKCS#8 document.\nLine feed: <code>\\n</code> (Unix OSes)\nLine endings: variants of newline characters that can be …\nThe OID associated with this type.\nObject identifier (OID).\nContains the success value\n<code>AlgorithmIdentifier::parameters</code> is malformed or otherwise …\nPKCS#8 <code>PrivateKeyInfo</code>.\nPublic key errors propagated from the <code>spki::Error</code> type.\nResult type\nSecret <code>Document</code> type.\nX.509 <code>SubjectPublicKeyInfo</code> (SPKI) as defined in RFC 5280 …\n<code>SubjectPublicKeyInfo</code> with <code>AnyRef</code> algorithm parameters, and …\nDenotes PKCS#8 v1: no public key field.\nDenotes PKCS#8 v2: <code>OneAsymmetricKey</code> with public key field.\nVersion identifier for PKCS#8 documents.\nX.509 <code>AlgorithmIdentifier</code> for the public key type\nX.509 <code>AlgorithmIdentifier</code> for the private key type.\nX.509 <code>AlgorithmIdentifier</code> for the public key type\nGet the byte serialization of this <code>LineEnding</code>.\nGet the ASN.1 DER-encoded bytes of this document.\nBorrow the inner serialized bytes of this document.\nTry to decode the inner ASN.1 DER message contained in this\nTry to decode the inner ASN.1 DER message as the given …\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode the provided type as ASN.1 DER, storing the …\nEncode the provided type as ASN.1 DER.\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>SubjectPublicKeyInfoOwned</code> from any object that …\nDecode ASN.1 DER document from PEM.\nDecode ASN.1 DER document from PEM.\nDeserialize PKCS#8 private key from ASN.1 DER-encoded data …\nDeserialize PKCS#8-encoded private key from PEM.\nDeserialize object from ASN.1 DER-encoded […\nDeserialize PEM-encoded [<code>SubjectPublicKeyInfo</code>].\nIs this version expected to have a public key?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>SecretDocument</code>.\nConvert to an ASN.1 DER-encoded byte vector.\nGet the encoded length of this <code>LineEnding</code>.\nGet the length of the encoded ASN.1 DER in bytes.\nGet the length of the encoded ASN.1 DER in bytes.\nCreate a new PKCS#8 <code>PrivateKeyInfo</code> message.\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nAlgorithm <code>parameters</code>.\nPrivate key data.\nPublic key data, optionally available if version is V2.\nRead ASN.1 DER document from a file.\nRead ASN.1 DER document from a file.\nRead PEM-encoded ASN.1 DER document from a file.\nRead PEM-encoded ASN.1 DER document from a file.\nLoad PKCS#8 private key from an ASN.1 DER-encoded file on …\nLoad PKCS#8 private key from a PEM-encoded file on the …\nLoad public key object from an ASN.1 DER-encoded file on …\nLoad public key object from a PEM-encoded file on the …\nPublic key data\nPublic key data\nReturn an allocated ASN.1 DER serialization as a byte …\nEncode ASN.1 DER document as a PEM string with …\nEncode ASN.1 DER document as a PEM string.\nSerialize a <code>SecretDocument</code> containing a PKCS#8-encoded …\nSerialize this private key as PEM-encoded PKCS#8 with the …\nSerialize a <code>Document</code> containing a SPKI-encoded public key.\nSerialize this public key as PEM-encoded SPKI with the …\nReturn an ASN.1 DER-encoded byte vector.\nGet the PKCS#8 <code>Version</code> for this structure.\nWrite ASN.1 DER document to a file.\nWrite ASN.1 DER document to a file.\nWrite PEM-encoded ASN.1 DER document to a file.\nWrite PEM-encoded ASN.1 DER document to a file.\nWrite ASN.1 DER-encoded PKCS#8 private key to the given …\nWrite ASN.1 DER-encoded PKCS#8 private key to the given …\nWrite ASN.1 DER-encoded public key to the given path\nWrite ASN.1 DER-encoded public key to the given path\nASN.1 <code>ANY</code>: represents any explicitly tagged ASN.1 value.\nASN.1 <code>ANY</code>: represents any explicitly tagged ASN.1 value.\n<code>APPLICATION</code>: types whose meaning is specific to an …\nApplication tag.\n<code>BIT STRING</code> tag: <code>3</code>.\n<code>BMPString</code> tag: <code>30</code>.\n<code>BOOLEAN</code> tag: <code>1</code>.\nASN.1 <code>CHOICE</code> denotes a union of one or more possible …\nClass of an ASN.1 tag.\n<code>CONTEXT-SPECIFIC</code>: types whose meaning is specific to a …\nContext-specific tag.\nDate-and-time type shared by multiple ASN.1 types (e.g. …\nDate-and-time related errors.\nDecoding trait.\nMarker trait for data structures that can be decoded from …\nPEM decoding trait.\nDecode the value part of a Tag-Length-Value encoded field, …\nDER ordering trait.\nASN.1 DER-encoded document.\nEncoding trait.\nPEM encoding trait.\nReference encoder: wrapper type which impls <code>Encode</code> for any …\nEncode the value part of a Tag-Length-Value encoded field, …\nReference value encoder: wrapper type which impls …\n<code>ENUMERATED</code> tag: <code>10</code>.\nContains the error value\nError type.\nError type.\n<code>EXPLICIT</code> tagging.\nThis error indicates a previous DER parsing operation …\nFile not found error.\nTypes which have a constant ASN.1 <code>Tag</code>.\n<code>GeneralizedTime</code> tag: <code>24</code>.\nASN.1 DER headers: tag + length component of TLV-encoded …\nIndefinite length.\nThis is the maximum date represented by the <code>DateTime</code> This …\n<code>IA5String</code> tag: <code>22</code>.\n<code>IMPLICIT</code> tagging.\nMessage is incomplete and does not contain all of the …\nLength type with support for indefinite lengths as used by …\nIndefinite length disallowed.\n<code>INTEGER</code> tag: <code>2</code>.\nI/O errors.\nASN.1-encoded length.\nIncorrect length for a given field.\nMaximum length currently supported: 256 MiB\nTag number <code>0</code>\nTag number <code>1</code>\nTag number <code>10</code>\nTag number <code>11</code>\nTag number <code>12</code>\nTag number <code>13</code>\nTag number <code>14</code>\nTag number <code>15</code>\nTag number <code>16</code>\nTag number <code>17</code>\nTag number <code>18</code>\nTag number <code>19</code>\nTag number <code>2</code>\nTag number <code>20</code>\nTag number <code>21</code>\nTag number <code>22</code>\nTag number <code>23</code>\nTag number <code>24</code>\nTag number <code>25</code>\nTag number <code>26</code>\nTag number <code>27</code>\nTag number <code>28</code>\nTag number <code>29</code>\nTag number <code>3</code>\nTag number <code>30</code>\nTag number <code>4</code>\nTag number <code>5</code>\nTag number <code>6</code>\nTag number <code>7</code>\nTag number <code>8</code>\nTag number <code>9</code>\n<code>AnyRef</code> representation of the ASN.1 <code>NULL</code> type.\nReader type used by <code>Reader::read_nested</code>.\nMessage is not canonically encoded.\n<code>NULL</code> tag: <code>5</code>.\n<code>NumericString</code> tag: <code>18</code>.\nLength of <code>1</code>\nLength of <code>1</code>.\n<code>OBJECT IDENTIFIER</code> tag: <code>6</code>.\n<code>OCTET STRING</code> tag: <code>4</code>.\nOID is improperly encoded.\nUnknown OID.\nContains the success value\nInteger overflow occurred (library bug!).\nMessage is longer than this library’s internal limits …\nPEM encoding errors.\n<code>Reader</code> type which decodes PEM on-the-fly.\n<code>Writer</code> type which outputs PEM-encoded data.\nPermission denied reading file.\n<code>PrintableString</code> tag: <code>19</code>.\n<code>PRIVATE</code>: types whose meaning is specific to a given …\nPrivate tag number.\nReader trait which reads DER-encoded input.\nReader does not support the requested operation.\n<code>REAL</code> tag: <code>9</code>.\nResult type.\nSecret <code>Document</code> type.\nMarker trait for ASN.1 <code>SEQUENCE</code>s.\n<code>SEQUENCE</code> tag: <code>16</code>.\n<code>SET</code> and <code>SET OF</code> tag: <code>17</code>.\n<code>SET</code> cannot contain duplicates.\n<code>SET</code> ordering error: items not in canonical order.\n<code>Reader</code> which consumes an input byte slice.\n<code>Writer</code> which encodes DER into a mutable output byte slice.\nASN.1 tag\nASN.1 tags.\nTagging modes: <code>EXPLICIT</code> versus <code>IMPLICIT</code>.\nUnknown tag mode.\nASN.1 tag numbers (i.e. lower 5 bits of a <code>Tag</code>).\nInvalid tag number.\nUnexpected tag.\nUnknown/unsupported tag.\nTypes which have an ASN.1 <code>Tag</code>.\n<code>TeletexString</code> tag: <code>20</code>.\nUndecoded trailing data at end of message.\n<code>UNIVERSAL</code>: built-in types whose meaning is the same in all …\n<code>UTCTime</code> tag: <code>23</code>.\nUTF-8 errors.\n<code>UTF8String</code> tag: <code>12</code>.\nUnexpected value.\nDER value ordering trait.\n<code>VideotexString</code> tag: <code>21</code>.\n<code>VisibleString</code> tag: <code>26</code>.\nWriter trait which outputs encoded DER.\nLength of <code>0</code>\nLength of <code>0</code>.\nCreate an <code>APPLICATION</code> tag with this tag number.\nModule containing all of the various ASN.1 built-in types …\nAssert that this <code>Tag</code> matches the provided expected tag.\nAnnotate an <code>ErrorKind</code> with context about where it occurred,\nIs the provided <code>Tag</code> decodable as a variant of this <code>CHOICE</code>?\nGet the <code>Class</code> that corresponds to this <code>Tag</code>.\nAttempt to decode an ASN.1 <code>CONTEXT-SPECIFIC</code> field with the …\nCreate a <code>CONTEXT-SPECIFIC</code> tag with this tag number.\nEncode a <code>CONTEXT-SPECIFIC</code> field with the provided tag …\nGet the day.\nAttempt to decode this message using the provided decoder.\nDecode a value which impls the <code>Decode</code> trait.\nAttempt to decode this <code>AnyRef</code> type into the inner value.\nAttempt to decode this <code>Any</code> type into the inner value.\nAttempt to decode this message using the provided <code>Reader</code>.\nReturn an <code>Ordering</code> between <code>self</code> and <code>other</code> when serialized …\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode a value which impls the <code>Encode</code> trait.\nEncode the provided type as an <code>Any</code> value.\nEncode this value to the provided byte slice, returning a …\nEncode this message as ASN.1 DER, appending it to the …\nEncode value (sans [<code>Tag</code>]+<code>Length</code> header) as ASN.1 DER using …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nReturn an error with the given <code>ErrorKind</code>, annotating it …\nReturn an error with the given <code>ErrorKind</code>, annotating it …\nReturn an error with the given <code>ErrorKind</code>, annotating it …\nFinish decoding, returning the given value if there is no …\nFinish encoding PEM, writing the post-encapsulation …\nFinish encoding to the buffer, returning a slice …\nGet the length of DER Tag-Length-Value (TLV) encoded data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse <code>Self</code> from the provided DER-encoded byte slice.\nTry to decode this type from PEM.\nInstantiate from <code>SystemTime</code>.\nCompute a <code>DateTime</code> from the given <code>Duration</code> since the …\nGet the <code>Header</code> used to encode this value.")