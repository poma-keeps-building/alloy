searchState.loadedDescShard("alloy", 4, "Takes a slice of bytes of the given length.\nTake a word from the buffer, advancing the offset.\nEthereum ABI tokens.\nCalculate the total number of head and tail words.\nReturns <code>true</code> if this decoder is validating type …\nInstantiate a new encoder with a given capacity in words.\nTrue if the token represents a dynamically-sized type.\nA Dynamic Sequence - <code>T[]</code>\nA Fixed Sequence - <code>T[N]</code>\nTrue for tuples only.\nA Packed Sequence - <code>bytes</code> or <code>string</code>\nEthereum ABI tokens.\nA token composed of a sequence of other tokens.\nA single EVM word - T for any value type.\nReturns a reference to the array.\nReturns a reference to the word as a slice.\nReturns a reference to the array as a slice.\nReturns a reference to the backing slice.\nReturns a reference to the slice.\nDecode a token from a decoder.\nABI-decode the token sequence from the encoder.\nABI-encode the token sequence into the encoder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAppend head words to the encoder.\nCalculate the number of head words.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake the backing array, consuming the token.\nInstantiate a new <code>Bytes</code> by copying the underlying slice.\nInstantiate a new <code>Vec</code> by copying the underlying slice.\nCreate a new word token from a word.\nAppend tail words to the encoder.\nCalculate the number of tail words.\nCalculate the total number of head and tail words.\nAddress - <code>address</code>\nArray - <code>T[]</code>\nThe number of bits in the integer: <code>BITS</code>\nThe number of bytes in the integer: <code>BITS / 8</code>\nBool - <code>bool</code>\nSpecifies the number of bytes in a <code>FixedBytes</code> array as a …\nBytes - <code>bytes</code>\nFixedArray - <code>T[M]</code>\nFixedBytes - <code>bytesX</code>\nFunction - <code>function</code>\nThe name of the <code>Int</code> type: <code>int&lt;N&gt;</code>\nInt - <code>intX</code>\nThe signed integer Rust representation.\nSpecifies the number of bits in an <code>Int</code> or <code>Uint</code> as a type.\nThe name of the <code>FixedBytes</code> type: <code>bytes&lt;N&gt;</code>\nThe difference between the representation’s and this …\nString - <code>string</code>\nStatically guarantees that a <code>FixedBytes</code> byte count is …\nStatically guarantees that a <code>Int</code> or <code>Uint</code> bit count is …\nThe name of the <code>Uint</code> type: <code>uint&lt;N&gt;</code>\nUint - <code>uintX</code>\nThe unsigned integer Rust representation.\nThe index of the most significant byte in the Word type.\nDetokenizes a signed integer.\nDetokenizes an unsigned integer.\nABI-encode a signed integer in packed mode.\nABI-encode an unsigned integer in packed mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTokenizes a signed integer.\nTokenizes an unsigned integer.\nSee <code>usize::next_multiple_of</code>.\nCalculates the padded length of a slice by rounding its …\nCalculates the padded length of a slice of a specific …\nBasic, bearer or raw authentication in http or websocket …\nBackend connection task has stopped.\nRC7617 HTTP Basic Auth\nRFC6750 Bearer Auth\nType alias for a pin-boxed future, with a <code>Send</code> bound on …\nA boxed, Clone-able <code>Transport</code> trait object.\nConnection details for a transport that can be boxed.\nCustom error.\nJSON deserialization error.\nJSON deserialization error.\nContains the error value\nContains the error value\nServer returned an error response.\nServer returned an error response.\nReturned when a local pre-processing step fails. This …\nReturned when a local pre-processing step fails. This …\nMissing batch response.\nServer returned a null response when a non-null response …\nServer returned a null response when a non-null response …\nContains the success value\nContains the success value\nPin-boxed future.\nPubsub service is not available for the current provider.\nRaw auth string\nAn RPC error.\nFuture for RPC-level requests.\nThe result of a JSON-RPC request.\nJSON serialization error.\nJSON serialization error.\nA <code>Transport</code> manages the JSON-RPC request/response …\nTransport error.\nTransport error.\nThe transport type that is returned by <code>connect</code>.\nConnection details for a transport.\nA transport error is an <code>RpcError</code> containing a …\nTransport error.\nFuture for transport-level requests.\nA transport result is a <code>Result</code> containing a <code>TransportError</code>.\nRpc server returned an unsupported feature.\nRpc server returned an unsupported feature.\nReturns a reference to the inner transport.\nMake a boxed trait object by cloning this transport.\nFallible conversion to an error response.\nInstantiate a new basic auth from an authority string.\nInstantiate a new <code>TransportError::BackendGone</code>.\nInstantiate a new basic auth from a username and password.\nInstantiate a new bearer auth from the given token.\nConvert this transport into a boxed trait object.\nInstantiate a new <code>TransportError</code> from a custom error.\nInstantiate a new <code>TransportError</code> from a custom error.\nInstantiate a new <code>DeserError</code> from a <code>serde_json::Error</code> and …\nInstantiate a new <code>ErrorResp</code> from an error response.\nExtract the auth info from a URL.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConnect to a transport, and box it.\nConnect to the transport, returning a <code>Transport</code> instance.\nMacro that return an <code>impl Future</code> type, with a <code>Send</code> bound …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the error is a deserialization error.\nCheck if the error is an error response.\nReturns <code>true</code> if the transport connects to a local resource.\nReturns <code>true</code> if the transport is a local transport.\nCheck if the error is a local usage error.\nCheck if the error is a null response.\nCheck if the error is a serialization error.\nCheck if the error is a transport error.\nCheck if the error is an unsupported feature error.\nInstantiate a new <code>LocalUsageError</code> from a custom error.\nInstantiate a new <code>LocalUsageError</code> from a custom error …\nInstantiate a new <code>TransportError</code> from a missing ID.\nInstantiate a new box transport from a suitable transport.\nInstantiate a new <code>TransportError::PubsubUnavailable</code>.\nInstantiate a new raw auth from the given token.\nReturns <code>true</code> if the error is potentially recoverable. This …\nInstantiate a new <code>SerError</code> from a <code>serde_json::Error</code>. This …\nMisc. utilities for building transports.\nThe underlying serde_json error.\nFor deser errors, the text that failed to deserialize.\nThe underlying serde_json error.\nFor deser errors, the text that failed to deserialize.\nAn asynchronous <code>Client</code> to make Requests with.\nAn Http transport.\nA <code>hyper</code> HTTP client.\nConnection details for a <code>HyperTransport</code>.\nAn <code>Http</code> transport using <code>hyper</code>.\nConnection details for a <code>ReqwestTransport</code>.\nAn <code>Http</code> transport using <code>reqwest</code>.\nCreates a <code>ClientBuilder</code> to configure a <code>Client</code>.\nGet a reference to the client.\nConvenience method to make a <code>DELETE</code> request to a URL.\nExecutes a <code>Request</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience method to make a <code>GET</code> request to a URL.\nGuess whether the URL is local, based on the hostname.\nConvenience method to make a <code>HEAD</code> request to a URL.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Http</code> transport.\nConstructs a new <code>Client</code>.\nConvenience method to make a <code>PATCH</code> request to a URL.\nConvenience method to make a <code>POST</code> request to a URL.\nConvenience method to make a <code>PUT</code> request to a URL.\nStart building a <code>Request</code> with the <code>Method</code> and <code>Url</code>.\nSet the client.\nSet the URL.\nGet a reference to the URL.\nCreate a new <code>Http</code> transport with a custom client.\n202 Accepted [RFC7231, Section 6.3.3]\n208 Already Reported [RFC5842]\n502 Bad Gateway [RFC7231, Section 6.6.3]\n400 Bad Request [RFC7231, Section 6.5.1]\n409 Conflict [RFC7231, Section 6.5.8]\nCONNECT\n100 Continue [RFC7231, Section 6.2.1]\n201 Created [RFC7231, Section 6.3.2]\nDELETE\n417 Expectation Failed [RFC7231, Section 6.5.14]\nContains the error value\nRepresents errors that can occur handling HTTP streams.\n424 Failed Dependency [RFC4918]\n403 Forbidden [RFC7231, Section 6.5.3]\n302 Found [RFC7231, Section 6.4.3]\n504 Gateway Timeout [RFC7231, Section 6.6.5]\nGET\n410 Gone [RFC7231, Section 6.5.9]\nHEAD\n<code>HTTP/0.9</code>\n<code>HTTP/1.0</code>\n<code>HTTP/1.1</code>\n<code>HTTP/2.0</code>\n<code>HTTP/3.0</code>\n505 HTTP Version Not Supported [RFC7231, Section 6.6.6]\nA set of HTTP headers\n418 I’m a teapot [curiously not registered by IANA but …\n226 IM Used [RFC3229]\n507 Insufficient Storage [RFC4918]\n500 Internal Server Error [RFC7231, Section 6.6.1]\n411 Length Required [RFC7231, Section 6.5.10]\n423 Locked [RFC4918]\n508 Loop Detected [RFC5842]\n405 Method Not Allowed [RFC7231, Section 6.5.5]\n421 Misdirected Request RFC7540, Section 9.1.2\n301 Moved Permanently [RFC7231, Section 6.4.2]\n300 Multiple Choices [RFC7231, Section 6.4.1]\n207 Multi-Status [RFC4918]\nThe Request Method (VERB)\n511 Network Authentication Required [RFC6585]\n203 Non-Authoritative Information [RFC7231, Section 6.3.4]\n406 Not Acceptable [RFC7231, Section 6.5.6]\n510 Not Extended [RFC2774]\n404 Not Found [RFC7231, Section 6.5.4]\n501 Not Implemented [RFC7231, Section 6.6.2]\n304 Not Modified [RFC7232, Section 4.1]\n204 No Content [RFC7231, Section 6.3.5]\n200 OK [RFC7231, Section 6.3.1]\nOPTIONS\nContains the success value\n206 Partial Content [RFC7233, Section 4.1]\nPATCH\n413 Payload Too Large [RFC7231, Section 6.5.11]\n402 Payment Required [RFC7231, Section 6.5.2]\n308 Permanent Redirect [RFC7238]\nPOST\n412 Precondition Failed [RFC7232, Section 4.2]\n428 Precondition Required [RFC6585]\n102 Processing [RFC2518]\n407 Proxy Authentication Required [RFC7235, Section 3.2]\nPUT\n416 Range Not Satisfiable [RFC7233, Section 4.4]\n431 Request Header Fields Too Large [RFC6585]\n408 Request Timeout [RFC7231, Section 6.5.7]\n205 Reset Content [RFC7231, Section 6.3.6]\nRepresents an HTTP request.\nRepresents an HTTP response\nResult type often returned from methods that can have …\n303 See Other [RFC7231, Section 6.4.4]\n503 Service Unavailable [RFC7231, Section 6.6.4]\n101 Switching Protocols [RFC7231, Section 6.2.2]\nAn HTTP status code (<code>status-code</code> in RFC 7230 et al.).\n307 Temporary Redirect [RFC7231, Section 6.4.7]\n429 Too Many Requests [RFC6585]\nTRACE\n401 Unauthorized [RFC7235, Section 3.1]\n451 Unavailable For Legal Reasons [RFC7725]\n422 Unprocessable Entity [RFC4918]\n415 Unsupported Media Type [RFC7231, Section 6.5.13]\n426 Upgrade Required [RFC7231, Section 6.5.15]\n414 URI Too Long [RFC7231, Section 6.5.12]\n305 Use Proxy [RFC7231, Section 6.4.5]\nThe URI component of a request.\n506 Variant Also Negotiates [RFC2295]\nRepresents a version of the HTTP spec.\nInserts a key-value pair into the map.\nReturn a &amp;str representation of the HTTP method\nReturns a &amp;str representation of the <code>StatusCode</code>\nReturns the <code>u16</code> corresponding to this <code>StatusCode</code>.\nGet the authority of this <code>Uri</code>.\nStreaming bodies for Requests and Responses\nReturns a reference to the associated HTTP body.\nReturns a reference to the associated HTTP body.\nReturns a mutable reference to the associated HTTP body.\nReturns a mutable reference to the associated HTTP body.\nCreates a new builder-style object to manufacture a <code>Request</code>\nCreates a new builder-style object to manufacture a …\nCreates a new builder-style object to manufacture a <code>Uri</code>.\nGet the standardised <code>reason-phrase</code> for this status code.\nReturns the number of headers the map can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nHTTP Client\nCreates a new <code>Builder</code> initialized with a CONNECT method …\nReturns true if the map contains a value for the specified …\nCreates a new <code>Builder</code> initialized with a DELETE method and …\nClears the map, returning all entries as an iterator.\nGets the given key’s corresponding entry in the map for …\nHTTP extensions.\nExtend a <code>HeaderMap</code> with the contents of another <code>HeaderMap</code>.\nReturns a reference to the associated extensions.\nReturns a reference to the associated extensions.\nReturns a mutable reference to the associated extensions.\nReturns a mutable reference to the associated extensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a slice of bytes to an HTTP method.\nConverts a &amp;u8 to a status code\nAttempt to convert a <code>Bytes</code> buffer to a <code>Uri</code>.\nCreates a new <code>Request</code> with the given components parts and …\nCreates a new <code>Response</code> with the given head and body\nAttempt to convert a <code>Parts</code> into a <code>Uri</code>.\nConvert a <code>Uri</code> from a static string.\nConverts a u16 to a status code.\nReturns a reference to the value associated with the key.\nCreates a new <code>Builder</code> initialized with a GET method and …\nReturns a view of all values associated with a key.\nReturns a mutable reference to the value associated with …\nCreates a new <code>Builder</code> initialized with a HEAD method and …\nReturns a reference to the associated header field map.\nReturns a reference to the associated header field map.\nReturns a mutable reference to the associated header field …\nReturns a mutable reference to the associated header field …\nGet the host of this <code>Uri</code>.\nPanics\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the request, returning just the body.\nConsumes the response, returning just the body.\nCreates a consuming iterator, that is, one that moves keys …\nConsumes the request returning the head and body parts.\nConsumes the response returning the head and body parts.\nConvert a <code>Uri</code> into <code>Parts</code>.\nReturns true if the body write was aborted.\nReturns true if this was about a <code>Request</code> that was canceled.\nCheck if status is within 400-499.\nReturns true if a sender’s channel is closed.\nReturns true if the map contains no elements.\nWhether a method is considered “idempotent”, meaning …\nReturns true if the connection closed before a message …\nCheck if status is within 100-199.\nReturns true if this was an HTTP parse error.\nReturns true if this was an HTTP parse error caused by an …\nReturns true if this was an HTTP parse error caused by a …\nCheck if status is within 300-399.\nWhether a method is considered “safe”, meaning the …\nCheck if status is within 500-599.\nCheck if status is within 200-299.\nReturns true if the error was caused by a timeout.\nReturns true if this error was caused by user code.\nAn iterator visiting all key-value pairs.\nAn iterator visiting all key-value pairs, with mutable …\nAn iterator visiting all keys.\nReturns the number of keys stored in the map.\nReturns the number of headers stored in the map.\nConsumes the request returning a new request with body …\nConsumes the response returning a new response with body …\nReturns a reference to the associated HTTP method.\nReturns a mutable reference to the associated HTTP method.\nCreate an empty <code>HeaderMap</code>.\nCreates a new blank <code>Request</code> with the body\nCreates a new blank <code>Response</code> with the body\nCreates a new <code>Builder</code> initialized with an OPTIONS method …\nCreates a new <code>Builder</code> initialized with a PATCH method and …\nGet the path of this <code>Uri</code>.\nReturns the path &amp; query components of the Uri\nGet the port part of this <code>Uri</code>.\nGet the port of this <code>Uri</code> as a <code>u16</code>.\nCreates a new <code>Builder</code> initialized with a POST method and …\nCreates a new <code>Builder</code> initialized with a PUT method and …\nGet the query string of this <code>Uri</code>, starting after the <code>?</code>.\nRemoves a key from the map, returning the value associated …\nReserves capacity for at least <code>additional</code> more headers to …\nRuntime components\nGet the scheme of this <code>Uri</code>.\nGet the scheme of this <code>Uri</code> as a <code>&amp;str</code>.\nHTTP Server\nAsynchronous Services\nReturns the <code>StatusCode</code>.\nReturns a mutable reference to the associated <code>StatusCode</code>.\nCreates a new <code>Builder</code> initialized with a TRACE method and …\nInserts a key-value pair into the map.\nGets the given key’s corresponding entry in the map for …\nInserts a key-value pair into the map.\nReserves capacity for at least <code>additional</code> more headers to …\nCreate an empty <code>HeaderMap</code> with the specified capacity.\nHTTP Upgrades\nReturns a reference to the associated URI.\nReturns a mutable reference to the associated URI.\nAn iterator visiting all values.\nAn iterator visiting all values mutably.\nReturns the associated version.\nReturns a reference to the associated version.\nReturns a mutable reference to the associated version.\nReturns a mutable reference to the associated version.\nCreate an empty <code>HeaderMap</code> with the specified capacity.\nTrait representing a streaming body of a Request or …\nRead bytes from a buffer.\nA cheaply cloneable and sliceable chunk of contiguous …\nValues yielded by the <code>Body</code>.\nThe error type this <code>Body</code> might generate.\nA frame of any kind related to an HTTP stream (body).\nA stream of <code>Bytes</code>, used when receiving bodies from the …\nA <code>Body</code> size hint\nAdvance the internal cursor of the Buf\nCreates an adaptor which will chain this buffer with …\nReturns a slice starting at the current position and of …\nFills <code>dst</code> with potentially multiple slices starting at <code>self</code>…\nConsumes <code>len</code> bytes inside self and returns new instance of …\nCopies bytes from <code>self</code> into <code>dst</code>.\nCreate a DATA frame with the provided <code>Buf</code>.\nIf this is a DATA frame, returns a mutable reference to it.\nIf this is a DATA frame, returns a reference to it.\nReturns the exact size of data that will be yielded <strong>if</strong> the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets a signed 128 bit integer from <code>self</code> in big-endian byte …\nGets a signed 128 bit integer from <code>self</code> in little-endian …\nGets a signed 128 bit integer from <code>self</code> in native-endian …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets a signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in native-endian …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in native-endian …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in native-endian …\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in native-endian …\nGets an unsigned 128 bit integer from <code>self</code> in big-endian …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in native-endian …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in native-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in native-endian …\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in native-endian …\nReturns true if there are any more bytes to consume\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self into the buf of the DATA frame.\nConsumes self into the buf of the trailers frame.\nReturns whether this is a DATA frame.\nReturns <code>true</code> when the end of stream has been reached.\nReturns whether this is a trailers frame.\nReturns the lower bound of data that the <code>Body</code> will yield …\nMaps this frame’s data to a different type.\nReturns a new <code>SizeHint</code> with default values\nAttempt to pull out the next data buffer of this stream.\nCreates an adaptor which implements the <code>Read</code> trait for <code>self</code>…\nReturns the number of bytes between the current position …\nSet the value of the <code>lower</code> and <code>upper</code> bounds to exactly the …\nSet the value of the <code>lower</code> hint.\nSet the value of the <code>upper</code> hint value.\nReturns the bounds on the remaining length of the stream.\nCreates an adaptor which will read at most <code>limit</code> bytes …\nCreate a trailers frame.\nIf this is a trailers frame, returns a mutable reference …\nIf this is a trailers frame, returns a reference to it.\nReturns the upper bound of data the <code>Body</code> will yield before …\nReturns a new <code>SizeHint</code> with both upper and lower bounds …\nLower-level client connection API.\nHTTP/1 client connections\nHTTP/2 client connections\nA builder to configure an HTTP connection.\nA future that processes all HTTP state for the IO object.\nDeconstructed parts of a <code>Connection</code>.\nThe sender side of an established connection.\nSet whether HTTP/1 connections will accept obsolete line …\nSet whether HTTP/1 connections will accept spaces between …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a handshake future over some IO.\nConstructs a connection with the configured options and IO.\nSet whether HTTP/0.9 responses should be tolerated.\nSet whether HTTP/1 connections will silently ignored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner IO object, and additional information.\nThe original IO object used in the handshake.\nChecks if the connection side has been closed.\nChecks if the connection is currently ready to send a …\nSet the maximum buffer size for the connection.\nSet the maximum number of headers.\nCreates a new connection builder.\nPolls to determine whether this sender can be used yet for …\nPoll the connection for completion, but without calling …\nSet whether to support preserving original header cases.\nA buffer of bytes that have been read but not processed as …\nSets the exact size of the read buffer to <em>always</em> use.\nWaits until the dispatcher is ready\nSends a <code>Request</code> on the associated connection.\nSet whether HTTP/1 connections will write header names as …\nEnable this connection to support higher-level HTTP …\nPrevent shutdown of the underlying IO object at the end of …\nSet whether HTTP/1 connections should try to use vectored …\nA builder to configure an HTTP connection.\nA future that processes all HTTP state for the IO object.\nThe sender side of an established connection.\nSets whether to use an adaptive flow control.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a handshake future over some IO.\nConstructs a connection with the configured options and IO.\nSets the max connection-level flow control for HTTP2\nSets the initial maximum of locally initiated (send) …\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the connection side has been closed.\nReturns whether the extended CONNECT protocol is enabled …\nChecks if the connection is currently ready to send a …\nSets an interval for HTTP2 Ping frames should be sent to …\nSets a timeout for receiving an acknowledgement of the …\nSets whether HTTP2 keep-alive should apply while the …\nSets the maximum number of HTTP2 concurrent locally reset …\nSets the maximum frame size to use for HTTP2.\nSets the max size of received header frames.\nConfigures the maximum number of pending reset streams …\nSet the maximum write buffer size for each HTTP/2 stream.\nCreates a new connection builder.\nPolls to determine whether this sender can be used yet for …\nWaits until the dispatcher is ready\nSends a <code>Request</code> on the associated connection.\nProvide a timer to execute background HTTP2 tasks.\nRepresents the <code>:protocol</code> pseudo-header used by the …\nA reason phrase in an HTTP/1 response.\nGets the reason phrase as bytes.\nReturns a str representation of the header.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a static byte slice to a reason phrase.\nConverts a static string to a protocol name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nA generic “error” for HTTP connections\nA type map of protocol extensions.\nA set of HTTP headers\nRepresents an HTTP header field name\nRepresents an HTTP header field value.\nThe Request Method (VERB)\nContains the success value\nRepresents an HTTP request.\nRepresents an HTTP response\nA <code>Result</code> typedef to use with the <code>http::Error</code> type\nAn HTTP status code (<code>status-code</code> in RFC 7230 et al.).\nThe URI component of a request.\nRepresents a version of the HTTP spec.\nConverts a <code>HeaderValue</code> to a byte slice.\nReturns a <code>str</code> representation of the header.\nClear the <code>Extensions</code> of all inserted extensions.\nPerforms a case-insensitive comparison of the string …\nPerforms a case-insensitive comparison of the string …\nExtends <code>self</code> with another <code>Extensions</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a slice of bytes to an HTTP header name.\nAttempt to convert a byte slice to a <code>HeaderValue</code>.\nConverts a slice of bytes to an HTTP header name.\nAttempt to convert a <code>Bytes</code> buffer to a <code>HeaderValue</code>.\nConvert a <code>Bytes</code> directly into a <code>HeaderValue</code> without …\nConverts a HeaderName into a HeaderValue\nConverts a static string to a HTTP header name.\nConvert a static string to a <code>HeaderValue</code>.\nAttempt to convert a string to a <code>HeaderValue</code>.\nGet a reference to a type previously inserted on this …\nGet a mutable reference to a type previously inserted on …\nGet a mutable reference to a type, inserting <code>value</code> if not …\nGet a mutable reference to a type, inserting the type’s …\nGet a mutable reference to a type, inserting the value …\nReturn a reference to the lower level, inner error.\nInsert a type into this <code>Extensions</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the underlying error has the same type as T.\nReturns true if the <code>HeaderValue</code> has a length of zero bytes.\nCheck whether the extension set is empty or not.\nReturns <code>true</code> if the value represents sensitive data.\nReturns the length of <code>self</code>.\nGet the numer of extensions available.\nThe HTTP request method\nCreate an empty <code>Extensions</code>.\nRemove a type from this <code>Extensions</code>.\nHTTP request types.\nHTTP response types.\nMark that the header value represents sensitive …\nHTTP status codes\nYields a <code>&amp;str</code> slice if the <code>HeaderValue</code> only contains …\nURI component of request and response lines\nHTTP version\nA possible error value when converting <code>Method</code> from bytes.\nThe Request Method (VERB)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn HTTP request builder\nComponent parts of an HTTP <code>Request</code>\nRepresents an HTTP request.\n“Consumes” this builder, using the provided <code>body</code> to …\nAdds an extension to this builder\nThe request’s extensions\nGet a mutable reference to the extensions for this request …\nGet a reference to the extensions for this request builder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAppends a header to this request builder.\nThe request’s headers\nGet headers on this request builder.\nGet header on this request builder. when builder has error …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the HTTP method for this request.\nThe request’s method\nGet the HTTP Method for this request.\nCreates a new default instance of <code>Builder</code> to construct a …\nSet the URI for this request.\nThe request’s URI\nGet the URI for this request\nSet the HTTP version for this request.\nThe request’s version\nGet the HTTP version for this request\nAn HTTP response builder\nComponent parts of an HTTP <code>Response</code>\nRepresents an HTTP response\n“Consumes” this builder, using the provided <code>body</code> to …\nAdds an extension to this builder\nThe response’s extensions\nGet a mutable reference to the extensions for this …\nGet a reference to the extensions for this response …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAppends a header to this response builder.\nThe response’s headers\nGet header on this response builder. when builder has …\nGet header on this response builder.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new default instance of <code>Builder</code> to construct …\nSet the HTTP status for this response.\nThe response’s status\nSet the HTTP version for this response.\nThe response’s version\nA possible error value when converting a <code>StatusCode</code> from a …\nAn HTTP status code (<code>status-code</code> in RFC 7230 et al.).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the authority component of a URI.\nA builder for <code>Uri</code>s.\nHTTP protocol scheme\nHTTP protocol over TLS.\nAn error resulting from a failed attempt to construct a …\nAn error resulting from a failed attempt to construct a …\nThe various parts of a URI.\nRepresents the path component of a URI\nThe port component of a URI.\nRepresents the scheme component of a URI\nThe URI component of a request.\nReturns the port number as a <code>str</code>.\nReturn a str representation of the authority\nReturns the path and query as a string component.\nReturn a str representation of the scheme\nReturns the port number as a <code>u16</code>.\nSet the <code>Authority</code> for this URI.\nThe authority component of a URI\nConsumes this builder, and tries to construct a valid <code>Uri</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to convert a <code>Bytes</code> buffer to a <code>Authority</code>.\nAttempt to convert a <code>Bytes</code> buffer to a <code>PathAndQuery</code>.\nAttempt to convert an <code>Authority</code> from a static string.\nConvert a <code>PathAndQuery</code> from a static string.\nGet the host of this <code>Authority</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new default instance of <code>Builder</code> to construct a …\nReturns the path component\nSet the <code>PathAndQuery</code> for this URI.\nThe origin-form component of a URI\nGet the port part of this <code>Authority</code>.\nGet the port of this <code>Authority</code> as a <code>u16</code>.\nReturns the query string component\nSet the <code>Scheme</code> for this URI.\nThe scheme component of a URI\nRepresents a version of the HTTP spec.\nAn executor of futures.\nReads bytes from a source.\nA wrapper around a byte buffer that is incrementally …\nThe cursor part of a <code>ReadBuf</code>.\nA future returned by a <code>Timer</code>.\nA timer which provides timer-like functions.\nWrite bytes asynchronously.\nAdvance the <code>filled</code> cursor by <code>n</code> bytes.\nAccess the unfilled part of the buffer.\nTrait aliases\nDowncast a pinned &amp;mut Sleep object to its original type\nPlace the future into the executor to be run.\nGet a slice of the buffer that has been filled in with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the type is the same as <code>T</code>\nReturns whether this writer has an efficient …\nCreate a new <code>ReadBuf</code> with a slice of initialized bytes.\nAttempts to flush the object.\nAttempts to read bytes into the <code>buf</code>.\nAttempts to shut down this writer.\nAttempt to write bytes from <code>buf</code> into the destination.\nLike <code>poll_write</code>, except that it writes from a slice of …\nReset a future to resolve at <code>new_deadline</code> instead.\nReturn a future that resolves in <code>duration</code> time.\nReturn a future that resolves at <code>deadline</code>.\nGet a cursor to the unfilled portion of the buffer.\nCreate a new <code>ReadBuf</code> with a slice of uninitialized bytes.\nAn executor to spawn http2 futures for the client.\nAn executor to spawn http2 connections.\nServer connection API.\nHTTP/1 Server Connections\nHTTP/2 Server Connections\nA configuration builder for HTTP/1 server connections.\nA <code>Future</code> representing an HTTP/1 connection, bound to a …\nDeconstructed parts of a <code>Connection</code>.\nA future binding a connection with a Service with Upgrade …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart a graceful shutdown process for this connection.\nStart a graceful shutdown process for this connection.\nSet whether HTTP/1 connections should support …\nSet a timeout for reading client request headers. If a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner IO object, and additional information.\nThe original IO object used in the handshake.\nEnables or disables HTTP/1 keep-alive.\nSet the maximum buffer size for the connection.\nSet the maximum number of headers.\nCreate a new connection builder.\nAggregates flushes to better support pipelined responses.\nPoll the connection for completion, but without calling …\nSet whether to support preserving original header cases.\nA buffer of bytes that have been read but not processed as …\nBind a connection together with a <code>Service</code>.\nThe <code>Service</code> used to serve this connection.\nSet the timer used in background tasks.\nSet whether HTTP/1 connections will write header names as …\nEnable this connection to support higher-level HTTP …\nPrevent shutdown of the underlying IO object at the end of …\nSet whether HTTP/1 connections should try to use vectored …\nA configuration builder for HTTP/2 server connections.\nA <code>Future</code> representing an HTTP/2 connection, bound to a …\nSets whether to use an adaptive flow control.\nEnables the extended CONNECT protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart a graceful shutdown process for this connection.\nSets the max connection-level flow control for HTTP2.\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets an interval for HTTP2 Ping frames should be sent to …\nSets a timeout for receiving an acknowledgement of the …\nSets the <code>SETTINGS_MAX_CONCURRENT_STREAMS</code> option for HTTP2 …\nSets the maximum frame size to use for HTTP2.\nSets the max size of received header frames.\nConfigures the maximum number of local reset streams …\nConfigures the maximum number of pending reset streams …\nSet the maximum write buffer size for each HTTP/2 stream.\nCreate a new connection builder.\nBind a connection together with a <code>Service</code>.\nSet the timer used in background tasks.\nThe error type that can occur within this <code>Service</code>.\nErrors produced by the service.\nThe <code>Future</code> returned by this <code>Service</code>.\nThe future response value.\nAn asynchronous function from <code>Request</code> to <code>Response</code>.\nThe <code>Body</code> body of the <code>http::Response</code>.\nResponses given by the service.\nAn asynchronous function from a <code>Request</code> to a <code>Response</code>.\nProcess the request and return the response asynchronously.\nCreate a <code>Service</code> from a function.\nA future for a possible HTTP upgrade.\nThe deconstructed parts of an <code>Upgraded</code> type.\nAn upgraded HTTP connection.\nTries to downcast the internal trait object to the type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe original IO object used before the upgrade.\nGets a pending HTTP upgrade from this message.\nA buffer of bytes that have been read but not processed as …\nHTTP client utilities\nRuntime utilities\nServer utilities.\nService utilities.\nLegacy implementations of <code>connect</code> module and <code>Client</code>\nA builder to configure a new <code>Client</code>.\nA Client to make outgoing HTTP requests.\nClient errors\nA <code>Future</code> that will resolve to an HTTP Response.\nCombine the configuration of this builder with a connector …\nBuild a client with this configuration and the default …\nCreate a builder to configure a new <code>Client</code>.\nConnectors used by the <code>Client</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSend a <code>GET</code> request to the supplied <code>Uri</code>.\nSet whether HTTP/0.9 responses should be tolerated.\nSet whether HTTP/1 connections will accept obsolete line …\nSet whether HTTP/1 connections will accept spaces between …\nSets whether invalid header lines should be silently …\nSet the maximum buffer size for the connection.\nSet the maximum number of headers.\nSet whether to support preserving original header cases.\nSets the exact size of the read buffer to <em>always</em> use.\nSet whether HTTP/1 connections will write header names as …\nSet whether HTTP/1 connections should try to use vectored …\nSets whether to use an adaptive flow control.\nSets the max connection-level flow control for HTTP2\nSets the initial maximum of locally initiated (send) …\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nSets an interval for HTTP2 Ping frames should be sent to …\nSets a timeout for receiving an acknowledgement of the …\nSets whether HTTP2 keep-alive should apply while the …\nSets the maximum number of HTTP2 concurrent locally reset …\nSets the maximum frame size to use for HTTP2.\nConfigures the maximum number of pending reset streams …\nSet the maximum write buffer size for each HTTP/2 stream.\nSet whether the connection <strong>must</strong> use HTTP/2.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this was an error from <code>Connect</code>.\nConstruct a new Builder.\nSet an optional timeout for idle sockets being kept-alive. …\nSets the maximum idle connection per host allowed in the …\nProvide a timer to be used for timeouts and intervals in …\nSend a constructed <code>Request</code> using this <code>Client</code>.\nSet whether to retry requests that get disrupted before …\nSet whether to automatically add the <code>Host</code> header to …\nProvide a timer to be used for h2\n<code>CaptureConnection</code> allows callers to capture <code>Connected</code> …\nConnect to a destination, returning an IO transport.\nExtra information about the connected transport.\nDescribes a type returned by a connector.\nA connector for the <code>http</code> scheme.\nExtra information about the transport when an …\nCapture the connection for a given request\nReturn metadata describing the connection.\nRetrieve the connection metadata, if available\nDNS Resolution used by the <code>HttpConnector</code>.\nOption to enforce all <code>Uri</code>s have the <code>http</code> scheme.\nSet extra connection information to be set in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopies the extra connection information into an <code>Extensions</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if the connected transport negotiated HTTP/2 as …\nDetermines if the connected transport is to an HTTP proxy.\nGet the local address of the transport used.\nSet that the connected transport negotiated HTTP/2 as its …\nConstruct a new HttpConnector.\nCreate new <code>Connected</code> type with empty metadata.\nConstruct a new HttpConnector.\nSet whether the connected transport is to an HTTP proxy.\nGet the remote address of the transport used.\nSet the connect timeout.\nSet timeout for RFC 6555 (Happy Eyeballs) algorithm.\nSets the value for the <code>SO_BINDTODEVICE</code> option on this …\nSet that all sockets have <code>SO_KEEPALIVE</code> set with the …\nSet the duration between two successive TCP keepalive …\nSet the number of retransmissions to be carried out before …\nSet that all sockets are bound to the configured address …\nSet that all sockets are bound to the configured IPv4 or …\nSet that all sockets have <code>SO_NODELAY</code> set to the supplied …\nSets the value of the SO_RCVBUF option on the socket.\nSet that all socket have <code>SO_REUSEADDR</code> set to the supplied …\nSets the value of the SO_SNDBUF option on the socket.\nWait for the connection to be established\nAn iterator of IP addresses returned from <code>getaddrinfo</code>.\nA future to resolve a name returned by <code>GaiResolver</code>.\nA resolver using blocking <code>getaddrinfo</code> calls in a …\nError indicating a given string was not a valid domain …\nA domain name to resolve into IP addresses.\nView the hostname as a string slice.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>GaiResolver</code>.\nFuture executor that utilises <code>tokio</code> threads.\nA wrapper that implements Tokio’s IO traits for an inner …\nA Timer that uses the tokio runtime.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBorrow the inner type.\nMut borrow the inner type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this wrapper and get the inner type.\nCreate new executor that relies on <code>tokio::spawn</code> to execute …\nWrap a type implementing Tokio’s or hyper’s IO traits.\nCreate a new TokioTimer\nTokio IO integration for hyper\nFuture executor that utilises <code>tokio</code> threads.\nA wrapper that implements Tokio’s IO traits for an inner …\nA Timer that uses the tokio runtime.\nConnection utilities.\nUtility to gracefully shutdown a server.\nHttp1 or Http2 connection.\nHttp1 or Http2 connection builder.\nConnection future.\nHttp1 part of builder.\nHttp2 part of builder.\nExactly equivalent to <code>Http2ServerConnExec</code>.\nConnection future.\nSets whether to use an adaptive flow control.\nEnables the extended CONNECT protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart a graceful shutdown process for this connection.\nStart a graceful shutdown process for this connection.\nSet whether HTTP/1 connections should support …\nSet a timeout for reading client request headers. If a …\nHttp1 configuration.\nHttp1 configuration.\nOnly accepts HTTP/1\nHttp2 configuration.\nHttp2 configuration.\nOnly accepts HTTP/2\nSets the max connection-level flow control for HTTP2.\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake this Connection static, instead of borrowing from …\nMake this Connection static, instead of borrowing from …\nEnables or disables HTTP/1 keep-alive.\nSets an interval for HTTP2 Ping frames should be sent to …\nSets a timeout for receiving an acknowledgement of the …\nSet the maximum buffer size for the connection.\nSets the <code>SETTINGS_MAX_CONCURRENT_STREAMS</code> option for HTTP2 …\nSets the maximum frame size to use for HTTP2.\nSets the max size of received header frames.\nSet the maximum number of headers.\nConfigures the maximum number of pending reset streams …\nSet the maximum write buffer size for each HTTP/2 stream.\nCreate a new auto connection builder.\nAggregates flushes to better support pipelined responses.\nSet whether to support preserving original header cases.\nBind a connection together with a <code>Service</code>.\nBind a connection together with a <code>Service</code>.\nBind a connection together with a <code>Service</code>.\nBind a connection together with a <code>Service</code>, with the …\nBind a connection together with a <code>Service</code>, with the …\nBind a connection together with a <code>Service</code>, with the …\nSet the timer used in background tasks.\nSet the timer used in background tasks.\nSet whether HTTP/1 connections will write header names as …\nSet whether HTTP/1 connections should try to use vectored …\nThe error type returned by the connection when used as a …\nAn internal utility trait as an umbrella target for all …\nA graceful shutdown utility\nReturns the argument unchanged.\nStart a graceful shutdown process for this connection.\nCalls <code>U::from(self)</code>.\nCreate a new graceful shutdown helper.\nSignal shutdown for all watched connections.\nWrap a future for graceful shutdown watching.\nA tower service converted into a hyper service.\nResponse future for <code>TowerToHyperService</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TowerToHyperService</code> from a tower service.\nAn asynchronous request body.\nRepresents a server X509 certificate.\nAn asynchronous <code>Client</code> to make Requests with.\nA <code>ClientBuilder</code> can be used to create a <code>Client</code> with custom …\nContains the error value\nThe Errors that may occur when processing a <code>Request</code>.\nRepresents a private key and X509 cert as a client …\nA trait to try to convert some type into a <code>Url</code>.\nThe Request Method (VERB)\nA configuration for filtering out requests that shouldn’…\nContains the success value\nConfiguration of a proxy that a <code>Client</code> should pass …\nA request which can be executed with <code>Client::execute()</code>.\nA builder to construct the properties of a <code>Request</code>.\nA Response to a submitted <code>Request</code>.\nExtension trait for http::response::Builder objects\nA <code>Result</code> alias where the <code>Err</code> case is <code>reqwest::Error</code>.\nAn HTTP status code (<code>status-code</code> in RFC 7230 et al.).\nAn upgraded HTTP connection.\nA parsed URL record.\nRepresents a version of the HTTP spec.\nAdd a custom root certificate.\nProxy <strong>all</strong> traffic to the passed URL.\nReturns a reference to the internal data of the <code>Body</code>.\nReturn the serialization of this URL.\nReturn the authority of this URL as an ASCII string.\nEnable HTTP basic authentication.\nSet the <code>Proxy-Authorization</code> header using Basic auth.\nEnable HTTP bearer authentication.\nGet the body.\nSet the request body.\nGet a mutable reference to the body.\nReturns a <code>Client</code> that uses this <code>ClientBuilder</code> …\nBuild a <code>Request</code>, which can be inspected, modified and …\nBuild a <code>Request</code>, which can be inspected, modified and …\nGet the full response body as <code>Bytes</code>.\nReturn whether this URL is a cannot-be-a-base URL, meaning …\nStream a chunk of the response body.\nSet a timeout for only the connect phase of a <code>Client</code>.\nSet whether connections should emit verbose logs.\nGet the content-length of this response, if known.\nProvide a custom function to determine what traffic to …\nSet the <code>Proxy-Authorization</code> header to a specified value.\nControls the use of certificate validation.\nControls the use of hostname verification.\nSets the default headers for every request.\nDNS resolution\nOverride the DNS resolver implementation.\nIf this URL has a host and it is a domain name (not an IP …\nTurn a response into an error if the server returned an …\nTurn a reference to a response into an error if the server …\nReturns a reference to the associated extensions.\nReturns a mutable reference to the associated extensions.\nDisable CORS on fetching the request.\nSend a form body.\nReturn this URL’s fragment identifier, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Certificate</code> from a binary DER encoded certificate\nConvert a directory name as <code>std::path::Path</code> into an URL in …\nReturns a new no-proxy configuration based on environment …\nConvert a file name as <code>std::path::Path</code> into an URL in the …\nAssemble a builder starting from an existing <code>Client</code> and a …\nCreate a <code>Certificate</code> from a PEM encoded certificate\nParses PEM encoded private key and certificate.\nCreate a collection of <code>Certificate</code>s from a PEM encoded …\nParses a DER-formatted PKCS #12 archive, using the …\nParses a chain of PEM encoded X509 certificates, with the …\nReturns a new no-proxy configuration based on a <code>no_proxy</code> …\nShortcut method to quickly make a <code>GET</code> request.\nReturn whether the URL has an ‘authority’, which can …\nEquivalent to <code>url.host().is_some()</code>.\nHTTP header types\nAdd a <code>Header</code> to this Request.\nGet the headers.\nAdd a set of Headers to the existing ones on this Request.\nGet the <code>Headers</code> of this <code>Response</code>.\nGet a mutable reference to the headers.\nGet a mutable reference to the <code>Headers</code> of this <code>Response</code>.\nReturn the parsed representation of the host for this URL. …\nReturn the string representation of the host (domain or IP …\nProxy all HTTP traffic to the passed URL.\nAllow HTTP/0.9 responses\nSet whether HTTP/1 connections will accept obsolete line …\nSet whether HTTP/1 connections will accept spaces between …\nSets whether invalid header lines should be silently …\nOnly use HTTP/1.\nSend headers as title case instead of lowercase.\nProxy all HTTPS traffic to the passed URL.\nRestrict the Client to be used with HTTPS only requests.\nSets the identity to be used for client certificate …\nBind to an interface by <code>SO_BINDTODEVICE</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the serialization of this URL.\nReturns true if the error is related to the request or …\nReturns true if the error is from a type Builder.\nReturns true if the error is related to connect\nReturns true if the error is related to decoding the …\nReturns true if the error is from a <code>RedirectPolicy</code>.\nReturns true if the error is related to the request\nReturn whether the URL is special (has a special scheme)\nReturns true if the error is from …\nReturns true if the error is related to a timeout.\nParse a string as an URL, with this URL as the base URL.\nSend a JSON body.\nTry to deserialize the response body as JSON.\nBind to a local IP Address.\nCreates a relative URL if possible, with this URL as the …\nSet the maximum allowed TLS version for connections.\nGet the method.\nGet a mutable reference to the method.\nSet the minimum required TLS version for connections.\nConstructs a new <code>ClientBuilder</code>.\nConstructs a new request.\nDisable auto response body brotli decompression.\nDisable auto response body deflate decompression.\nDisable auto response body gzip decompression.\nDisables the hickory-dns async resolver.\nClear all <code>Proxies</code>, so <code>Client</code> will use no proxy anymore.\nAdds a <code>No Proxy</code> exclusion list to this Proxy\nDisables the hickory-dns async resolver.\nDisable auto response body zstd decompression.\nReturn a default <code>ParseOptions</code> that can fully configure the …\nReturn the origin of this URL (…\nParse an absolute URL from a string.\nParse an absolute URL from a string and add params to its …\nReturn the password for this URL, if any, as a …\nReturn the path for this URL, as a percent-encoded ASCII …\nUnless this URL is cannot-be-a-base, return an iterator of …\nReturn an object with methods to manipulate this URL’s …\nSet an optional timeout for idle sockets being kept-alive.\nSets the maximum idle connection per host allowed in the …\nReturn the port number for this URL, if any.\nReturn the port number for this URL, or the default port …\nAdd a <code>Proxy</code> to the list of proxies the <code>Client</code> will use.\nModify the query string of the URL.\nReturn this URL’s query string, if any, as a …\nParse the URL’s query string, if any, as …\nManipulate this URL’s query string, viewed as a sequence …\nEnables a read timeout.\nRedirect Handling\nSet a <code>RedirectPolicy</code> for this client.\nEnable or disable automatic setting of the <code>Referer</code> header.\nGet the remote address used to get this <code>Response</code>.\nOverride DNS resolution for specific domains to a …\nOverride DNS resolution for specific domains to particular …\nReturn the scheme of this URL, lower-cased, as an ASCII …\nConstructs the Request and sends it to the target URL, …\nChange this URL’s fragment identifier.\nChange this URL’s host.\nChange this URL’s host to the given IP address.\nChange this URL’s password.\nChange this URL’s path.\nChange this URL’s port number.\nChange this URL’s query string.\nChange this URL’s scheme.\nChange this URL’s username.\nResolve a URL’s host and port number to <code>SocketAddr</code>.\nReturns the status code, if the error was generated from a …\nGet the <code>StatusCode</code> of this <code>Response</code>.\nSet that all sockets have <code>SO_KEEPALIVE</code> set with the …\nSet whether sockets have <code>TCP_NODELAY</code> enabled.\nGet the full response text.\nEnables a total request timeout.\nGet the timeout.\nEnables a request timeout.\nGet a mutable reference to the timeout.\nTLS configuration and types\nControls the use of built-in/preloaded certificates during …\nSets whether to load webpki root certs with rustls.\nAdd TLS information as <code>TlsInfo</code> extension to responses.\nControls the use of TLS server name indication.\nAssuming the URL is in the <code>file</code> scheme or similar, convert …\nAttempt to clone the request.\nAttempt to clone the RequestBuilder.\nConsumes the response and returns a future for a possible …\nA builder method for the <code>http::response::Builder</code> type that …\nReturns a possible URL related to this error.\nGet the url.\nGet the final <code>Url</code> of this <code>Response</code>.\nReturns a mutable reference to the URL related to this …\nGet a mutable reference to the url.\nForce using the native TLS backend.\nUse a preconfigured TLS backend.\nForce using the Rustls TLS backend.\nSets the <code>User-Agent</code> header to be used by this client.\nReturn the username for this URL (typically the empty …\nGet the http version.\nSet HTTP version\nGet the HTTP <code>Version</code> of this <code>Response</code>.\nGet a mutable reference to the http version.\nAdd a url related to this error (overwriting any existing)\nStrip the related url from this error (if, for example, it …\nAlias for an <code>Iterator</code> trait object over <code>SocketAddr</code>.\nA name that must be resolved to addresses.\nTrait for customizing DNS resolution in reqwest.\nAlias for the <code>Future</code> type returned by a DNS resolver.\nView the name as a string.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerforms DNS resolution on a <code>Name</code>. The return type is a …\nAdvertises which content types the client is able to …\nAdvertises which character set the client is able to …\nAdvertises which content encoding the client is able to …\nAdvertises which languages the client is able to …\nMarker used by the server to advertise partial request …\nPreflight response indicating if the response to the …\nPreflight response indicating permitted HTTP headers.\nPreflight header response indicating permitted access …\nIndicates whether the response can be shared with …\nIndicates which headers can be exposed as part of the …\nIndicates how long the results of a preflight request can …\nInforms the server which HTTP headers will be used when an …\nInforms the server know which HTTP method will be used …\nIndicates the time in seconds the object has been in a …\nLists the set of methods support by a resource.\nAdvertises the availability of alternate services to …\nContains the credentials to authenticate a user agent with …\nA marker trait used to identify values that can be used as …\nSpecifies directives for caching mechanisms in both …\nIndicates how caches have handled a response and its …\nSpecifies directives that allow origin servers to control …\nControls whether or not the network connection stays open …\nIndicates if the content is expected to be displayed …\nUsed to compress the media-type.\nUsed to describe the languages intended for the audience.\nIndicates the size of the entity-body.\nIndicates an alternate location for the returned data.\nIndicates where in a full body message a partial message …\nAllows controlling resources the user agent is allowed to …\nAllows experimenting with policies by monitoring their …\nUsed to indicate the media type of the resource.\nContains stored HTTP cookies previously sent by the server …\nContains the date and time at which the message was …\nIndicates the client’s tracking preference.\nA drain iterator for <code>HeaderMap</code>.\nIdentifier for a specific version of a resource.\nIndicates expectations that need to be fulfilled by the …\nContains the date/time after which the response is …\nA view into a single location in a <code>HeaderMap</code>, which may be …\nContains information from the client-facing side of proxy …\nContains an Internet email address for a human user who …\nA view to all values stored in a single entry.\nSpecifies the domain name of the server and (optionally) …\nA set of HTTP headers\nRepresents an HTTP header field name\nRepresents an HTTP header field value.\nMakes a request conditional based on the E-Tag.\nMakes a request conditional based on the modification date.\nMakes a request conditional based on the E-Tag.\nMakes a request conditional based on range.\nMakes the request conditional based on the last …\nA marker trait used to identify values that can be used as …\nAn owning iterator over the entries of a <code>HeaderMap</code>.\nA possible error when converting a <code>HeaderName</code> from another …\nA possible error when converting a <code>HeaderValue</code> from a …\n<code>HeaderMap</code> entry iterator.\n<code>HeaderMap</code> mutable entry iterator\nAn iterator over <code>HeaderMap</code> keys.\nContent-Types that are acceptable for the response.\nAllows the server to point an interested client to another …\nIndicates the URL to redirect a page to.\nIndicates the max number of intermediaries the request …\nError returned when max capacity of <code>HeaderMap</code> is exceeded\nIndicates where a fetch originates from.\nAn occupied entry\nA view into a single occupied location in a <code>HeaderMap</code>.\nHTTP/1.0 header usually used for backwards compatibility.\nDefines the authentication method that should be used to …\nContains the credentials to authenticate a user agent to a …\nAssociates a specific cryptographic public key with a …\nSends reports of pinning violation to the report-uri …\nIndicates the part of a document that the server should …\nContains the address of the previous web page from which a …\nGoverns which referrer information should be included with …\nInforms the web browser that the current page or frame …\nThe Retry-After response HTTP header indicates how long …\nThe |Sec-WebSocket-Accept| header field is used in the …\nThe |Sec-WebSocket-Extensions| header field is used in the …\nThe |Sec-WebSocket-Key| header field is used in the …\nThe |Sec-WebSocket-Protocol| header field is used in the …\nThe |Sec-WebSocket-Version| header field is used in the …\nContains information about the software used by the origin …\nUsed to send cookies from the server to the user agent.\nTells the client to communicate with HTTPS instead of …\nInforms the server of transfer encodings willing to be …\nAllows the sender to include additional fields at the end …\nSpecifies the form of encoding used to safely transfer the …\nA possible error when converting a <code>HeaderValue</code> to a string …\nUsed as part of the exchange to upgrade the protocol.\nSends a signal to the server expressing the client’s …\nContains a string that allows identifying the requesting …\nDetermines how to match future requests with cached …\nAdded by proxies to track routing.\nA vacant entry\nA view into a single empty location in a <code>HeaderMap</code>.\nAn drain iterator of all values associated with a single …\nAn iterator of all values associated with a single header …\nA mutable iterator of all values associated with a single …\n<code>HeaderMap</code> value iterator.\n<code>HeaderMap</code> mutable value iterator\nGeneral HTTP header contains information about possible …\nDefines the authentication method that should be used to …\nMarker used by the server to indicate that the MIME types …\nControls DNS prefetching.\nIndicates whether or not a browser should be allowed to …\nStop pages from loading when an XSS attack is detected.\nInsert the value into the entry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the first value in the entry.\nGet a mutable reference to the first value in the entry.\nInsert the value into the entry.\nSets the value of the entry.\nInsert the value into the entry.\nSets the value of the entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nReturns an iterator visiting all values associated with …\nReturns an iterator visiting all values associated with …\nReturns an iterator mutably visiting all values associated …\nReturns a reference to the entry’s key\nReturns a reference to the entry’s key\nReturns a reference to the entry’s key.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nRemove the entry from the map.\nRemove the entry from the map.\nRemove the entry from the map.\nInsert the value into the entry.\nInsert the value into the entry.\nAn action to perform when a redirect status code is found.\nA type that holds information on the next request and …\nA type that controls the policy on how to handle the …\nCreate a custom <code>Policy</code> using the passed function.\nReturns an action failing the redirect with an error.\nReturns an action meaning reqwest should follow the next …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>Policy</code> with a maximum number of redirects.\nCreate a <code>Policy</code> that does not follow any redirect.\nGet the list of previous URLs that have already been …\nApply this policy to a given <code>Attempt</code> to produce a <code>Action</code>.\nGet the type of redirect.\nReturns an action meaning reqwest should not follow the …\nGet the next URL to redirect to.\nRepresents a server X509 certificate.\nRepresents a private key and X509 cert as a client …\nVersion 1.0 of the TLS protocol.\nVersion 1.1 of the TLS protocol.\nVersion 1.2 of the TLS protocol.\nVersion 1.3 of the TLS protocol.\nHyper extension carrying extra TLS layer information. Made …\nA TLS protocol version.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the DER encoded leaf certificate of the peer.\nAn IPC Connection object.\nMock IPC server.\nA stream of JSON-RPC items, read from an <code>AsyncRead</code> stream.\nAdd a raw reply to the server.\nAdd a reply to the server.\nAdd a json-rpc response to the server.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMock IPC server.\nCreate a new IPC connection object for any type T that can …\nCreate a new mock IPC server.\nGet the path to the socket.\nRun the server.\nMock IPC server.\nGuess whether the URL is local, based on the hostname.\nConvert to a <code>Box&lt;RawValue&gt;</code> from a <code>Serialize</code> type, mapping …\nAn ongoing connection to a backend.\nSimple connection details for a websocket connection.\nThe authorization header to use.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a message from the server.\nHandle inbound text from the websocket.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new websocket connection configuration.\nSend a message to the server.\nSpawn a new backend task.\nThe URL to connect to.\nCreates a new websocket connection configuration with an …")