searchState.loadedDescShard("alloy", 1, "Wei is equivalent to 1 wei.\nAllocates memory on the heap then places <code>x</code> into it, …\nConstructs a new box with uninitialized contents on the …\nHash a message according to EIP-191 (version <code>0x01</code>).\nConstructs a message according to EIP-191 (version <code>0x01</code>).\nFormats the given number of Wei as an Ether amount.\nFormats the given number of Wei as the given unit.\nFormats the given number of Wei as the given unit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the numeric value of the unit.\nReturns the absolute value of the number.\nReturns the signed value of the number.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the number is negative.\nReturns <code>true</code> if the number is positive.\nReturns <code>true</code> if the number is signed.\nReturns <code>true</code> if the number is unsigned.\nReturns <code>true</code> if the number is zero.\nSimple interface to the <code>Keccak-256</code> hash function.\nCreates a new <code>Unit</code> instance, checking for overflow.\nCreates a new <code>Unit</code> instance.\nConverts the input to a U256 and converts from Ether to …\nParses a decimal number and multiplies it with 10^units.\nParses a decimal number and multiplies it with 10^units.\nTries to collect the elements of an iterator into a <code>Vec</code>.\nTries to create a <code>Vec</code> with the given capacity.\nReturns <code>10^self</code>, which is the number of Wei in this unit.\nReturns <code>10^self</code>, which is the number of Wei in this unit.\nA builder for an <code>&quot;eth_call&quot;</code> request. This type is returned …\nA task that polls the provider with <code>eth_getFilterChanges</code>, …\nThe network header type.\nThe JSON body of a header response.\nType alias for a <code>RootProvider</code> using the <code>Http</code> transport and …\nAn identity layer that does nothing.\nCaptures type info for network-specific RPC …\nRepresents a transaction that is yet to be confirmed a …\nA builder for configuring a pending transaction watcher.\nConfiguration for watching a pending transaction.\nProvider is parameterized with a network and a transport. …\nThe provider constructed by this layer.\nA builder for constructing a <code>Provider</code> from various layers.\nA layering abstraction in the vein of <code>tower::Layer</code>\nThe network receipt envelope type.\nThe JSON body of a transaction receipt.\nType alias for a <code>RootProvider</code> using the <code>Http</code> transport and …\nThe root provider manages the RPC client and the …\nAn <code>RpcCall</code> that takes an optional <code>BlockId</code> parameter. By …\nThe underlying <code>NetworkSigner</code> type contained in this stack.\nA stack of two providers.\nThe JSON body of a transaction request.\nThe JSON body of a transaction response.\nThe network transaction envelope type.\nThe network transaction type enum.\nAn enum over the various transaction types.\nTrait for Providers, Fill stacks, etc, which contain …\nSet the block to use for this call.\nSet the block id.\nBoxes the inner client.\nExecute a smart contract call with a transaction request …\nReturns the RPC client used to send requests.\nConnects to a boxed transport with the given connector.\nCreates a new root provider from the provided connection …\nCreate an EIP-2930 access list.\nGet the default signer address.\nSet the block id to “earliest”.\nEstimates the EIP1559 <code>maxFeePerGas</code> and <code>maxPriorityFeePerGas</code>…\nThis function returns an <code>EthCall</code> which can be used to get …\nExtended APIs for the provider module.\nAdd a chain ID filler to the stack being built. The filler …\nAdd a transaction filler to the stack being built. …\nTransaction Fillers\nSet the block id to “finalized”.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new pending transaction builder from the given …\nCreate new EthCall for gas estimates.\nRetrieves account information (Account) for the given …\nGets the accounts in the remote node. This is usually …\nGets the balance of the account at the specified tag, …\nReturns the base fee per blob gas (blob gas price) in wei.\nGets a block by either its hash, tag, or number, with full …\nGets a block by its BlockHash, with full transactions or …\nGet a block by its number.\nGet the last block number available.\nGets the selected block BlockNumberOrTag receipts.\nGets the chain ID.\nGets the client version of the chain client().\nGets the bytecode located at the corresponding Address.\nReturns a collection of historical gas information …\nGet a list of values that have been added since the last …\nGet a list of values that have been added since the last …\nGets the current gas price in wei.\nRetrieves a <code>Vec&lt;Log&gt;</code> with the given Filter.\nReturns a suggestion for the current <code>maxPriorityFeePerGas</code> …\nGets the network ID. Same as <code>eth_chainId</code>.\nGet the account and storage values of the specified …\nWaits for the transaction to confirm with the given number …\nGets the specified storage value from Address.\nGets the subscription corresponding to the given RPC …\nGets a transaction by its TxHash.\nGets the transaction count (AKA “nonce”) of the …\nGets a transaction receipt if it exists, by its TxHash.\nGets an uncle block through the tag BlockId and index u64.\nGets the number of uncles for the block specified by the …\nCheck if the signer can sign for the given address.\nSet the block id to a specific hash, without requiring the …\nSet the block id to a specific hash and require the hash …\nReturns the inner configuration.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this builder, returning the inner configuration.\nSet the block id to “latest”.\nWrap the given provider in the layer’s provider.\nAdd a layer to the stack being built. This is similar to …\nUseful layer implementations for the provider. Currently …\nMap the response to a different type.\nMap the response.\nChange the network.\nCreates a new root provider from the given RPC client.\nCreate a new <code>Stack</code>.\nCreate a new <code>ProviderBuilder</code>.\nCreates a new pending transaction builder.\nCreate a new watch for a transaction.\nCreate a new CallBuilder.\nCreate a new <code>RpcWithBlock</code> instance.\nNotify the provider that we are interested in new blocks.\nNotify the provider that we are interested in logs that …\nCreates a new HTTP root provider from the given URL.\nNotify the provider that we are interested in new pending …\nSet the block id to a specific height.\nBuild this provider with anvil, using an Reqwest HTTP …\nBuild this provider with anvil, using an Reqwest HTTP …\nBuild this provider with anvil, using an Reqwest HTTP …\nBuild this provider with anvil, using an Reqwest HTTP …\nFinish the layer stack by providing a connection string …\nFinish the layer stack by providing a root <code>RpcClient</code>, …\nBuild this provider with an Reqwest HTTP transport.\nBuild this provider with an Hyper HTTP transport.\nBuild this provider with an IPC connection.\nFinish the layer stack by providing a root <code>Provider</code>, …\nBuild this provider with a websocket connection.\nSet the state overrides for this call.\nSet the block id to “pending”.\nReturns the provider.\nSends a raw JSON-RPC request.\nSends a raw JSON-RPC request with type-erased parameters …\nRegisters the watching configuration with the provider.\nReturns the number of confirmations to wait for.\nReturns the number of confirmations to wait for.\nReturns the root provider.\nSet the block id to “safe”.\nBroadcasts a raw transaction RLP bytes to the network.\nBroadcasts a transaction to the network.\nBroadcasts a transaction envelope to the network.\nSets the number of confirmations to wait for.\nSets the number of confirmations to wait for.\nSets the timeout.\nSets the timeout.\nSets the transaction hash.\nSets the transaction hash.\nGet a reference to the underlying signer.\nAdd a signer layer to the stack being built.\nGet an iterator of all signer addresses. Note that because …\nGet a mutable reference to the underlying signer.\nConsumes this builder, returning the provider and the …\nSubscribe to an RPC event.\nSubscribe to a stream of new block headers.\nSubscribe to a stream of pending transaction bodies.\nSubscribe to a stream of logs matching given filter.\nSubscribe to a stream of pending transaction hashes.\nGets syncing info.\nReturns the timeout.\nReturns the timeout.\nCreates a new <code>TransactionRequest</code>.\nReturns this transaction’s hash.\nReturns the transaction hash.\nReturns the transaction hash.\nUnsubscribes from the subscription corresponding to the …\nCancels a subscription given the subscription ID.\nProvider-related utilities.\nWaits for the transaction to confirm with the given number …\nWatch for new blocks by polling the provider with …\nWatch for new pending transaction bodies by polling the …\nWatch for new logs using the given filter by polling the …\nWatch for the confirmation of a single pending transaction …\nWatch for new pending transaction by polling the provider …\nReturns a <code>Weak</code> RPC client used to send requests.\nAdd a chain layer to the stack being built. The layer will …\nAdd a specific chain ID to the stack being built. The …\nAdd gas estimation to the stack being built.\nAdd nonce management to the stack being built.\nWraps this configuration with a provider to expose …\nAdd preconfigured set of layers handling gas estimation, …\nSets the number of confirmations to wait for.\nSets the number of confirmations to wait for.\nSets the timeout.\nSets the timeout.\nSets the transaction hash.\nSets the transaction hash.\nAdmin namespace rpc interface that gives access to several …\nAnvil namespace rpc interface that gives access to several …\nDebug namespace rpc interface that gives access to several …\nExtension trait that gives access to engine API RPC …\nTrace namespace rpc interface that gives access to several …\nList of trace calls for use with <code>TraceApi::trace_call_many</code>\nTxpool namespace rpc interface.\nRequests adding the given peer, returning a boolean …\nRequests adding the given peer as a trusted peer, which …\nIf set to true will make every account impersonated.\nRemoves all transactions from the pool.\nRemoves transactions from the pool.\nCreate a buffer that represents all state on the chain, …\nReturns true if auto mining is enabled, and false.\nSend transactions impersonating specific account and …\nJump forward in time by the given amount of time, in …\nAppend chain state buffer to current chain. Will overwrite …\nRetrieves metadata about the Anvil instance.\nMines a series of blocks.\nMine blocks, instantly and return the mined blocks. This …\nRetrieves the Anvil node configuration params.\nUnsets the interval for the block timestamp.\nRemoves all transactions from the pool for a specific …\nReset the fork to a fresh forked state, and optionally …\nRevert the state of the blockchain to a previous snapshot. …\nEnables or disables, based on the single boolean argument, …\nModifies the balance of an account.\nSet the next block gas limit.\nSets an interval for the block timestamp.\nSets the chain ID.\nSets the code of a contract.\nSets the coinbase address.\nSets the mining behavior to interval with the given …\nEnable or disable logging.\nSet the minimum gas price for the node.\nSets the base fee of the next block.\nSimilar to <code>evm_increaseTime</code> but takes the exact timestamp …\nSets the nonce of an address.\nSets the backend rpc url.\nWrites a single slot of the account’s storage.\nSets the specific timestamp and returns the number of …\nSnapshot the state of the blockchain at the current block.\nStops impersonating an account if previously set with …\nReturn a full stack trace of all invoked opcodes of all …\nSame as <code>debug_trace_block_by_hash</code> but block is specified …\nExecutes the given transaction without publishing it like …\nSame as <code>debug_trace_call</code> but it used to run and trace …\nReruns the transaction specified by the hash and returns …\nExecute a transaction regardless of signature status.\nMine blocks, instantly. This will mine the blocks …\nReturns the list of Engine API methods supported by the …\nUpdates the execution layer client with the given fork …\nUpdates the execution layer client with the given fork …\nUpdates the execution layer client with the given fork …\nReturns the execution client version information.\nReturns the execution payload bodies by the given hash.\nReturns the execution payload bodies by the range starting …\nRetrieves an executionpayload from a previously started …\nRetrieves an executionpayload from a previously started …\nRetrieves an executionpayload from a previously started …\nReturns the most recent version of the payload that is …\nSends the given payload to the execution layer client, as …\nSends the given payload to the execution layer client, as …\nSends the given payload to the execution layer client, as …\nSends the given payload to the execution layer client, as …\nReturns general information about the node as well as …\nReturns the list of peers currently connected to the node.\nRequests to remove the given peer, returning true if the …\nRequests to remove the given peer, returning a boolean …\nTrace all transactions in the given block.\nExecutes the given transaction and returns a number of …\nTraces multiple transactions on top of the same block, …\nParity trace transaction.\nReturns the content of the transaction pool.\nReturns the content of the transaction pool filtered by a …\nReturns a textual summary of each transaction in the pool.\nReturns the current status of the transaction pool.\nA <code>TxFiller</code> that populates the chain ID of a transaction.\nA <code>Provider</code> that applies one or more <code>TxFiller</code>s.\nThe properties that this filler retrieves from the RPC. to …\nThe control flow for a filler.\nThe filler has filled in all properties that it can fill.\nA <code>TxFiller</code> that populates gas related fields in …\nA layer that can fill in a <code>TransactionRequest</code> with …\nThe filler is missing a required property.\nA <code>TxFiller</code> that fills nonces on transactions.\nThe filler is ready to fill in the transaction request.\nThe recommended filler, a preconfigured set of layers …\nA layer that signs transactions locally.\nA layer that can fill in a <code>TransactionRequest</code> with …\nAbsorb the control flow of another filler.\nReturns true if the filler is missing a required property.\nReturns <code>true</code> if the filler is should continnue filling.\nFills in the transaction request with the fillable …\nFills the transaction request, using the configured fillers\nPerforms any synchoronous filling. This should be called …\nReturns <code>true</code> if the filler is finished filling in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the filler is finished filling in the …\nReturns <code>true</code> if the filler is missing information required …\nReturns <code>true</code> if the filler is ready to fill in the …\nJoins this filler with another filler to compose multiple …\nJoins a filler to this provider\nGet a reference to the left filler.\nCreates a new <code>Missing</code> control flow.\nCreate a new <code>ChainIdFiller</code> with an optional chain ID.\nCreates a new signing layer with the given signer.\nCreates a new <code>JoinFill</code> with the given layers.\nCreates a new <code>FillProvider</code> with the given filler and inner …\nPrepares fillable properties, potentially by making an RPC …\nPrepares and fills the transaction request with the …\nReturns <code>true</code> if the filler is ready to fill in the …\nGet a reference to the right filler.\nReturn a control-flow enum indicating whether the filler …\nA layer that wraps an <code>Anvil</code> config. The config will be used\nA provider that wraps an <code>AnvilInstance</code>, preventing the …\nA layer that wraps a <code>NamedChain</code>. The layer will be used to …\nGet the chain’s average blocktime, if applicable.\nGet the instance http endpoint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStarts the anvil instance, or gets a reference to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>AnvilProvider</code> with the given inner provider …\nGet the instance ws endpoint.\nTypes for a catch-all network.\nResult type for transaction builders\nA custom error.\nContains the error value\nTypes for a mainnet-like Ethereum network.\nA signer capable of signing any transaction for the …\nThe network header type.\nThe JSON body of a header response.\nInvalid transaction request\nCaptures type info for network-specific RPC …\nA signer capable of signing any transaction for the given …\nContains the success value\nThe network receipt envelope type.\nA receipt response.\nThe JSON body of a transaction receipt.\nSigner error.\nA Transaction builder for a network.\nError type for transaction builders.\nThe JSON body of a transaction request.\nTransaction Response\nThe JSON body of a transaction response.\nThe network transaction envelope type.\nAsynchronous transaction signer, capable of signing any …\nSynchronous transaction signer,  capable of signing any …\nThe network transaction type enum.\nAn unbuilt transaction, along with some error.\nAn enum over the various transaction types.\nSigner cannot produce signature type required for …\nGet the EIP-2930 access list for the transaction.\nGet the address of the signer.\nGet the address of the signer.\nApply a function to the builder, returning the modified …\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nGets the EIP-4844 blob sidecar of the transaction.\nBuild a signed transaction.\nBuild an unsigned, but typed, transaction.\nCalculates the address that will be created by the …\nTrue if the builder contains all necessary information to …\nTrue if the builder contains all necessary information to …\nGet the chain ID for the transaction.\nClear the kind of transaction.\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nAddress of the created contract, or <code>None</code> if the …\nGet the default signer address. This address should be used\nEIP-2718 traits.\nGet the sender for the transaction.\nSender of the transaction\nGas limit\nGet the gas limit for the transaction.\nGet the legacy gas price for the transaction.\nReturn true if the signer contains a credential for the …\nGet the input data for the transaction.\nSet the <code>to</code> field to a create call.\nGet the kind of transaction.\nGet the max fee per blob gas for the transaction.\nGet the max fee per gas for the transaction.\nGet the max priority fee per gas for the transaction.\nGet the nonce for the transaction.\nReturns the transaction type that this builder will …\nReturns the transaction type that this builder will build. …\nTrim any conflicting keys and populate any computed fields …\nSets the EIP-2930 access list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the data field to a contract call. This will clear the …\nSet the chain ID for the transaction.\nSet the <code>to</code> field to a create call.\nDeploy the code by making a create call with data. This …\nSet the sender for the transaction.\nSet the gas limit for the transaction.\nSet the legacy gas price for the transaction.\nSet the input data for the transaction.\nSet the kind of transaction.\nSet the max fee per blob gas  for the transaction.\nSet the max fee per gas  for the transaction.\nSet the max priority fee per gas for the transaction.\nSet the nonce for the transaction.\nSet the recipient for the transaction.\nSet the value for the transaction.\nAsynchronously sign a transaction request, using the …\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction, with a …\nSynchronously sign an unsigned transaction.\nReturn an iterator of all signer addresses.\nRecipient of the transaction\nGet the recipient for the transaction.\nHash of the transaction\nGet the value for the transaction.\nTransferred value\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the EIP-4844 blob …\nMake a contract call with data.\nBuilder-pattern method for setting the chain ID.\nDeploy the code by making a create call with data. This …\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the value.\nDecoding trait for EIP-2718 envelopes. These envelopes …\nAn EIP-2718 envelope, blanket implemented for types that …\nEIP-2718 decoding errors.\nEncoding trait for EIP-2718 envelopes. These envelopes …\nRlp error from <code>alloy_rlp</code>.\nGot an unexpected type flag while decoding.\nDecode an EIP-2718 transaction into a concrete instance\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nEncode the transaction according to [EIP-2718] rules. …\nExtract the type byte from the buffer, if any. The type …\nDecode the default variant.\nTrue if the envelope is the legacy variant.\nDecode an EIP-2718 transaction in the network format.\nReturn the network encoding. For non-legacy items, this is …\nSeal the encodable, by encoding and hashing it.\nCompute the hash as committed to in the MPT trie.\nReturn the type flag (if any).\nDecode the appropriate variant, based on the type flag.\nMultiplier for the current base fee to estimate max base …\nThe number of blocks from the past for which the fee …\nThe default percentile of gas premiums that are fetched …\nThe minimum priority fee to provide.\nReturn type of EIP1155 gas fee estimator.\nAn estimator function for EIP1559 fees.\nThe default EIP-1559 fee estimator which is based on the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe base fee per gas.\nThe max priority fee per gas.\nA handle to a backend. Communicates to a …\nThe reciprocal of <code>ConnectionHandle</code>.\nThe expected item.\nSome other value.\nConfiguration objects that contain connection details for …\nA <code>PubSubFrontend</code> is <code>Transport</code> composed of a channel to a …\nA Subscription is a feed of notifications from the server, …\nA Subscription is a feed of notifications from the server …\nAn item in a typed <code>Subscription</code>. This is either the …\nWrapper for <code>blocking_recv</code>. Block the current thread until …\nWrapper for <code>blocking_recv</code>. Block the current thread until …\nWrapper for <code>blocking_recv</code>, may produce unexpected values. …\nWrapper for <code>blocking_recv</code>. Block the current thread until …\nGet the currently configured channel size. This is the …\nClose the interface, sending an error to the frontend.\nSpawn the backend, returning a handle to it.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the subscription ID for a local ID.\nGet a reference to the inner subscription.\nGet a mutable reference to the inner subscription.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the subscription into a stream that may yield …\nConvert the subscription into its inner <code>RawSubscription</code>.\nConvert the subscription into a stream that returns …\nConvert the configuration object into a service with a …\nConvert the subscription into a stream.\nConvert the subscription into a stream.\nReturns <code>true</code> if the broadcast channel is empty (i.e. there …\nReturns <code>true</code> if the broadcast channel is empty (i.e. there …\nReturns <code>true</code> if the transport connects to a local resource.\nReturns the number of messages in the broadcast channel …\nReturns the number of messages in the broadcast channel …\nGet the local ID of the subscription.\nGet the local ID of the subscription.\nCreate a new connection handle.\nWrapper for <code>recv</code>. Await an item from the channel.\nWrapper for <code>recv</code>. Await an item of the expected type from …\nWrapper for <code>recv</code>, may produce unexpected values. Await an …\nReceive a request from the frontend. Ensures that if the …\nWrapper for <code>recv</code>. Await an item from the channel, …\nWrapper for <code>resubscribe</code>. Create a new Subscription, …\nWrapper for <code>resubscribe</code>. Create a new <code>Subscription</code>, …\nWrapper for <code>resubscribe</code>. Create a new <code>RawSubscription</code>, …\nWrapper for <code>same_channel</code>. Returns <code>true</code> if the two …\nWrapper for <code>same_channel</code>. Returns <code>true</code> if the two …\nSend a request.\nSend a packet of requests, by breaking it up into …\nSend a pubsub item to the frontend.\nSet the channel size. This is the number of items to …\nShutdown the backend.\nAttempt to reconnect the transport.\nWrapper for <code>try_recv</code>. Attempt to receive a message from …\nWrapper for <code>try_recv</code>. Attempt to receive a message of the …\nWrapper for <code>try_recv</code>. Attempt to receive a message from …\nWrapper for <code>try_recv</code>. Attempt to receive a message from …\nUnsubscribe from a subscription.\nRead bytes from a buffer.\nA trait for values that provide sequential write access to …\nA cheaply cloneable and sliceable chunk of contiguous …\nA unique reference to a contiguous slice of memory.\nCustom error.\nA type that can be decoded from an RLP blob.\nRLP prefix byte for a 0-length array.\nRLP prefix byte for 0-length string.\nA type that can be encoded via RLP.\nContains the error value\nRLP error type.\nThe header of an RLP item.\nOverran input while decoding.\nThe maximum length.\nLeading zero disallowed.\nGot an unexpected number of items in a list.\nDefines the max length of an <code>Encodable</code> type as a const …\nDefines the max length of an <code>Encodable</code> type as an …\nExpected single byte, but got invalid value.\nExpected size, but got invalid value.\nContains the success value\nNumeric Overflow.\nRLP result type.\nAn active RLP decoder, with a specific slice of a payload.\nDerives <code>Decodable</code> for the type whose implementation …\nDerives <code>Decodable</code> for the type whose implementation …\nDerives <code>Encodable</code> for the type which encodes the all …\nDerives <code>Encodable</code> for the type which encodes the fields …\nDerives <code>MaxEncodedLen</code> for types of constant size.\nExpected a payload of a specific size, got an unexpected …\nExpected another type, got a list instead.\nExpected another type, got a string instead.\nAdvance the internal cursor of the Buf\nAdvance the internal cursor of the BufMut\nReturns the number of bytes the <code>BytesMut</code> can hold without …\nCreates an adaptor which will chain this buffer with …\nCreates an adapter which will chain this buffer with …\nReturns a slice starting at the current position and of …\nReturns a mutable slice starting at the current BufMut …\nFills <code>dst</code> with potentially multiple slices starting at <code>self</code>…\nClears the buffer, removing all data.\nClears the buffer, removing all data. Existing capacity is …\nCreates <code>Bytes</code> instance from slice, by copying it.\nConsumes <code>len</code> bytes inside self and returns new instance of …\nCopies bytes from <code>self</code> into <code>dst</code>.\nDecodes the blob into the appropriate type. <code>buf</code> must be …\nDecodes an RLP header from the given buffer.\nDecodes the next payload from the given buffer, advancing …\nDecodes a string slice from the given buffer, advancing it.\nEncode a value.\nEncodes the type into the <code>out</code> buffer.\nEncodes the header into the <code>out</code> buffer.\nEncode a type with a known maximum size.\nEncode all items from an iterator.\nEncode a list of items.\nAppends given bytes to this <code>BytesMut</code>.\nConverts <code>self</code> into an immutable <code>Bytes</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Bytes</code> from a static slice.\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets a signed 128 bit integer from <code>self</code> in big-endian byte …\nGets a signed 128 bit integer from <code>self</code> in little-endian …\nGets a signed 128 bit integer from <code>self</code> in native-endian …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets a signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in native-endian …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in native-endian …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in native-endian …\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in native-endian …\nDecode the next item from the buffer.\nGets an unsigned 128 bit integer from <code>self</code> in big-endian …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in native-endian …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in native-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in native-endian …\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in native-endian …\nReturns true if there are any more bytes to consume\nReturns true if there is space in <code>self</code> for more bytes.\nImplement <code>MaxEncodedLen</code> and <code>MaxEncodedLenAssoc</code> for a type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Bytes</code> has a length of 0.\nReturns true if the <code>BytesMut</code> has a length of 0.\nReturns true if this is the only reference to the data.\nReturns the number of bytes contained in this <code>Bytes</code>.\nReturns the number of bytes contained in this <code>BytesMut</code>.\nReturns the length of the encoding of this type in bytes.\nReturns the length of the encoded header.\nDetermine the length in bytes of the length prefix of an …\nCreates an adaptor which can write at most <code>limit</code> bytes to …\nTrue if list, false otherwise.\nCalculate the length of a list.\nInstantiate an RLP decoder with a payload slice.\nCreates a new empty <code>Bytes</code>.\nCreates a new <code>BytesMut</code> with default capacity.\nLength of the payload in bytes.\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nPut <code>cnt</code> bytes <code>val</code> into <code>self</code>.\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites a signed 128 bit integer to <code>self</code> in the big-endian …\nWrites a signed 128 bit integer to <code>self</code> in little-endian …\nWrites a signed 128 bit integer to <code>self</code> in native-endian …\nWrites a signed 16 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 16 bit integer to <code>self</code> in little-endian …\nWrites a signed 16 bit integer to <code>self</code> in native-endian …\nWrites a signed 32 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 32 bit integer to <code>self</code> in little-endian …\nWrites a signed 32 bit integer to <code>self</code> in native-endian …\nWrites a signed 64 bit integer to <code>self</code> in the big-endian …\nWrites a signed 64 bit integer to <code>self</code> in little-endian …\nWrites a signed 64 bit integer to <code>self</code> in native-endian …\nWrites a signed 8 bit integer to <code>self</code>.\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nWrites an unsigned 128 bit integer to <code>self</code> in the …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 16 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in the …\nWrites an unsigned 64 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 8 bit integer to <code>self</code>.\nWrites an unsigned n-byte integer to <code>self</code> in big-endian …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nCreates an adaptor which implements the <code>Read</code> trait for <code>self</code>…\nReturns the number of bytes between the current position …\nReturns the number of bytes that can be written from the …\nReserves capacity for at least <code>additional</code> more bytes to be …\nResizes the buffer so that <code>len</code> is equal to <code>new_len</code>.\nSets the length of the buffer.\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nReturns the remaining spare capacity of the buffer as a …\nRemoves the bytes from the current view, returning them in …\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the buffer into two at the given index.\nCreates an adaptor which will read at most <code>limit</code> bytes …\nShortens the buffer, keeping the first <code>len</code> bytes and …\nShortens the buffer, keeping the first <code>len</code> bytes and …\nAbsorbs a <code>BytesMut</code> that was previously split off.\nCreates a new <code>BytesMut</code> with the specified capacity.\nCreates an adaptor which implements the <code>Write</code> trait for …\nCreates a new <code>BytesMut</code>, which is initialized with zero.\nExpected length.\nActual length.\nRead bytes from a buffer.\nA trait for values that provide sequential write access to …\nA cheaply cloneable and sliceable chunk of contiguous …\nA unique reference to a contiguous slice of memory.\nAdvance the internal cursor of the Buf\nAdvance the internal cursor of the BufMut\nUtilities for working with buffers.\nCreates an adaptor which will chain this buffer with …\nCreates an adapter which will chain this buffer with …\nReturns a slice starting at the current position and of …\nReturns a mutable slice starting at the current BufMut …\nFills <code>dst</code> with potentially multiple slices starting at <code>self</code>…\nConsumes <code>len</code> bytes inside self and returns new instance of …\nCopies bytes from <code>self</code> into <code>dst</code>.\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets a signed 128 bit integer from <code>self</code> in big-endian byte …\nGets a signed 128 bit integer from <code>self</code> in little-endian …\nGets a signed 128 bit integer from <code>self</code> in native-endian …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets a signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in native-endian …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in native-endian …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in native-endian …\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in native-endian …\nGets an unsigned 128 bit integer from <code>self</code> in big-endian …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in native-endian …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in native-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in native-endian …\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in native-endian …\nReturns true if there are any more bytes to consume\nReturns true if there is space in <code>self</code> for more bytes.\nCreates an adaptor which can write at most <code>limit</code> bytes to …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nPut <code>cnt</code> bytes <code>val</code> into <code>self</code>.\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites a signed 128 bit integer to <code>self</code> in the big-endian …\nWrites a signed 128 bit integer to <code>self</code> in little-endian …\nWrites a signed 128 bit integer to <code>self</code> in native-endian …\nWrites a signed 16 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 16 bit integer to <code>self</code> in little-endian …\nWrites a signed 16 bit integer to <code>self</code> in native-endian …\nWrites a signed 32 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 32 bit integer to <code>self</code> in little-endian …\nWrites a signed 32 bit integer to <code>self</code> in native-endian …\nWrites a signed 64 bit integer to <code>self</code> in the big-endian …\nWrites a signed 64 bit integer to <code>self</code> in little-endian …\nWrites a signed 64 bit integer to <code>self</code> in native-endian …\nWrites a signed 8 bit integer to <code>self</code>.\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nWrites an unsigned 128 bit integer to <code>self</code> in the …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 16 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in the …\nWrites an unsigned 64 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 8 bit integer to <code>self</code>.\nWrites an unsigned n-byte integer to <code>self</code> in big-endian …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nCreates an adaptor which implements the <code>Read</code> trait for <code>self</code>…\nReturns the number of bytes between the current position …\nReturns the number of bytes that can be written from the …\nCreates an adaptor which will read at most <code>limit</code> bytes …\nCreates an adaptor which implements the <code>Write</code> trait for …\nRead bytes from a buffer.\nA trait for values that provide sequential write access to …\nA <code>Chain</code> sequences two buffers.\nIterator over the bytes contained by the buffer.\nA <code>BufMut</code> adapter which limits the amount of bytes that can …\nA <code>Buf</code> adapter which implements <code>io::Read</code> for the inner …\nA <code>Buf</code> adapter which limits the bytes read from an …\nUninitialized byte slice.\nA <code>BufMut</code> adapter which implements <code>io::Write</code> for the inner …\nAdvance the internal cursor of the Buf\nAdvance the internal cursor of the BufMut\nReturn a raw pointer to the slice’s buffer.\nReturn a <code>&amp;mut [MaybeUninit&lt;u8&gt;]</code> to this slice’s buffer.\nCreates an adaptor which will chain this buffer with …\nCreates an adapter which will chain this buffer with …\nReturns a slice starting at the current position and of …\nReturns a mutable slice starting at the current BufMut …\nFills <code>dst</code> with potentially multiple slices starting at <code>self</code>…\nCopies bytes  from <code>src</code> into <code>self</code>.\nConsumes <code>len</code> bytes inside self and returns new instance of …\nCopies bytes from <code>self</code> into <code>dst</code>.\nGets a mutable reference to the first underlying <code>Buf</code>.\nGets a reference to the first underlying <code>Buf</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>&amp;mut UninitSlice</code> from a pointer and a length.\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets a signed 128 bit integer from <code>self</code> in big-endian byte …\nGets a signed 128 bit integer from <code>self</code> in little-endian …\nGets a signed 128 bit integer from <code>self</code> in native-endian …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets a signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in native-endian …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in native-endian …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in native-endian …\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in native-endian …\nGets a mutable reference to the underlying <code>Buf</code>.\nGets a mutable reference to the underlying <code>BufMut</code>.\nGets a mutable reference to the underlying <code>Buf</code>.\nGets a mutable reference to the underlying <code>Buf</code>.\nGets a mutable reference to the underlying <code>BufMut</code>.\nGets a reference to the underlying <code>Buf</code>.\nGets a reference to the underlying <code>BufMut</code>.\nGets a reference to the underlying <code>Buf</code>.\nGets a reference to the underlying <code>Buf</code>.\nGets a reference to the underlying <code>BufMut</code>.\nGets an unsigned 128 bit integer from <code>self</code> in big-endian …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in native-endian …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in native-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in native-endian …\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in native-endian …\nReturns true if there are any more bytes to consume\nReturns true if there is space in <code>self</code> for more bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>Chain</code>, returning the underlying values.\nConsumes this <code>IntoIter</code>, returning the underlying value.\nConsumes this <code>Limit</code>, returning the underlying value.\nConsumes this <code>Reader</code>, returning the underlying value.\nConsumes this <code>Take</code>, returning the underlying value.\nConsumes this <code>Writer</code>, returning the underlying value.\nGets a mutable reference to the last underlying <code>Buf</code>.\nGets a reference to the last underlying <code>Buf</code>.\nReturns the number of bytes in the slice.\nCreates an adaptor which can write at most <code>limit</code> bytes to …\nReturns the maximum number of bytes that can be written\nReturns the maximum number of bytes that can be read.\nCreates a <code>&amp;mut UninitSlice</code> wrapping a slice of initialised …\nCreates an iterator over the bytes contained by the buffer.\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nPut <code>cnt</code> bytes <code>val</code> into <code>self</code>.\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites a signed 128 bit integer to <code>self</code> in the big-endian …\nWrites a signed 128 bit integer to <code>self</code> in little-endian …\nWrites a signed 128 bit integer to <code>self</code> in native-endian …\nWrites a signed 16 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 16 bit integer to <code>self</code> in little-endian …\nWrites a signed 16 bit integer to <code>self</code> in native-endian …\nWrites a signed 32 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 32 bit integer to <code>self</code> in little-endian …\nWrites a signed 32 bit integer to <code>self</code> in native-endian …\nWrites a signed 64 bit integer to <code>self</code> in the big-endian …\nWrites a signed 64 bit integer to <code>self</code> in little-endian …\nWrites a signed 64 bit integer to <code>self</code> in native-endian …\nWrites a signed 8 bit integer to <code>self</code>.\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nWrites low <code>nbytes</code> of a signed integer to <code>self</code> in …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nWrites an unsigned 128 bit integer to <code>self</code> in the …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 128 bit integer to <code>self</code> in …\nWrites an unsigned 16 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in the …\nWrites an unsigned 64 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in native-endian …\nWrites an unsigned 8 bit integer to <code>self</code>.\nWrites an unsigned n-byte integer to <code>self</code> in big-endian …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nCreates an adaptor which implements the <code>Read</code> trait for <code>self</code>…\nReturns the number of bytes between the current position …\nReturns the number of bytes that can be written from the …\nSets the maximum number of bytes that can be written.\nSets the maximum number of bytes that can be read.\nCreates an adaptor which will read at most <code>limit</code> bytes …\nCreates a <code>&amp;mut UninitSlice</code> wrapping a slice of …\nWrite a single byte at the specified offset.\nCreates an adaptor which implements the <code>Write</code> trait for …\nEthereum JSON-RPC type definitions.\nA batch JSON-RPC request, used to bundle requests into a …\nConnection string for built-in transports.\nA builder for the transport  <code>RpcClient</code>.\nA borrowed <code>RpcClient</code>.\nHTTP transport.\nIPC transport.\nAn IPC Connection object.\nA channel yielding responses from a poller task.\nA poller task builder.\nA client using a <code>reqwest</code> HTTP transport.\nA prepared, but unsent, RPC call.\nA JSON-RPC client.\nAwaits a single response for a request that has been …\nAn <code>RpcClient</code> in a <code>Weak</code> reference.\nWebSocket transport.\nSimple connection details for a websocket connection.\nAdd a call to the batch.\nThe authorization header to use.\nConvert this future into a boxed, pinned future, erasing …\nBoxes the transport.\nCreate a new <code>ClientBuilder</code>.\nGet the currently configured channel size. This is the …\nReturns the channel size for the poller task.\nConnect a transport, producing an <code>RpcClient</code> with the …\nConnect a transport, producing an <code>RpcClient</code> with a …\nConnect with the given connection string.\nConnect to a transport via a <code>PubSubConnect</code> implementor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>RpcClient</code> with the given inner client.\nBorrow the client.\nGet a <code>Weak</code> reference to the client.\nConvenience function to create a new <code>RpcClient</code> with a …\nConvenience function to create a new <code>RpcClient</code> with a <code>hyper</code>…\nGet a reference to the client.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the client into its inner type.\nConvert this call into one with owned params, by cloning …\nStarts the poller and returns the stream of responses.\nConverts the poll channel into a stream.\nConverts the poll channel into a stream that also yields …\nConnect an IPC transport, producing an <code>RpcClient</code> with the …\nReturns <code>true</code> if the request is a subscription.\nAdd a middleware layer to the stack.\nReturns the limit on the number of successful polls.\nSet a function to map the response into a different type.\nCreate a new batch request.\nCreates a new <code>RpcClient</code> with the given transport.\nCreate a new poller task.\nCreate a new <code>BatchRequest</code> builder.\nCreate a new <code>RpcClient</code> with an HTTP transport.\nGet a mutable reference to the params of the request.\nReturns the duration between polls.\nBuild a poller that polls a method with the given …\nConnect a pubsub transport, producing an <code>RpcClient</code> with …\nReturns a reference to the request.\nReturns a mutable reference to the request.\nResubscribe to the poller task.\nSend the batch future via its connection.\nSet the channel size.\nSets the channel size for the poller task.\nSet the request to be a non-standard subscription (i.e. not\nSets a limit on the number of successful polls.\nSets the duration between polls.\nSet the subscription status of the request.\nStarts the poller in a new Tokio task, returning a channel …\nCreate a new <code>RpcClient</code> with the given transport and the …\nTries to parse the given string as an HTTP URL.\nTries to parse the given string as an IPC path, returning …\nTries to parse the given string as a WebSocket URL.\nThe URL to connect to.\nSets the channel size for the poller task.\nSets a limit on the number of successful polls.\nSets the poll interval for the client in milliseconds.\nSets the duration between polls.\nConnect a WS transport, producing an <code>RpcClient</code> with the …\nA batch of responses.\nA batch of requests.\nA batch of responses.\nA <code>ErrorPayload</code> that has been partially deserialized, …\nA <code>Response</code> that has been partially deserialized, borrowing …\nA <code>BorrowedResponsePacket</code> is a <code>ResponsePacket</code> that has been …\nA <code>ResponsePayload</code> that has been partially deserialized, …\nA partially deserialized <code>RpcResult</code>, borrowing from the …\nJSON deserialization error.\nContains the error value\nContains the error value\nA JSONRPC-2.0 error object.\nServer returned an error response.\nAn ethereum-style notification, not to be confused with a …\nAn error response payload.\nAn error response payload.\nA JSON-RPC 2.0 ID object. This may be a number, a string, …\nReturned when a local pre-processing step fails. This …\nNull.\nAn Ethereum-style notification.\nServer returned a null response when a non-null response …\nA number.\nContains the success value\nContains the success value\nA <code>Request</code> that has been partially serialized. The request …\nAn item received over an Ethereum pubsub transport. …\nA JSON-RPC 2.0 request object.\n<code>RequestMeta</code> contains the <code>Id</code> and method name of a request.\nA <code>RequestPacket</code> is a <code>SerializedRequest</code> or a batch of …\nA JSONRPC-2.0 response object containing a <code>ResponsePayload</code>.\nA <code>Response</code> to a JSON-RPC request.\nA <code>ResponsePacket</code> is a <code>Response</code> or a batch of responses.\nA JSONRPC-2.0 response payload.\nAn RPC error.\nAn object that can be used as a JSON-RPC parameter and …\nAn object that can be used as a JSON-RPC parameter.\nThe result of a JSON-RPC request.\nAn object that can be used as a JSON-RPC return value.\nJSON serialization error.\nA JSON-RPC 2.0 request object that has been serialized, …\nA single response.\nA single request.\nA single response.\nA string.\nA successful response payload.\nA successful response payload.\nTransport error.\nRpc server returned an unsupported feature.\nReturns the ErrorPayload if the response is an error.\nFallible conversion to the error object.\nReturns the ID as a number, if it is one.\nReturns the ID as a string, if it is one.\nFallible conversion to the successful payload.\nSerialize the request parameters as a boxed <code>RawValue</code>.\nThe error code.\nThe error code.\nThe error data (if any).\nThe error data (if any).\nConsumes the serialized request, returning the underlying …\nAttempt to deserialize the data field.\nAttempt to deserialize the Error payload, transforming …\nAttempt to deserialize the Success payload, transforming …\nDeserialize an Error payload, if possible, transforming …\nDeserialize a Success payload, if possible, transforming …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the request ID.\nThe ID of the request that this response is responding to.\nThe request ID.\nThe ID of the request that this response is responding to.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this borrowed response packet into an owned packet …\nConvert this borrowed error payload into an owned payload …\nConvert this borrowed response payload into an owned …\nConvert this borrowed response to an owned response by …\nClone the request, including the request parameters.\nConsume the serialized request, returning the underlying …\nCheck if the packet is empty.\nReturns <code>true</code> if the response payload is an error.\nReturns <code>true</code> if the response payload is an error.\nReturns <code>true</code> if the response is an error.\nReturns <code>true</code> if the ID is <code>None</code>.\nReturns <code>true</code> if the ID is a number.\nReturns <code>true</code> if the ID is a string.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the response payload is a success.\nReturns <code>true</code> if the response payload is a success.\nReturns <code>true</code> if the response is a success.\nReturns an iterator over the ErrorPayloads in the response.\nGet the number of requests in the packet.\nThe error message (if any).\nThe error message (if any).\nReturns the request metadata (ID and Method).\nThe request metadata (ID and method).\nThe request metadata (ID and method).\nReturns the request method.\nThe method name.\nCreate a new <code>RequestMeta</code>.\nCreate a new <code>Request</code>.\nGet a reference to the serialized request’s params.\nThe request parameters.\nThe request parameters.\nGet the hash of the serialized request’s params.\nThe response payload.\nThe response payload.\nPush a request into the packet.\nFind responses by a list of IDs.\nThe notification payload.\nSerialize the packet as a boxed <code>RawValue</code>.\nSerialize the request, including the request parameters.\nReturns the serialized request.\nIndicates that the request is a non-standard subscription …\nIndicates that the request is a non-standard subscription …\nMark the request as a non-standard subscription (i.e. not …\nSetter for <code>is_subscription</code>. Indicates to RPC clients that …\nSetter for <code>is_subscription</code>. Indicates to RPC clients that …\nThe subscription ID.\nGet the request IDs of all subscription requests in the …\nTake the serialized request, consuming the …\nTransform a transport response into an <code>RpcResult</code>, …\nTransform a transport outcome into an <code>RpcResult</code>, …\nAttempt to deserialize the params, borrowing from the …\nDeserialize the error’s <code>data</code> field, borrowing from the …\nAttempt to deserialize the <code>Ok(_)</code> variant of an <code>RpcResult</code>.\nAttempt to deserialize the error payload, borrowing from …\nAttempt to deserialize the error payload, borrowing from …\nAttempt to deserialize the params.\nAttempt to deserialize the success payload, borrowing from …\nAttempt to deserialize the success payload, borrowing from …\nCreate a new empty packet with the given capacity.\nThe underlying serde_json error.\nFor deser errors, the text that failed to deserialize.\nInformation about the forked network. See …\nRepresents the params to set forking which can take …\nAnvil equivalent of <code>hardhat_metadata</code>. Metadata about the …\nAdditional <code>evm_mine</code> options\nThe current block environment of the node.\nThe node’s fork configuration.\nAnvil equivalent of <code>node_info</code>.\nThe options for mining\nThe timestamp the block should be mined with\nBase fee of the current block\nThe block number to fork from.\nChain id of the node.\nChain id of the node.\nChain id of the node.\nclient version\nThe current block hash\nThe current block number\nThe current block timestamp\nInfo about the node’s block environment\nBlock hash of the forked chain\nBlock number of the forked network\nBlock number of the forked chain\nInfo about the node’s fork configuration\nRetry backoff for requests\nURL of the forked network\nForked network info\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigured block gas limit\nConfigured gas price\nThe enabled hardfork\nUnique instance id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe URL of the JSON-RPC endpoint to fork from.\nLatest block hash\nLatest block number\nSnapshots of the chain\nHow transactions are ordered for mining\nIf <code>blocks</code> is given, it will mine exactly blocks number of …\nThe timestamp the block should be mined with\nBLS public key type\nBLS signature type\nConstants used in the Beacon API.\nBeacon API events support. Support for the Beacon API …\nTypes and functions related to the beacon block header. …\nTypes and functions related to the beacon block payload. …\nTypes and functions related to the relay mechanism. …\nTypes and functions related to the sidecar.\nTypes and functions related to withdrawals.\nThe Domain Separation Tag for hash_to_point in Ethereum …\nThe number of bytes in a BLS12-381 public key.\nThe number of bytes in a BLS12-381 secret key.\nThe number of bytes in a BLS12-381 signature.\nThe topic for attestation events.\nEvent for the <code>Attestation</code> topic of the beacon API node …\nTopic variant for the eventstream API\nThe topic for blob sidecar events.\nEvent for the <code>BlobSidecar</code> topic of the beacon API node …\nThe topic for block events.\nEvent for the <code>Block</code> topic of the beacon API node event …\nThe topic for BLS to execution change events.\nEvent for the <code>BlsToExecutionChange</code> topic of the beacon API …\nRepresents a BLS to Execution change message in the beacon …\nThe topic for chain reorganization events.\nEvent for the <code>ChainReorg</code> topic of the beacon API node …\nRepresents a contribution in the beacon chain.\nThe topic for contribution and proof events.\nEvent for the <code>ContributionAndProof</code> topic of the beacon API …\nRepresents a signed contribution and proof message in the …\nThe topic for finalized checkpoint events.\nEvent for the <code>Deposit</code> topic of the beacon API node event …\nThe topic for head events.\nEvent for the <code>Head</code> topic of the beacon API node event …\nThe topic for light client finality update events.\nEvent for the <code>LightClientFinalityUpdate</code> topic of the …\nThe topic for light client optimistic update events.\nEvent for the <code>LightClientOptimisticUpdate</code> topic of the …\nThe topic for payload attributes events.\nData of the event that contains the payload attributes\nEvent for the <code>payload_attributes</code> topic of the beacon API …\nThe topic for voluntary exit events.\nEvent for the <code>VoluntaryExit</code> topic of the beacon API node …\nRepresents a voluntary exit message in the beacon chain.\nThe aggregation bits of the attestation.\nThe aggregation bits.\nThe aggregator index, serialized as a string.\nModule for handling attestation-related functionality and …\nReturns the payload attributes\nThe beacon block root.\nThe block associated with the event.\nThe received block.\nThe block associated with the event.\nThe root of the block associated with the event.\nThe contribution.\nThe current duty dependent root.\nWrapped data of the event.\nThe attestation data.\nThe data associated with the event.\nThe data associated with the event.\nThe depth of the reorganization.\nThe epoch of the voluntary exit, serialized as a string.\nThe epoch of the event, serialized as a string.\nThe epoch of the event, serialized as a string.\nA flag indicating if an epoch transition occurred.\nA flag indicating optimistic execution.\nA flag indicating optimistic execution.\nA flag indicating optimistic execution.\nA flag indicating optimistic execution.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe BLS public key of the change message.\nThe index of the event, serialized as a string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe KZG commitment of the event.\nModule for handling light client finality-related …\nModule for handling light client optimistic-related …\nThe voluntary exit message.\nThe BLS to execution change message.\nThe contribution and proof message.\nThe new head block root.\nThe new head state.\nThe old head block root.\nThe old head state.\nthe execution block hash of the parent block.\nthe execution block number of the parent block.\nthe beacon block root of the parent block to be built upon.\nBeacon API encoding of <code>PayloadAttributesV&lt;N&gt;</code> as defined by …\nThe previous duty dependent root.\nThe slot at which a block using these payload attributes …\nThe execution block number of the parent block. the …\nReturns the identifier value for the eventstream query\nThe selection proof.\nThe signature of the attestation.\nThe signature of the voluntary exit.\nThe signature of the BLS to execution change.\nThe signature of the message.\nThe signature.\nThe slot number of the event, serialized as a string.\nThe slot number of the event, serialized as a string.\nThe slot number of the event, serialized as a string.\nThe slot number of the contribution, serialized as a …\nThe slot number of the event, serialized as a string.\nThe state associated with the event.\nThe state associated with the event.\nThe subcommittee index, serialized as a string.\nThe execution address after the change.\nThe validator index of the voluntary exit, serialized as a …\nThe validator index of the change message, serialized as a …\nthe identifier of the beacon hard fork at <code>proposal_slot</code>, …\nThe version of the event.\nThe version of the event.\nThe versioned hash of the event.\nContains data related to an attestation, including slot, …\nRepresents the source checkpoint of an attestation.\nRepresents the target checkpoint of an attestation.\nThe root of the beacon block being attested to.\nThe epoch number of the source checkpoint, serialized as a …\nThe epoch number of the target checkpoint, serialized as a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe committee index of the attestation, serialized as a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe root of the source checkpoint.\nThe root of the target checkpoint.\nThe slot number in which the attestation was included, …\nThe source checkpoint of the attestation.\nThe target checkpoint of the attestation.\nContains the <code>Beacon</code> header that was attested.\nRepresents the header of a beacon block.\nRepresents the header of a finalized beacon block.\nContains the <code>Beacon2</code> header that was finalized.\nContains finality data for the light client, including …\nContains the sync committee bits and signature.\nThe attested header containing a <code>Beacon</code>.\nThe <code>Beacon</code> object representing the block header.\nThe <code>Beacon2</code> object representing the block header.\nThe root of the block body.\nThe root of the block body.\nThe Merkle branch proof for the finality.\nThe finalized header containing a <code>Beacon2</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe root of the parent block.\nThe root of the parent block.\nThe index of the proposer of the beacon block, serialized …\nThe index of the proposer of the beacon block, serialized …\nThe slot in which the signature was included, serialized …\nThe slot number of the beacon block, serialized as a …\nThe slot number of the beacon block, serialized as a …\nThe state root after the block is processed.\nThe state root after the block is processed.\nThe sync aggregate which includes the sync committee bits …\nThe bits representing the sync committee’s participation.\nThe aggregated signature of the sync committee.\nContains the <code>BeaconBlockHeader</code> that was attested.\nContains optimistic data for the light client, including …\nContains the sync committee bits and signature.\nThe attested header containing a <code>BeaconBlockHeader</code>.\nThe <code>BeaconBlockHeader</code> object from the CL spec.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe slot in which the signature was included, serialized …\nThe sync aggregate which includes the sync committee bits …\nThe bits representing the sync committee’s participation.\nThe aggregated signature of the sync committee.\nThe header of a beacon block.\nBeaconBlockHeader with a signature.\nContainer type for a beacon block header.\nThe response to a request for a <strong>single</strong> beacon block …\nThe response to a request for beacon block headers: …\nThe tree hash merkle root of the BeaconBlockBody for the …\nWhether the block is part of the canonical chain\nContainer for the header data.\nContainer for the header data.\nTrue if the response references an unverified execution …\nTrue if the response references an unverified execution …\nTrue if the response references the finalized history of …\nTrue if the response references the finalized history of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe <code>SignedBeaconBlockHeader</code> object envelope from the CL …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>BeaconBlockHeader</code> object from the CL spec.\nThe signing merkle root of the parent BeaconBlock.\nIndex of validator in validator registry.\nroot hash of the block\nThe signature associated with the <code>BeaconBlockHeader</code>.\nThe slot to which this block corresponds.\nThe tree hash merkle root of the BeaconState for the …\nThe header of the execution payload.\nData structure representing the header data of an …\nMessage structure within the header of an execution …\nResponse object of GET …\nThe base fee per gas of the execution payload, represented …\nA helper module for serializing and deserializing the …\nA helper module for serializing and deserializing optimism …\nModule providing serialization and deserialization support …\nA helper serde module to convert from/to the Beacon API …\nA helper serde module to convert from/to the Beacon API …\nA helper serde module to convert from/to the Beacon API …\nA helper serde module to convert from/to the Beacon API …\nThe block hash of the execution payload.\nThe block number of the execution payload, represented as …\nThe data associated with the execution payload header.\nThe extra data of the execution payload.\nThe fee recipient address of the execution payload.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe gas limit of the execution payload, represented as a …\nThe gas used by the execution payload, represented as a <code>u64</code>…\nThe header of the execution payload.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe logs bloom filter of the execution payload.\nThe message of the execution payload header.\nThe parent hash of the execution payload.\nThe previous Randao value of the execution payload.\nThe public key associated with the execution payload.\nThe receipts root of the execution payload.\nThe signature of the execution payload header.\nThe state root of the execution payload.\nThe timestamp of the execution payload, represented as a …\nThe transactions root of the execution payload.\nThe value of the execution payload, represented as a <code>U256</code>.\nThe version of the response.\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nSort result by ascending value (lowest value first)\nRepresents public information about a block sent by a …\nA Request to validate a SubmitBlockRequest …\nA Request to validate a SubmitBlockRequest …\nQuery for the GET …\nSort result by descending value (highest value first)\nOrderBy : Sort results in either ascending or descending …\nQuery for the GET …\nSubmission for the <code>/relay/v1/builder/blocks</code> endpoint …\nSubmission for the <code>/relay/v1/builder/blocks</code> endpoint …\nSubmission for the <code>/relay/v1/builder/blocks</code> endpoint …\nSignedBidTrace is a BidTrace with a signature\nSubmitBlockRequest is the request from the builder to …\nRepresents an entry of the <code>/relay/v1/builder/validators</code> …\nDetails of a validator registration.\nRepresents the message of a validator registration.\nThe Deneb block bundle for this bid.\nSets the specific blockhash\nSets the specific blockhash\nThe hash of the block.\nSearch for a specific blockhash\nSearch for a specific blockhash\nSets the specific EL block number\nSets the specific EL block number\nSearch for a specific EL block number\nSearch for a specific EL block number\nSets the builder public key\nSets the specific builder public key\nThe public key of the builder.\nFilter results by a builder public key\nSearch for a specific builder public key.\nDetails of the validator registration.\nError types for the relay.\nThe execution payload for the submission.\nThe execution payload for the submission.\nThe execution payload for the submission.\nThe execution payload for the block submission.\nThe fee recipient’s address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe gas limit for the registration.\nThe gas limit associated with the block.\nThe gas used within the block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the maximum number of entries (200 max)\nSets the maximum number of entries (200 max)\nMaximum number of entries (200 max)\nMaximum number of entries (200 max)\nThe registration message.\nThe BidTrace message associated with the submission.\nThe BidTrace message associated with the submission.\nThe BidTrace message associated with the submission.\nThe BidTrace message associated with the submission.\nThe BidTrace message associated with the block submission.\nConfigures how to order results\nHow to order results\nOrder results by ascending value (lowest value first)\nOrder results by descending value (highest value first)\nThe parent hash of the block.\nThe recipient of the proposer’s fee.\nSets the proposer public key\nThe public key of the proposer.\nFilter results by a proposer public key\nThe public key of the validator.\nThe registered gas limit for the validation request.\nThe registered gas limit for the validation request.\nThe SubmitBlockRequest data to be validated.\nThe SubmitBlockRequest data to be validated.\nThe signature for the registration.\nThe signature associated with the submission.\nThe signature associated with the submission.\nThe signature associated with the submission.\nThe signature associated with the submission.\nThe signature associated with the block submission.\nSets the specific slot\nSets the specific slot\nThe slot number for the validator entry.\nThe slot associated with the block.\nA specific slot\nA specific slot\nThe timestamp of the registration.\nThe index of the validator.\nThe value associated with the block.\nThe withdrawals root for the validation request.\nThrown if block hash mismatches\nThrown if block hash mismatches\nThrown if block hash mismatches\nThrown if parent hash mismatches\nError thrown by the <code>validateBuilderSubmission</code> endpoints if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe actual parent hash\nThe actual block hash\nThe actual gas limit\nThe actual gas used\nThe expected parent hash\nThe expected block hash\nThe expected gas limit\nThe expected gas used\nBundle of blobs for a given block\nIndividual Blob data that belongs to a 4844 transaction.\nIntermediate type for BlobTransactionSidecar matching\nBlob data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBlob index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe internal iterator over <code>BlobData</code>.\nThe blob’s commitment\nThe blob’s inclusion proofs\nThe blob’s proof\nCreates a new <code>SidecarIterator</code> from a given <code>BeaconBlobBundle</code>…\nReturns a BlobTransactionSidecar of len num_hashes.\nThe block header containing the blob\nA helper serde module to convert from/to the Beacon API …\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nACCEPTED is returned by the engine API in the following …\nBesu\nInvalid payload base fee.\nInvalid payload blob gas used.\nThis includes all bundled blob related data of an executed …\nInvalid payload block hash.\nThe list of all supported Engine capabilities available …\nFields introduced in <code>engine_newPayloadV3</code> that are not …\nClaims in JWT are used to represent a set of information …\nThis enum defines a standard for specifying a client with …\nContains information which identifies a client …\nAn error occurred while creating a directory to store the …\nEncountered decoding error.\nThis structure maps onto the deposit object from EIP-6110.\nErigon\nEthereumJS\nContains the error value\nInvalid payload excess blob gas.\nAn execution payload, which can be either …\nThe execution payload body response that allows for <code>null</code> …\nThis structure contains a body of an execution payload.\nThis structure maps for the return value of …\nThis structure maps for the return value of …\nThis structure maps for the return value of …\nThis represents the <code>executionPayload</code> field in the return …\nThis is the input to <code>engine_newPayloadV2</code>, which may or may …\nThis structure maps on the ExecutionPayload structure of …\nThis structure maps on the ExecutionPayloadV2 structure of …\nThis structure maps on the ExecutionPayloadV3 structure of …\nThis structure maps on the ExecutionPayloadV4 structure of …\nInvalid payload extra data.\nRepresents possible variants of a processed forkchoice …\nThis structure encapsulates the fork choice state\nA standalone forkchoice update errors for RPC.\nRepresents a successfully <em>processed</em> forkchoice state …\nGeth, go-ethereum\nGrandine\ninvalid forkchoice state error code.\ninvalid forkchoice state error message.\ninvalid payload attributes error code.\ninvalid payload attributes error message.\nINVALID is returned by the engine API in the following …\nThrown when a new payload contains a wrong block number.\nThe “iat” (issued-at) claim in the JWT is not within …\nThe JWT key length provided is invalid, expecting a …\nThe provided signature in the JWT is invalid.\nThe given ForkchoiceState is invalid or inconsistent.\nThrown when a new payload contains a wrong state root\nExpected blob versioned hashes do not match the given …\nAn error occurred during JWT decoding.\nErrors returned by the <code>JwtSecret</code>\nValue-object holding a reference to a hex-encoded 256-bit …\nAn error encountered while decoding the hexadecimal string …\nLighthouse\nLodestar\nThrown when a forkchoice update’s head links to a …\nA container type for CancunPayloadFields that may or may …\nThe Authorization header is missing or invalid in the …\nNimbus\nNethermind\nContains the success value\nThis structure maps for the return value of …\nThis structure maps for the return value of …\nOptimism Payload Attributes\nPrysm\nThis structure contains the attributes required to …\nError that can occur when handling payloads.\nAnd 8-byte identifier for an execution payload.\nThis structure contains the result of processing a payload …\nRepresents the status response of a payload.\nVarious errors that can occur when validating a payload or …\nblob gas used missing in post-cancun payload.\nblob transactions missing in post-cancun payload.\nexcess blob gas missing in post-cancun payload.\ncancun fields missing in post-cancun payload.\nwithdrawals missing in post-shanghai payload.\nblob gas used present in pre-cancun payload.\nblob transactions present in pre-cancun payload.\nexcess blob gas present in pre-cancun payload.\ncancun fields present in pre-cancun payload.\nwithdrawals present in pre-shanghai payload.\nReth\nAn error occurred while reading the JWT from a file.\nSYNCING is returned by the engine API in the following …\nTeku\nThis structure contains configurable settings of the …\nThrown when a forkchoice final block does not exist in the …\nThe signature algorithm used in the JWT is not supported. …\nThe forkchoice update has been processed, but the …\nV1 payload\nV1 payload\nV2 payload\nV2 payload\nV3 payload\nV4 payload\nVALID is returned by the engine API in the following calls:\nRepresents an execution layer triggerable withdrawal …\nAn error occurred while writing the JWT to a file.\nAmount of ether deposited in gwei\nAmount of withdrawn ether in gwei.\nReturns a reference to the inner fields.\nReturns the client identifier as str.\nReturns the string representation of the payload status.\nReturns a reference to the V1 payload.\nReturns a mutable reference to the V1 payload.\nReturns a reference to the V2 payload, if any.\nReturns a mutable reference to the V2 payload, if any.\nReturns a reference to the V2 payload, if any.\nReturns a mutable reference to the V2 payload, if any.\nReturns a reference to the V4 payload, if any.\nReturns a mutable reference to the V4 payload, if any.\nThe base fee per gas of the block.\nArray of hex <code>u64</code> representing blob gas used, enabled with …\nAll blobs in the bundle.\nThe blobs, commitments, and proofs associated with the …\nThe blobs, commitments, and proofs associated with the …\nThe blobs, commitments, and proofs associated with the …\nThe blobs, commitments, and proofs associated with the …\nReturns the block hash for the payload.\nThe block hash of the block.\nReturns the block number for this payload.\nThe block number.\nThe expected value to be received by the feeRecipient in …\nThe expected value to be received by the feeRecipient in …\nThe expected value to be received by the feeRecipient in …\nThe expected value to be received by the feeRecipient in …\nThe expected value to be received by the feeRecipient in …\nReturns the human readable client name for the given code.\nClient code, e.g. GE for Geth\nfirst four bytes of the latest commit hash of this build …\nAll commitments in the bundle.\nBy default, the <code>iat</code> claim is set to the current timestamp.\nArray of deposit requests.\nEncode the header and claims given and sign the payload …\nArray of hex<code>u64</code> representing excess blob gas, enabled with …\nExecution payload V3\nExecution payload V4\nThe V1 execution payload\nExecution payload, which could be either V1 or V2\nExecution payload V3\nExecution payload V4\nThe “exp” (expiration time) claim identifies the …\nThe extra data of the block.\nThe fee recipient of the block.\nHash of finalized block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries to load a <code>JwtSecret</code> from the specified file path. …\nCreates an instance of <code>JwtSecret</code>.\nCreates a new ForkchoiceUpdated with the given …\nCreates a new payload status from the given status.\nIf set, this sets the exact gas limit the block produced …\nThe gas limit of the block.\nThe gas used of the block.\nHash of the head block.\nThe “iat” value MUST be a number containing a …\nDeposit index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>MaybeCancunPayloadFields</code> with the given …\nConsumes the payload and returns the V1 payload.\nReturns the inner ExecutionPayloadV1\nReturns the ExecutionPayload for the <code>engine_getPayloadV1</code> …\nReturns <code>true</code> if the error is caused by a block hash …\nReturns true if the payload status is invalid.\nReturns true if the payload status is invalid.\nReturns true if the payload status is invalid.\nReturns <code>true</code> if the error is caused by invalid block …\nReturns true if the payload status is syncing.\nReturns true if the payload status is syncing.\nReturns true if the payload status is syncing.\nReturns true if the payload status is valid.\nReturns true if the payload status is valid.\nReturns true if the payload status is valid.\nChecks if the <code>iat</code> claim is within the allowed range from …\nHash of the most recent valid block in the branch defined …\nThe logs bloom of the block.\nSets the latest valid hash if it’s not None.\nHuman-readable name of the client, e.g. Lighthouse or …\nCreates a new ForkchoiceUpdated with the given …\nCreates a new payload id from the given identifier.\nCreates a new blob bundle from the given sidecars.\nInitializes a new payload status.\nIf true, the no transactions are taken out of the tx-pool, …\nReturns a new <code>MaybeCancunPayloadFields</code> with no cancun …\nReturns the parent beacon block root, if any.\nThe parent beacon block root.\nEcotone parent beacon block root\nEcotone parent beacon block root\nRoot of the parent beacon block enabled with V3.\nReturns the parent hash for the payload.\nThe parent hash of the block.\nPayload types.\nThe payload attributes\nThe identifier of the payload build process that was …\nInner V1 payload\nInner V2 payload\nInner V3 payload\nRepresents the outcome of the validation of the payload, …\nReturns the sidecar from the bundle\nReturns the prev randao for this payload.\nThe previous randao of the block.\nValue for the <code>prevRandao</code> field of the new payload\nAll proofs in the bundle.\nValidator public key\nGenerates a random <code>JwtSecret</code> containing a hex-encoded 256 …\nThe receipts root of the block.\nHash of the safe block.\nIntroduced in V3, this represents a suggestion from the …\nIntroduced in V3, this represents a suggestion from the …\nIntroduced in V3, this represents a suggestion from the …\nIntroduced in V3, this represents a suggestion from the …\nDeposit signature\nAddress of the source of the exit.\nThe state root of the block.\nThe status of the payload.\nSuggested value for the <code>feeRecipient</code> field of the new …\nTake <code>len</code> blob data from the bundle.\nMaps on TERMINAL_BLOCK_HASH parameter of EIP-3675\nMaps on TERMINAL_BLOCK_NUMBER parameter of EIP-3675\nMaps on the TERMINAL_TOTAL_DIFFICULTY parameter of EIP-3675\nReturns the timestamp for the execution payload.\nReturns the timestamp for the payload.\nReturns the timestamp for the payload.\nReturns the timestamp for the payload.\nThe timestamp of the block.\nValue for the <code>timestamp</code> field of the new payload\nTransactions is a field for rollups: the transactions list …\nThe transactions of the block.\nEnveloped encoded transactions.\nCreates a random <code>JwtSecret</code> and tries to store it at the …\nValidates a JWT token along the following rules:\nReturns the validation error if the payload status is …\nValidator public key.\nThe version string of the current implementation e.g. …\nReturns the blob versioned hashes, if any.\nThe expected blob versioned hashes.\nCreates a new instance of <code>Claims</code> with the current …\nSets the latest valid hash of the payload status.\nSets the latest valid hash.\nSets the payload id of the created payload job.\nWithdrawal credentials\nArray of execution layer triggerable withdrawal requests.\nReturns the withdrawals for the payload.\nReturns the withdrawals for the payload.\nReturns the withdrawals for the payload.\nThe payload withdrawals\nArray of <code>Withdrawal</code> enabled with V2 See …\nAll withdrawals in the block.\nArray of <code>Withdrawal</code> enabled with V2 See …\nThe path related to the operation.\nThe path related to the operation.\nThe path related to the operation.\nThe source <code>io::Error</code>.\nThe source <code>io::Error</code>.\nThe source <code>io::Error</code>.\nThe block hash provided with the payload.\nThe block hash computed from the payload.\nThe error message for the invalid payload.\nThe state root of the payload that we computed locally.\nThe state root of the payload we received from remote (CL)\nACCEPTED is returned by the engine API in the following …\nInvalid payload base fee.\nInvalid payload blob gas used.\nThis includes all bundled blob related data of an executed …\nInvalid payload block hash.\nEncountered decoding error.\nInvalid payload excess blob gas.\nAn execution payload, which can be either …\nThe execution payload body response that allows for <code>null</code> …\nThis structure contains a body of an execution payload.\nThis structure maps for the return value of …\nThis structure maps for the return value of …\nThis structure maps for the return value of …\nThis represents the <code>executionPayload</code> field in the return …\nThis is the input to <code>engine_newPayloadV2</code>, which may or may …\nThis structure maps on the ExecutionPayload structure of …\nThis structure maps on the ExecutionPayloadV2 structure of …\nThis structure maps on the ExecutionPayloadV3 structure of …\nThis structure maps on the ExecutionPayloadV4 structure of …\nInvalid payload extra data.\nINVALID is returned by the engine API in the following …\nThrown when a new payload contains a wrong block number.\nThrown when a new payload contains a wrong state root\nExpected blob versioned hashes do not match the given …\nThrown when a forkchoice update’s head links to a …\nThis structure contains the attributes required to …\nError that can occur when handling payloads.\nAnd 8-byte identifier for an execution payload.\nThis structure contains the result of processing a payload …\nRepresents the status response of a payload.\nVarious errors that can occur when validating a payload or …\nblob gas used missing in post-cancun payload.\nblob transactions missing in post-cancun payload.\nexcess blob gas missing in post-cancun payload.\ncancun fields missing in post-cancun payload.\nwithdrawals missing in post-shanghai payload.\nblob gas used present in pre-cancun payload.\nblob transactions present in pre-cancun payload.\nexcess blob gas present in pre-cancun payload.\ncancun fields present in pre-cancun payload.\nwithdrawals present in pre-shanghai payload.\nSYNCING is returned by the engine API in the following …\nV1 payload\nV1 payload\nV2 payload\nV2 payload\nV3 payload\nV4 payload\nVALID is returned by the engine API in the following calls:\nThe base fee per gas of the block.\nArray of hex <code>u64</code> representing blob gas used, enabled with …\nAll blobs in the bundle.\nThe blobs, commitments, and proofs associated with the …\nThe blobs, commitments, and proofs associated with the …\nThe block hash of the block.\nThe block number.\nThe expected value to be received by the feeRecipient in …\nThe expected value to be received by the feeRecipient in …\nThe expected value to be received by the feeRecipient in …\nAll commitments in the bundle.\nArray of deposit requests.\nArray of hex<code>u64</code> representing excess blob gas, enabled with …\nThe V1 execution payload\nExecution payload, which could be either V1 or V2\nExecution payload V3\nExecution payload V4\nThe extra data of the block.\nThe fee recipient of the block.\nThe gas limit of the block.\nThe gas used of the block.\nHash of the most recent valid block in the branch defined …\nThe logs bloom of the block.\nRoot of the parent beacon block enabled with V3.\nThe parent hash of the block.\nInner V1 payload\nInner V2 payload\nInner V3 payload\nThe previous randao of the block.\nValue for the <code>prevRandao</code> field of the new payload\nAll proofs in the bundle.\nThe receipts root of the block.\nIntroduced in V3, this represents a suggestion from the …\nIntroduced in V3, this represents a suggestion from the …\nThe state root of the block.\nThe status of the payload.\nSuggested value for the <code>feeRecipient</code> field of the new …\nThe timestamp of the block.\nValue for the <code>timestamp</code> field of the new payload\nThe transactions of the block.\nEnveloped encoded transactions.\nArray of execution layer triggerable withdrawal requests.\nThe payload withdrawals\nArray of <code>Withdrawal</code> enabled with V2 See …\nAll withdrawals in the block.\nArray of <code>Withdrawal</code> enabled with V2 See …\nThe block hash provided with the payload.\nThe block hash computed from the payload.\nThe error message for the invalid payload.\nThe state root of the payload that we computed locally.\nThe state root of the payload we received from remote (CL)\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\nAccess list with gas used appended.\nAccount information.\nReceipt envelope, as defined in EIP-2718.\nAlias for a catch-all receipt type.\nA vector of values\nThe hash of the block if the filter only targets a single …\nBase fee per gas integer conversion error\nBlob gas used integer conversion error\nThis represents a set of blobs, and its corresponding …\nBlock representation\nError that can occur when converting other types to blocks\nEither a block hash <em>or</em> a block number\nA Block Identifier. …\nBlock number and hash.\nA block Number (or tag - “latest”, “earliest”, “…\nBlockOverrides is a set of header fields to override.\nAn iterator over the transaction hashes of a block.\nAn Iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of Block should be …\nHelper type to represent a bloom filter used for matching …\nBundle of transactions\nChain status.\nError variants when converting from crate::Transaction to …\nResponse for EIP-1186 account proof <code>eth_getProof</code>\nData structure with proof for one single storage-entry\nEarliest block (genesis)\nReceipt envelope with type flag 2, containing a EIP-1559 …\nError during EIP-2718 transaction coding.\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 2, containing a EIP-4844 …\nEmpty result.\nCallResponse for eth_callMany\nExcess blob gas integer conversion error\nExtended account information (used by <code>parity_allAccountInfo</code>…\nResponse type for <code>eth_feeHistory</code>\nFilter for logs.\nRepresents the target range of blocks for the filter\nResponse of the <code>eth_getFilterChanges</code> RPC.\nOwned equivalent of a <code>SubscriptionId</code>\nFilterSet is a set of values that will be used to filter …\nSupport for matching Filters\nFinalized block accepted as canonical\nBlock number and hash of the forked block.\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nReceive full details of the transactions.\nGas limit integer conversion error\nGas used integer conversion error\nA block hash and an optional bool that defines if it’s …\nA block hash\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nNew hashes (block or transactions).\nReceive only the hashes of the transactions.\nBlock header representation.\nPeer count as hex\nA hex encoded or decimal index that’s intended to be …\nInfo when syncing\nA transaction failed sender recovery\nInvalid signature\nLatest block\nReceipt envelope with no type flag.\nEthereum Log emitted by a transaction\nNew logs.\nMissing <code>accessList</code> field for EIP-2930 transaction.\nMissing <code>blobVersionedHashes</code> field for EIP-4844 transaction.\nMissing block number\nMissing <code>chainId</code> field for EIP-1559 transaction.\nMissing full transactions required for block decoding\nMissing <code>gasPrice</code> field for Legacy transaction.\nMissing <code>maxFeePerBlobGas</code> field for EIP-1559 transaction.\nMissing <code>maxFeePerGas</code> field for EIP-1559 transaction.\nMissing <code>maxPriorityFeePerGas</code> field for EIP-1559 …\nMissing signature for transaction.\nMissing <code>to</code> field for EIP-4844 transaction.\nMissing y parity in signature.\nThis includes general information about a running node, …\nNot syncing\nNumeric id\nBlock by number from canon chain\nA block number\nA block number\nPeer count as integer\nAdditional fields for Optimism transaction receipts\nType that represents the signature parity byte, meant for …\nNumber of peers connected to.\nPeer Ethereum protocol information\nPeer connection information\nPeer network information\nPeer protocols information\nPeers info\nPending block (not yet part of the blockchain)\nSpecifies the kind of information you wish to receive from …\nPeer PIP protocol information\nRepresents a range of blocks with optional from and to …\nEthereum Log\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\naccount derived from a signature as well as information …\nValue representation with additional info\nA Block representation that allows to include additional …\nHeader representation with additional info.\nA raw block failed to decode\nA block hash which may have a boolean requireCanonical …\nSafe head block\nContainer type for all signature fields in RPC\n<code>alloy_primitives::SignatureError</code>.\nState context for callMany\nString id\nSyncing info\nSync status\nA single topic\nTransaction object used in RPC\nAdditional fields in the context of a block that contains …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nTransaction receipt\nRepresents <em>all</em> transaction requests to/from RPC.\nPropagation statistics for pending transaction.\nNew transactions.\nInternal struct to calculate reward percentiles\nSpecial case for uncle response.\nA single value\nUnion type for representing a single value or a vector of …\nWrapper allowing to catch all fields missing on the inner …\nWithdrawal represents a validator withdrawal from the …\nThe result of an <code>eth_getWork</code> request\nSets the access list for the transaction.\nGet the EIP-2930 access list for the transaction.\nList with accounts accessed during transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nEIP2930\nThe account proof.\nNumber of active peers\nSets the inner filter object\nGetter for the address field. Shortcut for …\nAccount addresses that would be loaded at the start of …\nThe account address.\naddress of the recovered account\nTarget address for withdrawn ether.\nAddress\nContract that emitted this log.\nReturns the BloomFilter for the given address\nTypes for the <code>admin</code> API.\nValue of the withdrawal in gwei.\nFallibly cast to a slice of hashes.\nReturns the range (<code>fromBlock</code>, <code>toBlock</code>) if this is a range …\nFallibly cast to a slice of transactions.\nPins the block hash for the filter\nThe account balance.\nOverrides the basefee of the block.\nBase fee of the block.\nAn array of block base fees per blob gas. This includes …\nBase fee per unit of gas (if past London)\nAn array of block base fees per gas. This includes the …\nReturns the blob fee for <em>this</em> block according to the …\nThe price paid by the eip-4844 transaction per blob gas.\nBlob gas used\nBlob gas used by the eip-4844 transaction\nAn array of block blob gas used ratios. These are …\nBlob versioned hashes for EIP-4844 transactions.\nContains the blob hashes for eip-4844 transactions.\nThe blob data.\nDescribes the gap in the blockchain, if there is one: …\nA block hash\nA dictionary that maps blockNumber to a user-defined hash. …\nHash of the block the transaction that emitted this log …\nHash of the block.\nHash of the block this transaction was included within.\nBlock hash\nBlock Number\nNumber of the block the transaction that emitted this log …\nNumber of the block.\nNumber of the block this transaction was included within.\nBlock number\nFilter block options, specifying on which blocks the …\nBlock overrides to apply\nThe timestamp of the block as proposed in: …\nBuild an <code>TypedTransaction</code>\nReturn the tx type this request can be built as. Computed …\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nCalculates the address that will be created by the …\nCapabilities\nThe chain ID for the transaction.\nThe chain id of the transaction, if any.\nThe hash of the code of the account.\nOverrides the coinbase address of the block.\nThe blob commitments.\nCheck if all necessary keys are present to build a 1559 …\nCheck if all necessary keys are present to build a 2930 …\nCheck if all necessary keys are present to build a 4844 …\nCheck if all necessary keys are present to build a legacy …\nNumber of connected peers\nContract address created, or None if not a deployment.\nConverts <code>self</code> into <code>Hashes</code>.\nGas used\nCurrent block\nGetter for the data field. Shortcut for <code>log.inner.data</code>.\nArbitrary length data.\nTransaction data\nDeposit nonce for deposit transactions post-regolith\nDeposit receipt version for deposit transactions …\nDeserializes a boolean value into …\nDifficulty\nOverrides the difficulty of the block.\nPeer total difficulty if known\nPeer total difficulty\nThe price paid post-execution by the transaction (i.e. …\nThe enode URL of the connected node.\nThe ENR of the running client.\nReturns the value if present, otherwise returns the error.\nCommonly used errors for the <code>eth_</code> namespace.\neth_call output (if error)\nEthereum protocol information\nGiven the event signature in string form, it hashes it and …\nSets event_signature(topic0) (the event name for …\nHashes all event signatures and sets them as array to …\nExcess blob gas\nExtra data\nAdditional fields that should be serialized into the <code>Block</code> …\nAdditional fields that should be serialized into the <code>Block</code> …\nAdditional fields that should be serialized into the <code>Block</code> …\nReturns the configured fee cap, if any.\nThe original filter, if any\nReturns <code>true</code> if the filter matches the given address.\nReturns <code>true</code> if the filter matches the given block hash.\nReturns true if the filter matches the given block number\nReturns <code>true</code> if the log matches the given topics\nBlock no this transaction was first seen.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from</code> field in the call to the provided address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAddress of the sender\nThe address of the transaction author.\nSender\nSets the from block number\nThe gas limit for the transaction.\nGas amount\nSets the gas limit for the transaction.\nGas Limit\nOverrides the gas limit of the block.\nThe legacy gas price.\nGas Price\nEstimated gas used with access list.\nGas Used\nGas used by the transaction\nGas used by this transaction alone.\nAn array of block gas used ratios. These are calculated as …\nReturns the numeric value of the <code>fromBlock</code> field\nReturns the <code>toBlock</code> value, if any\nReturns the numeric value of the <code>fromBlock</code> field\nGets invalid fields for EIP-1559 transaction type\nGets invalid fields for all transaction types\nReturns the <code>fromBlock</code> value, if any\nReturns the numeric value of the <code>toBlock</code> field\nReturns true if at least one topic is set\nBlock hash\nBlock hash\nHash of the block\nHash of the transaction.\nHash\nReturns an iterator over references to the transaction …\nReturns an iterator over mutable references to the …\nSHA3 of peer best block hash\nSHA3 of peer best block hash\nHeader of the block.\nHighest block seen so far\nUnique node identifier.\nPublic node id\nMonotonically increasing identifier issued by consensus …\nIndex of the transaction in the block\nStandard value.\nStandard value.\nThe inner struct.\nThe receipt envelope.\nStandard value.\nConsensus log object\nThe receipt envelope, which contains the consensus receipt …\nThe inner struct.\nSets the input data for the transaction.\nReturns the optional input data.\nTransaction data.\nTransaction data\nData\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a block with Tx hashes into a full block.\nConverts <code>self</code> into <code>Hashes</code>.\nConsumes the type and returns the optional input data.\nConvert a generic type <code>WithOtherFields&lt;T&gt;</code> to a …\nThe IP address of the connected node.\nWhether the block has no transactions.\nReturns whether the filter is empty\nReturns true if the enum variant is used for full …\nCheck if the enum variant is used for hashes.\nReturns true if this is a range filter and has a from block\nReturn <code>true</code> if filter configured to match pending block. …\nReturn <code>true</code> if the filter configured to match pending …\nReturns true if the enum variant is used for an uncle …\nIf the signature contains chain replay protection, And the …\nReturns an iterator over the transaction hashes.\nReturns an iterator over the underlying HashSet. Values …\nStorage key.\nL1 fee for the transaction\nL1 fee scalar for the transaction\nL1 gas price for the transaction\nL1 gas used for the transaction\nReturns the base fee of the latest block in the …\nReturns the blob fee of the latest block in the …\nReturns the number of transactions.\nThe node’s listening address.\nLocal endpoint address\nDecode the log data into a typed log.\nLog Index in Block\nLog send from contracts.\nCalculate receipt logs bloom.\nThe bloom filter.\nLogs bloom\nMaps the inner receipt value of this receipt.\nReturns whether the given bloom matches the list of Blooms …\nReturns whether the given value matches the filter. It the …\nReturns <code>true</code> if the bloom contains one of the address …\nReturns <code>true</code> if the bloom matches the topics\nMax number of peers\nThe max fee per blob gas for EIP-4844 blob transactions.\nConfigured max fee per blob gas for eip-4844 transactions\nSets the maximum fee per gas for the transaction.\nThe max base fee per gas the sender is willing to pay.\nMax BaseFeePerGas the user is willing to pay.\nSets the maximum priority fee per gas for the transaction.\nThe max priority fee per gas the sender is willing to pay, …\nThe miner’s tip.\nCreates a new instance with the given input data.\nAccount meta JSON\nAlias of <code>author</code>\nCheck if all necessary keys are present to build a …\nMix Hash\nAccount name\nAccount name\nThe node’s user agent, containing a client name, …\nNode client ID\nNetwork information\nCreates a new, empty filter\nCreates a new wrapper type for a Filter, if any with …\nCreates a new instance with the given input data.\nCreate a new <code>Extra</code>.\nReturns the base fee of the next block.\nReturns the blob base fee of the next block.\nReturns the blob fee for the next block according to the …\nCalculate excess blob gas for the next block according to …\nSets the nonce for the transaction.\nThe account nonce.\nNonce\nThe nonce of the transaction.\nNonce\nBlock number\nBlock number\nBlock number\nOverrides the block number.\nThe block number: this isn’t always stored.\nLowest number block of the returned range.\nSupport for capturing other fields\nAll fields not present in the inner struct.\nSupport for arbitrary additional fields.\nArbitrary extra fields.\nAll fields not present in the inner struct.\nEIP-4788 parent beacon block root\nHash of the parent\nDetailed information on peers\nPIP protocol information.\nPopulate the <code>blob_versioned_hashes</code> key, if a sidecar …\nThe node’s listening ports.\nThe proof-of-work hash.\nCheck this builder’s preferred type, based on the fields …\nproof for the pair\nThe blob proofs.\nPeers this transaction was propagated to with count.\nThe protocols that the node supports, with protocol …\nProtocols information\npublic key of the recovered account\nEthereum types for pub-sub\nThe R field of the signature; the point on the curve.\nOverrides the prevrandao of the block.\nEthereum log object.\nThe receipt.\nTransactions receipts root hash\nRemote endpoint address\nGeth Compatibility Field: whether this log was removed\nAlloy basic Transaction Request type.\nEIP-7685 requests root.\nWhether the block must be a canonical block\nReserialize the data, returning a new <code>Log</code> object wrapping …\nReserialize the inner data, returning an …\nThe effective gas tip by the transaction\nAn (optional) array of effective priority fee per gas data …\nThe S field of the signature; the point on the curve.\nThe seed hash.\nSets the inner filter object\nSerializes the <code>PendingTransactionFilterKind</code> into a boolean …\nSets the EIP-2930 access list.\nSets the block number this range filter should start at.\nPins the block hash this filter should target.\nSets the block number this range filter should end at.\nBlob sidecar for EIP-4844 transactions.\nAll <em>flattened</em> fields of the transaction signature.\nInteger the size of this block in bytes.\nStarting block\nbindings for state overrides in eth_call\nState root hash\nThe post-transaction stateroot (pre Byzantium)\nReturns the status of the transaction.\nIf transaction is executed successfully.\nThe hash of the storage of the account.\nKeys of storage that would be loaded at the start of …\nThe storage proof.\nThe target.\nOverrides the timestamp of the block.\nTimestamp\nSets the recipient address for the transaction.\nAddress of the receiver. None when its a contract creation …\nThe destination address of the transaction.\nRecipient\nSets the to block number\nReturns a list of Bloom (BloomFilter) corresponding to the …\nReturns a ValueOrArray inside an Option, so that:\nSets topic0 (the event name for non-anonymous events)\nGetter for the topic0 field.\nSets the 1st indexed topic\nSets the 2nd indexed topic\nSets the 3rd indexed topic\nGetter for the topics field. Shortcut for …\nTopics (maximum of 4)\nTopics of the log. The number of logs depend on what <code>LOG</code> …\nReturns the BloomFilter for the given topics\nGet the topic list, mutably. This gives access to the …\nTotal difficulty\nRPC types for transactions\nTransaction Hash\nTransaction Hash.\nInclusive number of tx to replay in block. -1 means replay …\nIndex of the Transaction in the block\nIndex within the block.\nTransaction Index\nReturns the transaction type.\nSets the transactions type for the transactions.\nThe EIP-2718 transaction type. See EIP-2718 for more …\nEIP2718\nBlock Transactions. In the case of an uncle block, this …\nAll transactions to execute\nTransactions root hash\nTrim field conflicts, based on the preferred type\nConsumes the type and returns the optional input data.\nReturns an iterator over the transactions (if any). This …\nTypes for the <code>txpool</code> namespace: …\nThe transaction type.\nReturns an instance of BlockTransactions with the Uncle …\nUncles’ hashes.\nHash of the uncles\nReturns the optional input data.\nAccount UUID (<code>None</code> for address book entries)\nFor EIP-155, EIP-2930 and Blob transactions this is set to …\nIndex of validator associated with withdrawal.\nSets the value (amount) for the transaction.\nValue that the key holds\neth_call output (if no error)\nThe value transferred in the transaction, in wei.\nTransferred value\nNegotiated ethereum protocol version\nNegotiated PIP protocol version\nWarp sync snapshot chunks total.\nWarp sync snapshot chunks processed.\nReturns a new <code>TransactionInfo</code> with the provided base fee.\nWithdrawals in the block.\nWithdrawals root hash added by EIP-4895 and is ignored in …\nThe y parity of the signature. This is only used for typed …\nThe block number or tag this filter should start at.\nThe block number or that this filter should end at.\nRepresents a short summary of the <code>eth</code> sub-protocol …\nCan contain either eth protocol info or a string “…\nRepresents a short summary of the <code>eth</code> sub-protocol …\nThe string “handshake” if the peer is still completing …\nThe string “handshake” if the peer is still completing …\nThe <code>eth</code> sub-protocol metadata known about the host peer.\nThe <code>snap</code> sub-protocol metadata known about the host peer.\nThis includes general information about a running node, …\nRepresents a short summary of information known about a …\nRepresents networking related information about the peer, …\nRepresents the protocols that a peer supports.\nRepresents a node’s discovery and listener ports.\nRepresents protocols that the connected RPC node supports.\nRepresents a short summary of the <code>snap</code> sub-protocol …\nCan contain either snap protocol info or a string “…\nRepresents a short summary of the host’s <code>snap</code> …\nThe peer’s capabilities.\nThe chain configuration for the host’s fork rules.\nThe total difficulty of the host’s blockchain.\nThe node’s discovery port.\nThe enode URL of the connected node.\nThe peer’s enode URL.\nThe ENR of the running client.\nThe peer’s ENR.\nDetails about the node’s supported eth protocol. <code>None</code> if …\nDetails about the peer’s supported eth protocol. <code>None</code> if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe Keccak hash of the host’s genesis block.\nThe hash of the host’s best known block.\nUnique node identifier.\nThe peer’s enode ID.\nWhether or not the peer is inbound.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe IP address of the connected node.\nThe node’s listening address.\nThe node’s listener port.\nThe local endpoint of the TCP connection.\nThe node’s user agent, containing a client name, …\nThe peer’s name.\nThe eth network version.\nNetworking information about the peer.\nPlaceholder for any other protocols\nThe node’s listening ports.\nThe protocols that the node supports, with protocol …\nThe protocols that the peer supports, with protocol …\nThe remote endpoint of the TCP connection.\nDetails about the node’s supported snap protocol. <code>None</code> …\nDetails about the peer’s supported snap protocol. <code>None</code> …\nWhether or not the peer is a static peer.\nWhether or not the peer is trusted.\nThe negotiated eth version.\nThe negotiated snap version.\nList of JSON-RPC error codes\nCustom geth error code, …\nhttps://eips.ethereum.org/EIPS/eip-1898\nThrown when a block wasn’t found …\nFailed to send transaction, See also …\nThrown when querying for <code>finalized</code> or <code>safe</code> block before …\nReturns the error code as <code>i32</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA type that is supposed to capture additional fields that …\nDeserialized this type into another container type\nReturns the argument unchanged.\nReturns the deserialized value of the field, if it exists\nReturns the deserialized value of the field, if it exists. …\nCalls <code>U::from(self)</code>.\nCreates a new instance\nRemoves the deserialized value of the field, if it exists\nRemoves the deserialized value of the field, if it exists …\nRemoves the deserialized value of the field, if it exists. …\nBoolean parameter for new pending transactions.\nSyncing metadata.\nFull Transaction\nNew block header.\nLog\nLogs subscription.\nLog parameters.\nNew block headers subscription.\nNew Pending Transactions subscription.\nNo parameters passed.\nAny additional parameters for a subscription.\nResponse type for a SyncStatus subscription.\nIf not currently syncing, this should always be <code>false</code>.\nSubscription kind.\nSubscription result.\nSyncStatus\nSync status metadata.\nNode syncing status subscription.\nTransaction hash\nThe current block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.")