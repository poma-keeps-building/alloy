searchState.loadedDescShard("alloy_rpc_types_beacon", 0, "Beacon API types\nBLS public key type\nBLS signature type\nConstants used in the Beacon API.\nBeacon API events support. Support for the Beacon API …\nTypes and functions related to the beacon block header. …\nTypes and functions related to the beacon block payload. …\nTypes and functions related to the relay mechanism. …\nTypes and functions related to the sidecar.\nTypes and functions related to withdrawals.\nThe Domain Separation Tag for hash_to_point in Ethereum …\nThe number of bytes in a BLS12-381 public key.\nThe number of bytes in a BLS12-381 secret key.\nThe number of bytes in a BLS12-381 signature.\nThe topic for attestation events.\nEvent for the <code>Attestation</code> topic of the beacon API node …\nTopic variant for the eventstream API\nThe topic for blob sidecar events.\nEvent for the <code>BlobSidecar</code> topic of the beacon API node …\nThe topic for block events.\nEvent for the <code>Block</code> topic of the beacon API node event …\nThe topic for BLS to execution change events.\nEvent for the <code>BlsToExecutionChange</code> topic of the beacon API …\nRepresents a BLS to Execution change message in the beacon …\nThe topic for chain reorganization events.\nEvent for the <code>ChainReorg</code> topic of the beacon API node …\nRepresents a contribution in the beacon chain.\nThe topic for contribution and proof events.\nEvent for the <code>ContributionAndProof</code> topic of the beacon API …\nRepresents a signed contribution and proof message in the …\nThe topic for finalized checkpoint events.\nEvent for the <code>Deposit</code> topic of the beacon API node event …\nThe topic for head events.\nEvent for the <code>Head</code> topic of the beacon API node event …\nThe topic for light client finality update events.\nEvent for the <code>LightClientFinalityUpdate</code> topic of the …\nThe topic for light client optimistic update events.\nEvent for the <code>LightClientOptimisticUpdate</code> topic of the …\nThe topic for payload attributes events.\nData of the event that contains the payload attributes\nEvent for the <code>payload_attributes</code> topic of the beacon API …\nThe topic for voluntary exit events.\nEvent for the <code>VoluntaryExit</code> topic of the beacon API node …\nRepresents a voluntary exit message in the beacon chain.\nThe aggregation bits of the attestation.\nThe aggregation bits.\nThe aggregator index, serialized as a string.\nModule for handling attestation-related functionality and …\nReturns the payload attributes\nThe beacon block root.\nThe block associated with the event.\nThe received block.\nThe block associated with the event.\nThe root of the block associated with the event.\nThe contribution.\nThe current duty dependent root.\nWrapped data of the event.\nThe attestation data.\nThe data associated with the event.\nThe data associated with the event.\nThe depth of the reorganization.\nThe epoch of the voluntary exit, serialized as a string.\nThe epoch of the event, serialized as a string.\nThe epoch of the event, serialized as a string.\nA flag indicating if an epoch transition occurred.\nA flag indicating optimistic execution.\nA flag indicating optimistic execution.\nA flag indicating optimistic execution.\nA flag indicating optimistic execution.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe BLS public key of the change message.\nThe index of the event, serialized as a string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe KZG commitment of the event.\nModule for handling light client finality-related …\nModule for handling light client optimistic-related …\nThe voluntary exit message.\nThe BLS to execution change message.\nThe contribution and proof message.\nThe new head block root.\nThe new head state.\nThe old head block root.\nThe old head state.\nthe execution block hash of the parent block.\nthe execution block number of the parent block.\nthe beacon block root of the parent block to be built upon.\nBeacon API encoding of <code>PayloadAttributesV&lt;N&gt;</code> as defined by …\nThe previous duty dependent root.\nThe slot at which a block using these payload attributes …\nThe execution block number of the parent block. the …\nReturns the identifier value for the eventstream query\nThe selection proof.\nThe signature of the attestation.\nThe signature of the voluntary exit.\nThe signature of the BLS to execution change.\nThe signature of the message.\nThe signature.\nThe slot number of the event, serialized as a string.\nThe slot number of the event, serialized as a string.\nThe slot number of the event, serialized as a string.\nThe slot number of the contribution, serialized as a …\nThe slot number of the event, serialized as a string.\nThe state associated with the event.\nThe state associated with the event.\nThe subcommittee index, serialized as a string.\nThe execution address after the change.\nThe validator index of the voluntary exit, serialized as a …\nThe validator index of the change message, serialized as a …\nthe identifier of the beacon hard fork at <code>proposal_slot</code>, …\nThe version of the event.\nThe version of the event.\nThe versioned hash of the event.\nContains data related to an attestation, including slot, …\nRepresents the source checkpoint of an attestation.\nRepresents the target checkpoint of an attestation.\nThe root of the beacon block being attested to.\nThe epoch number of the source checkpoint, serialized as a …\nThe epoch number of the target checkpoint, serialized as a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe committee index of the attestation, serialized as a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe root of the source checkpoint.\nThe root of the target checkpoint.\nThe slot number in which the attestation was included, …\nThe source checkpoint of the attestation.\nThe target checkpoint of the attestation.\nContains the <code>Beacon</code> header that was attested.\nRepresents the header of a beacon block.\nRepresents the header of a finalized beacon block.\nContains the <code>Beacon2</code> header that was finalized.\nContains finality data for the light client, including …\nContains the sync committee bits and signature.\nThe attested header containing a <code>Beacon</code>.\nThe <code>Beacon</code> object representing the block header.\nThe <code>Beacon2</code> object representing the block header.\nThe root of the block body.\nThe root of the block body.\nThe Merkle branch proof for the finality.\nThe finalized header containing a <code>Beacon2</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe root of the parent block.\nThe root of the parent block.\nThe index of the proposer of the beacon block, serialized …\nThe index of the proposer of the beacon block, serialized …\nThe slot in which the signature was included, serialized …\nThe slot number of the beacon block, serialized as a …\nThe slot number of the beacon block, serialized as a …\nThe state root after the block is processed.\nThe state root after the block is processed.\nThe sync aggregate which includes the sync committee bits …\nThe bits representing the sync committee’s participation.\nThe aggregated signature of the sync committee.\nContains the <code>BeaconBlockHeader</code> that was attested.\nContains optimistic data for the light client, including …\nContains the sync committee bits and signature.\nThe attested header containing a <code>BeaconBlockHeader</code>.\nThe <code>BeaconBlockHeader</code> object from the CL spec.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe slot in which the signature was included, serialized …\nThe sync aggregate which includes the sync committee bits …\nThe bits representing the sync committee’s participation.\nThe aggregated signature of the sync committee.\nThe header of a beacon block.\nBeaconBlockHeader with a signature.\nContainer type for a beacon block header.\nThe response to a request for a <strong>single</strong> beacon block …\nThe response to a request for beacon block headers: …\nThe tree hash merkle root of the BeaconBlockBody for the …\nWhether the block is part of the canonical chain\nContainer for the header data.\nContainer for the header data.\nTrue if the response references an unverified execution …\nTrue if the response references an unverified execution …\nTrue if the response references the finalized history of …\nTrue if the response references the finalized history of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe <code>SignedBeaconBlockHeader</code> object envelope from the CL …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>BeaconBlockHeader</code> object from the CL spec.\nThe signing merkle root of the parent BeaconBlock.\nIndex of validator in validator registry.\nroot hash of the block\nThe signature associated with the <code>BeaconBlockHeader</code>.\nThe slot to which this block corresponds.\nThe tree hash merkle root of the BeaconState for the …\nRepresents all possible payload versions.\nOptimism Payload Attributes\nThe header of the execution payload.\nData structure representing the header data of an …\nMessage structure within the header of an execution …\nResponse object of GET …\nV1 payload\nV2 payload\nV3 payload\nV4 payload\nThe base fee per gas of the execution payload, represented …\nA helper module for serializing and deserializing the …\nA helper module for serializing and deserializing optimism …\nModule providing serialization and deserialization support …\nA helper serde module to convert from/to the Beacon API …\nA helper serde module to convert from/to the Beacon API …\nA helper serde module to convert from/to the Beacon API …\nA helper serde module to convert from/to the Beacon API …\nThe block hash of the execution payload.\nThe block number of the execution payload, represented as …\nThe data associated with the execution payload header.\nThe extra data of the execution payload.\nThe fee recipient address of the execution payload.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe gas limit of the execution payload, represented as a …\nThe gas used by the execution payload, represented as a <code>u64</code>…\nThe header of the execution payload.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe logs bloom filter of the execution payload.\nThe message of the execution payload header.\nThe parent hash of the execution payload.\nInner V1 payload\nInner V1 payload\nInner V1 payload\nThe previous Randao value of the execution payload.\nThe public key associated with the execution payload.\nThe receipts root of the execution payload.\nThe signature of the execution payload header.\nThe state root of the execution payload.\nThe timestamp of the execution payload, represented as a …\nThe transactions root of the execution payload.\nThe value of the execution payload, represented as a <code>U256</code>.\nThe version of the response.\nArray of <code>Withdrawal</code> enabled with V2 See …\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.\nSort result by ascending value (lowest value first)\nRepresents public information about a block sent by a …\nA Request to validate a SubmitBlockRequest …\nA Request to validate a SubmitBlockRequest …\nQuery for the GET …\nSort result by descending value (highest value first)\nOrderBy : Sort results in either ascending or descending …\nQuery for the GET …\nSubmission for the <code>/relay/v1/builder/blocks</code> endpoint …\nSubmission for the <code>/relay/v1/builder/blocks</code> endpoint …\nSubmission for the <code>/relay/v1/builder/blocks</code> endpoint …\nSignedBidTrace is a BidTrace with a signature\nSubmitBlockRequest is the request from the builder to …\nRepresents an entry of the <code>/relay/v1/builder/validators</code> …\nDetails of a validator registration.\nRepresents the message of a validator registration.\nThe Deneb block bundle for this bid.\nSets the specific blockhash\nSets the specific blockhash\nThe hash of the block.\nSearch for a specific blockhash\nSearch for a specific blockhash\nSets the specific EL block number\nSets the specific EL block number\nSearch for a specific EL block number\nSearch for a specific EL block number\nSets the builder public key\nSets the specific builder public key\nThe public key of the builder.\nFilter results by a builder public key\nSearch for a specific builder public key.\nDetails of the validator registration.\nError types for the relay.\nThe execution payload for the submission.\nThe execution payload for the submission.\nThe execution payload for the submission.\nThe execution payload for the block submission.\nThe fee recipient’s address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe gas limit for the registration.\nThe gas limit associated with the block.\nThe gas used within the block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the maximum number of entries (200 max)\nSets the maximum number of entries (200 max)\nMaximum number of entries (200 max)\nMaximum number of entries (200 max)\nThe registration message.\nThe BidTrace message associated with the submission.\nThe BidTrace message associated with the submission.\nThe BidTrace message associated with the submission.\nThe BidTrace message associated with the submission.\nThe BidTrace message associated with the block submission.\nConfigures how to order results\nHow to order results\nOrder results by ascending value (lowest value first)\nOrder results by descending value (highest value first)\nThe parent hash of the block.\nThe recipient of the proposer’s fee.\nSets the proposer public key\nThe public key of the proposer.\nFilter results by a proposer public key\nThe public key of the validator.\nThe registered gas limit for the validation request.\nThe registered gas limit for the validation request.\nThe SubmitBlockRequest data to be validated.\nThe SubmitBlockRequest data to be validated.\nThe signature for the registration.\nThe signature associated with the submission.\nThe signature associated with the submission.\nThe signature associated with the submission.\nThe signature associated with the submission.\nThe signature associated with the block submission.\nSets the specific slot\nSets the specific slot\nThe slot number for the validator entry.\nThe slot associated with the block.\nA specific slot\nA specific slot\nThe timestamp of the registration.\nThe index of the validator.\nThe value associated with the block.\nThe withdrawals root for the validation request.\nThrown if block hash mismatches\nThrown if block hash mismatches\nThrown if block hash mismatches\nThrown if parent hash mismatches\nError thrown by the <code>validateBuilderSubmission</code> endpoints if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe actual parent hash\nThe actual block hash\nThe actual gas limit\nThe actual gas used\nThe expected parent hash\nThe expected block hash\nThe expected gas limit\nThe expected gas used\nBundle of blobs for a given block\nIndividual Blob data that belongs to a 4844 transaction.\nIntermediate type for BlobTransactionSidecar matching\nBlob data\nVec of individual blob data\nHelper function to deserialize boxed blobs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBlob index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe internal iterator over <code>BlobData</code>.\nThe blob’s commitment\nThe blob’s inclusion proofs\nThe blob’s proof\nCreates a new <code>SidecarIterator</code> from a given <code>BeaconBlobBundle</code>…\nReturns a BlobTransactionSidecar of len num_hashes.\nThe block header containing the blob\nSame as Withdrawal but respects the Beacon API format …\nA helper serde module to convert from/to the Beacon API …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeserialize the payload attributes for the beacon API.\nSerialize the payload attributes for the beacon API.")